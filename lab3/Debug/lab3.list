
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005928  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005ab8  08005ab8  00006ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b04  08005b04  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b0c  08005b0c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b0c  08005b0c  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00012e68  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e78  20012e78  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff67  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c1  00000000  00000000  00016fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00019968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca9  00000000  00000000  0001a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ac2  00000000  00000000  0001b679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012238  00000000  00000000  0003d13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d251c  00000000  00000000  0004f373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012188f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004480  00000000  00000000  001218d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00125d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aa0 	.word	0x08005aa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005aa0 	.word	0x08005aa0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2108      	movs	r1, #8
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <MEMS_Write+0x44>)
 80004d6:	f000 ff2d 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004da:	1df9      	adds	r1, r7, #7
 80004dc:	230a      	movs	r3, #10
 80004de:	2201      	movs	r2, #1
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <MEMS_Write+0x48>)
 80004e2:	f001 fcb2 	bl	8001e4a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004e6:	1db9      	adds	r1, r7, #6
 80004e8:	230a      	movs	r3, #10
 80004ea:	2201      	movs	r2, #1
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <MEMS_Write+0x48>)
 80004ee:	f001 fcac 	bl	8001e4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2108      	movs	r1, #8
 80004f6:	4803      	ldr	r0, [pc, #12]	@ (8000504 <MEMS_Write+0x44>)
 80004f8:	f000 ff1c 	bl	8001334 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	2000002c 	.word	0x2000002c

0800050c <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	480c      	ldr	r0, [pc, #48]	@ (8000558 <MEMS_Read+0x4c>)
 8000528:	f000 ff04 	bl	8001334 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 800052c:	1df9      	adds	r1, r7, #7
 800052e:	230a      	movs	r3, #10
 8000530:	2201      	movs	r2, #1
 8000532:	480a      	ldr	r0, [pc, #40]	@ (800055c <MEMS_Read+0x50>)
 8000534:	f001 fc89 	bl	8001e4a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000538:	230a      	movs	r3, #10
 800053a:	2201      	movs	r2, #1
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	4807      	ldr	r0, [pc, #28]	@ (800055c <MEMS_Read+0x50>)
 8000540:	f001 fdc6 	bl	80020d0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <MEMS_Read+0x4c>)
 800054a:	f000 fef3 	bl	8001334 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	2000002c 	.word	0x2000002c

08000560 <Green_LED_Task>:
void Green_LED_Task(void *pvParameters)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		// Green LED blinks
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000568:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <Green_LED_Task+0x2c>)
 800056e:	f000 fefa 	bl	8001366 <HAL_GPIO_TogglePin>
		uint32_t beginTime = HAL_GetTick();
 8000572:	f000 fc55 	bl	8000e20 <HAL_GetTick>
 8000576:	60f8      	str	r0, [r7, #12]
		while (HAL_GetTick() - beginTime < 500/portTICK_RATE_MS) {
 8000578:	bf00      	nop
 800057a:	f000 fc51 	bl	8000e20 <HAL_GetTick>
 800057e:	4602      	mov	r2, r0
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000588:	d3f7      	bcc.n	800057a <Green_LED_Task+0x1a>
	{
 800058a:	e7ed      	b.n	8000568 <Green_LED_Task+0x8>
 800058c:	40020c00 	.word	0x40020c00

08000590 <vHandlerTask>:
		}
	}
}
void vHandlerTask( void *pvParameters )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		/* Take the semaphore */
		if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE ) {
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <vHandlerTask+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 f8cf 	bl	8003744 <xQueueSemaphoreTake>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d1f5      	bne.n	8000598 <vHandlerTask+0x8>
			// semaphore was obtained
                // Orange LED blinks 5 times
				for (int i = 0; i < 10; ++i) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e013      	b.n	80005da <vHandlerTask+0x4a>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <vHandlerTask+0x60>)
 80005b8:	f000 fed5 	bl	8001366 <HAL_GPIO_TogglePin>
					uint32_t beginTime = HAL_GetTick();
 80005bc:	f000 fc30 	bl	8000e20 <HAL_GetTick>
 80005c0:	60b8      	str	r0, [r7, #8]
					while (HAL_GetTick() - beginTime < 500/portTICK_RATE_MS) {
 80005c2:	bf00      	nop
 80005c4:	f000 fc2c 	bl	8000e20 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005d2:	d3f7      	bcc.n	80005c4 <vHandlerTask+0x34>
				for (int i = 0; i < 10; ++i) {
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	dde8      	ble.n	80005b2 <vHandlerTask+0x22>
					}
				}
			// reset interrupt register
			MEMS_Read(LIS3DSH_OUTS1_ADDR, &data);
 80005e0:	4904      	ldr	r1, [pc, #16]	@ (80005f4 <vHandlerTask+0x64>)
 80005e2:	205f      	movs	r0, #95	@ 0x5f
 80005e4:	f7ff ff92 	bl	800050c <MEMS_Read>
		if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE ) {
 80005e8:	e7d6      	b.n	8000598 <vHandlerTask+0x8>
 80005ea:	bf00      	nop
 80005ec:	20000084 	.word	0x20000084
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	20000088 	.word	0x20000088

080005f8 <HAL_GPIO_EXTI_Callback>:
//			WAKEUP_STATE_MACHINE_CONFIG
		}
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
	/* toggle Red LED */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000602:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <HAL_GPIO_EXTI_Callback+0x48>)
 8000608:	f000 fead 	bl	8001366 <HAL_GPIO_TogglePin>

	/* Give the semaphore to unblock the handler task */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f107 020c 	add.w	r2, r7, #12
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ff1f 	bl	800345e <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <HAL_GPIO_EXTI_Callback+0x3e>
 8000626:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <HAL_GPIO_EXTI_Callback+0x50>)
 8000628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	f3bf 8f6f 	isb	sy

}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	20000084 	.word	0x20000084
 8000648:	e000ed04 	.word	0xe000ed04

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fbaf 	bl	8000db4 <HAL_Init>

  /* USER CODE BEGIN Init */
    /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f859 	bl	800070c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  WAKEUP_STATE_MACHINE_CONFIG
 800065a:	2101      	movs	r1, #1
 800065c:	2021      	movs	r0, #33	@ 0x21
 800065e:	f7ff ff2f 	bl	80004c0 <MEMS_Write>
 8000662:	2148      	movs	r1, #72	@ 0x48
 8000664:	2023      	movs	r0, #35	@ 0x23
 8000666:	f7ff ff2b 	bl	80004c0 <MEMS_Write>
 800066a:	2167      	movs	r1, #103	@ 0x67
 800066c:	2020      	movs	r0, #32
 800066e:	f7ff ff27 	bl	80004c0 <MEMS_Write>
 8000672:	2100      	movs	r1, #0
 8000674:	2024      	movs	r0, #36	@ 0x24
 8000676:	f7ff ff23 	bl	80004c0 <MEMS_Write>
 800067a:	2155      	movs	r1, #85	@ 0x55
 800067c:	2057      	movs	r0, #87	@ 0x57
 800067e:	f7ff ff1f 	bl	80004c0 <MEMS_Write>
 8000682:	2105      	movs	r1, #5
 8000684:	2040      	movs	r0, #64	@ 0x40
 8000686:	f7ff ff1b 	bl	80004c0 <MEMS_Write>
 800068a:	2111      	movs	r1, #17
 800068c:	2041      	movs	r0, #65	@ 0x41
 800068e:	f7ff ff17 	bl	80004c0 <MEMS_Write>
 8000692:	21fc      	movs	r1, #252	@ 0xfc
 8000694:	2059      	movs	r0, #89	@ 0x59
 8000696:	f7ff ff13 	bl	80004c0 <MEMS_Write>
 800069a:	21fc      	movs	r1, #252	@ 0xfc
 800069c:	205a      	movs	r0, #90	@ 0x5a
 800069e:	f7ff ff0f 	bl	80004c0 <MEMS_Write>
 80006a2:	2101      	movs	r1, #1
 80006a4:	205b      	movs	r0, #91	@ 0x5b
 80006a6:	f7ff ff0b 	bl	80004c0 <MEMS_Write>
  xSemaphore = xSemaphoreCreateBinary();
 80006aa:	2203      	movs	r2, #3
 80006ac:	2100      	movs	r1, #0
 80006ae:	2001      	movs	r0, #1
 80006b0:	f002 fcd8 	bl	8003064 <xQueueGenericCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a10      	ldr	r2, [pc, #64]	@ (80006f8 <main+0xac>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f8c7 	bl	800084c <MX_GPIO_Init>
  MX_SPI1_Init();
 80006be:	f000 f88f 	bl	80007e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  xTaskCreate(Green_LED_Task, "Green LED", 1000, NULL, 1, NULL);
 80006c2:	2300      	movs	r3, #0
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d0:	490a      	ldr	r1, [pc, #40]	@ (80006fc <main+0xb0>)
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <main+0xb4>)
 80006d4:	f003 facc 	bl	8003c70 <xTaskCreate>
  xTaskCreate(vHandlerTask, "Handler Task", 1000, NULL, 4, NULL);
 80006d8:	2300      	movs	r3, #0
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2304      	movs	r3, #4
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006e6:	4907      	ldr	r1, [pc, #28]	@ (8000704 <main+0xb8>)
 80006e8:	4807      	ldr	r0, [pc, #28]	@ (8000708 <main+0xbc>)
 80006ea:	f003 fac1 	bl	8003c70 <xTaskCreate>

  vTaskStartScheduler();
 80006ee:	f003 fbff 	bl	8003ef0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0xa6>
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	08005ab8 	.word	0x08005ab8
 8000700:	08000561 	.word	0x08000561
 8000704:	08005ac4 	.word	0x08005ac4
 8000708:	08000591 	.word	0x08000591

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	@ 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f986 	bl	8005a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <SystemClock_Config+0xcc>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000740:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <SystemClock_Config+0xd0>)
 8000756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000780:	2332      	movs	r3, #50	@ 0x32
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000784:	2304      	movs	r3, #4
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000788:	2307      	movs	r3, #7
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fe1b 	bl	80013cc <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800079c:	f000 f9b0 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f87c 	bl	80018bc <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ca:	f000 f999 	bl	8000b00 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f001 fa81 	bl	8001d38 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f960 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000002c 	.word	0x2000002c
 8000848:	40013000 	.word	0x40013000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b97      	ldr	r3, [pc, #604]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a96      	ldr	r2, [pc, #600]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b94      	ldr	r3, [pc, #592]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b90      	ldr	r3, [pc, #576]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a8f      	ldr	r2, [pc, #572]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b8d      	ldr	r3, [pc, #564]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b89      	ldr	r3, [pc, #548]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a88      	ldr	r2, [pc, #544]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b86      	ldr	r3, [pc, #536]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b82      	ldr	r3, [pc, #520]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a81      	ldr	r2, [pc, #516]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a7a      	ldr	r2, [pc, #488]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b78      	ldr	r3, [pc, #480]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b74      	ldr	r3, [pc, #464]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a73      	ldr	r2, [pc, #460]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b71      	ldr	r3, [pc, #452]	@ (8000ac4 <MX_GPIO_Init+0x278>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	486e      	ldr	r0, [pc, #440]	@ (8000ac8 <MX_GPIO_Init+0x27c>)
 8000910:	f000 fd10 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	486c      	ldr	r0, [pc, #432]	@ (8000acc <MX_GPIO_Init+0x280>)
 800091a:	f000 fd0b 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 800091e:	2200      	movs	r2, #0
 8000920:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000924:	486a      	ldr	r0, [pc, #424]	@ (8000ad0 <MX_GPIO_Init+0x284>)
 8000926:	f000 fd05 	bl	8001334 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4861      	ldr	r0, [pc, #388]	@ (8000ac8 <MX_GPIO_Init+0x27c>)
 8000942:	f000 fb5b 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	485b      	ldr	r0, [pc, #364]	@ (8000acc <MX_GPIO_Init+0x280>)
 800095e:	f000 fb4d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000962:	2308      	movs	r3, #8
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4853      	ldr	r0, [pc, #332]	@ (8000acc <MX_GPIO_Init+0x280>)
 800097e:	f000 fb3d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000982:	2310      	movs	r3, #16
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	484d      	ldr	r0, [pc, #308]	@ (8000ad4 <MX_GPIO_Init+0x288>)
 800099e:	f000 fb2d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a2:	2304      	movs	r3, #4
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4848      	ldr	r0, [pc, #288]	@ (8000ad8 <MX_GPIO_Init+0x28c>)
 80009b6:	f000 fb21 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009cc:	2305      	movs	r3, #5
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4840      	ldr	r0, [pc, #256]	@ (8000ad8 <MX_GPIO_Init+0x28c>)
 80009d8:	f000 fb10 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 80009dc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009e0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4836      	ldr	r0, [pc, #216]	@ (8000ad0 <MX_GPIO_Init+0x284>)
 80009f6:	f000 fb01 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009fa:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	482d      	ldr	r0, [pc, #180]	@ (8000acc <MX_GPIO_Init+0x280>)
 8000a18:	f000 faf0 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4828      	ldr	r0, [pc, #160]	@ (8000ad4 <MX_GPIO_Init+0x288>)
 8000a32:	f000 fae3 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <MX_GPIO_Init+0x288>)
 8000a54:	f000 fad2 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_GPIO_Init+0x284>)
 8000a6c:	f000 fac6 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a70:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	2312      	movs	r3, #18
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a82:	2304      	movs	r3, #4
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <MX_GPIO_Init+0x28c>)
 8000a8e:	f000 fab5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <MX_GPIO_Init+0x27c>)
 8000aa8:	f000 faa8 	bl	8000ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	210f      	movs	r1, #15
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f000 fa79 	bl	8000fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f000 fa92 	bl	8000fe0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	@ 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40020c00 	.word	0x40020c00
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 f983 	bl	8000df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40001400 	.word	0x40001400

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a19      	ldr	r2, [pc, #100]	@ (8000be0 <HAL_SPI_MspInit+0x84>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12b      	bne.n	8000bd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_SPI_MspInit+0x88>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_SPI_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <HAL_SPI_MspInit+0x88>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_SPI_MspInit+0x88>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bb6:	23e0      	movs	r3, #224	@ 0xe0
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	f000 fa13 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40013000 	.word	0x40013000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	@ 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	4a32      	ldr	r2, [pc, #200]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c18:	f107 0210 	add.w	r2, r7, #16
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4611      	mov	r1, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f856 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c32:	f001 f83b 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000c36:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c38:	e004      	b.n	8000c44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3a:	f001 f837 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c46:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <HAL_InitTick+0xe8>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <HAL_InitTick+0xf0>)
 8000c56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c5e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c64:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c7a:	f001 fe33 	bl	80028e4 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d11b      	bne.n	8000cc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c8c:	4812      	ldr	r0, [pc, #72]	@ (8000cd8 <HAL_InitTick+0xec>)
 8000c8e:	f001 fe83 	bl	8002998 <HAL_TIM_Base_Start_IT>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d111      	bne.n	8000cc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ca0:	2037      	movs	r0, #55	@ 0x37
 8000ca2:	f000 f99d 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d808      	bhi.n	8000cbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2037      	movs	r0, #55	@ 0x37
 8000cb2:	f000 f979 	bl	8000fa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_InitTick+0xf4>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e002      	b.n	8000cc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3738      	adds	r7, #56	@ 0x38
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	2000008c 	.word	0x2000008c
 8000cdc:	40001400 	.word	0x40001400
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 fb3c 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM7_IRQHandler+0x10>)
 8000d2e:	f001 fea3 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000008c 	.word	0x2000008c

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 fe55 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fc5b 	bl	800064c <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000da4:	08005b14 	.word	0x08005b14
  ldr r2, =_sbss
 8000da8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dac:	20012e78 	.word	0x20012e78

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f8d8 	bl	8000f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff ff02 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fe90 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	200000d4 	.word	0x200000d4

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200000d4 	.word	0x200000d4

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	@ (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff4c 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fba:	f7ff ff61 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	6978      	ldr	r0, [r7, #20]
 8000fc6:	f7ff ffb1 	bl	8000f2c <NVIC_EncodePriority>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff80 	bl	8000ed8 <__NVIC_SetPriority>
}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff54 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b60      	ldr	r3, [pc, #384]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a5f      	ldr	r2, [pc, #380]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b5d      	ldr	r3, [pc, #372]	@ (8001308 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5b      	ldr	r2, [pc, #364]	@ (800130c <HAL_GPIO_Init+0x310>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	@ (8001310 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	@ (8001314 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x324>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x328>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x32c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x330>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	@ (800130c <HAL_GPIO_Init+0x310>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126c:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <HAL_GPIO_Init+0x334>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001296:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <HAL_GPIO_Init+0x334>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001378:	887a      	ldrh	r2, [r7, #2]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4013      	ands	r3, r2
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43d9      	mvns	r1, r3
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	400b      	ands	r3, r1
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f91c 	bl	80005f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e267      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d075      	beq.n	80014d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ea:	4b88      	ldr	r3, [pc, #544]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d00c      	beq.n	8001410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4b85      	ldr	r3, [pc, #532]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d112      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001402:	4b82      	ldr	r3, [pc, #520]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800140e:	d10b      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	4b7e      	ldr	r3, [pc, #504]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d05b      	beq.n	80014d4 <HAL_RCC_OscConfig+0x108>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d157      	bne.n	80014d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e242      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001430:	d106      	bne.n	8001440 <HAL_RCC_OscConfig+0x74>
 8001432:	4b76      	ldr	r3, [pc, #472]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a75      	ldr	r2, [pc, #468]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b70      	ldr	r3, [pc, #448]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6f      	ldr	r2, [pc, #444]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b6d      	ldr	r3, [pc, #436]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6c      	ldr	r2, [pc, #432]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xb0>
 8001464:	4b69      	ldr	r3, [pc, #420]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a68      	ldr	r2, [pc, #416]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b66      	ldr	r3, [pc, #408]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a65      	ldr	r2, [pc, #404]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fccc 	bl	8000e20 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fcc8 	bl	8000e20 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e207      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b5b      	ldr	r3, [pc, #364]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xc0>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fcb8 	bl	8000e20 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fcb4 	bl	8000e20 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	@ 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1f3      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	4b51      	ldr	r3, [pc, #324]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0xe8>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d063      	beq.n	80015aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e2:	4b4a      	ldr	r3, [pc, #296]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d11c      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fa:	4b44      	ldr	r3, [pc, #272]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	4b41      	ldr	r3, [pc, #260]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1c7      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b3b      	ldr	r3, [pc, #236]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4937      	ldr	r1, [pc, #220]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	e03a      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <HAL_RCC_OscConfig+0x244>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fc6d 	bl	8000e20 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fc69 	bl	8000e20 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e1a8      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4925      	ldr	r1, [pc, #148]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <HAL_RCC_OscConfig+0x244>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fc4c 	bl	8000e20 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158c:	f7ff fc48 	bl	8000e20 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e187      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d036      	beq.n	8001624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d016      	beq.n	80015ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <HAL_RCC_OscConfig+0x248>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fc2c 	bl	8000e20 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc28 	bl	8000e20 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e167      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_OscConfig+0x240>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x200>
 80015ea:	e01b      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_OscConfig+0x248>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fc15 	bl	8000e20 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e00e      	b.n	8001618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fc11 	bl	8000e20 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d907      	bls.n	8001618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e150      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
 800160c:	40023800 	.word	0x40023800
 8001610:	42470000 	.word	0x42470000
 8001614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b88      	ldr	r3, [pc, #544]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ea      	bne.n	80015fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8097 	beq.w	8001760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b81      	ldr	r3, [pc, #516]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b7d      	ldr	r3, [pc, #500]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a7c      	ldr	r2, [pc, #496]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b7a      	ldr	r3, [pc, #488]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165e:	2301      	movs	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b77      	ldr	r3, [pc, #476]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d118      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166e:	4b74      	ldr	r3, [pc, #464]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a73      	ldr	r2, [pc, #460]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff fbd1 	bl	8000e20 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001682:	f7ff fbcd 	bl	8000e20 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e10c      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_OscConfig+0x474>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x2ea>
 80016a8:	4b64      	ldr	r3, [pc, #400]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ac:	4a63      	ldr	r2, [pc, #396]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x324>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x30c>
 80016be:	4b5f      	ldr	r3, [pc, #380]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a5e      	ldr	r2, [pc, #376]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	4b5c      	ldr	r3, [pc, #368]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	4a5b      	ldr	r2, [pc, #364]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x324>
 80016d8:	4b58      	ldr	r3, [pc, #352]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a57      	ldr	r2, [pc, #348]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e4:	4b55      	ldr	r3, [pc, #340]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e8:	4a54      	ldr	r2, [pc, #336]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d015      	beq.n	8001724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fb92 	bl	8000e20 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff fb8e 	bl	8000e20 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0cb      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	4b49      	ldr	r3, [pc, #292]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0ee      	beq.n	8001700 <HAL_RCC_OscConfig+0x334>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fb7c 	bl	8000e20 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fb78 	bl	8000e20 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0b5      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001742:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ee      	bne.n	800172c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b39      	ldr	r3, [pc, #228]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a38      	ldr	r2, [pc, #224]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80a1 	beq.w	80018ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d05c      	beq.n	8001830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d141      	bne.n	8001802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <HAL_RCC_OscConfig+0x478>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fb4c 	bl	8000e20 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fb48 	bl	8000e20 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e087      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4b27      	ldr	r3, [pc, #156]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	019b      	lsls	r3, r3, #6
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	491b      	ldr	r1, [pc, #108]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x478>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb21 	bl	8000e20 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fb1d 	bl	8000e20 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e05c      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x416>
 8001800:	e054      	b.n	80018ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_RCC_OscConfig+0x478>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fb0a 	bl	8000e20 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff fb06 	bl	8000e20 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e045      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_RCC_OscConfig+0x470>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x444>
 800182e:	e03d      	b.n	80018ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e038      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000
 8001844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_RCC_OscConfig+0x4ec>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d028      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d121      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d11a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001878:	4013      	ands	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800187e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001880:	4293      	cmp	r3, r2
 8001882:	d111      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	085b      	lsrs	r3, r3, #1
 8001890:	3b01      	subs	r3, #1
 8001892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0cc      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b68      	ldr	r3, [pc, #416]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d90c      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b65      	ldr	r3, [pc, #404]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800191a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d044      	beq.n	80019dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d119      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d003      	beq.n	800197a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e067      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4934      	ldr	r1, [pc, #208]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ac:	f7ff fa38 	bl	8000e20 <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7ff fa34 	bl	8000e20 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e04f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 020c 	and.w	r2, r3, #12
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1eb      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019dc:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d20c      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f8c2 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08005aec 	.word	0x08005aec
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a8c:	b094      	sub	sp, #80	@ 0x50
 8001a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a94:	2300      	movs	r3, #0
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a98:	2300      	movs	r3, #0
 8001a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa0:	4b79      	ldr	r3, [pc, #484]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	f200 80e1 	bhi.w	8001c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x34>
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aba:	e0db      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b73      	ldr	r3, [pc, #460]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ac0:	e0db      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4b73      	ldr	r3, [pc, #460]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ac6:	e0d8      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b6a      	ldr	r3, [pc, #424]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001afa:	4622      	mov	r2, r4
 8001afc:	462b      	mov	r3, r5
 8001afe:	f04f 0000 	mov.w	r0, #0
 8001b02:	f04f 0100 	mov.w	r1, #0
 8001b06:	0159      	lsls	r1, r3, #5
 8001b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b0c:	0150      	lsls	r0, r2, #5
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4621      	mov	r1, r4
 8001b14:	1a51      	subs	r1, r2, r1
 8001b16:	6139      	str	r1, [r7, #16]
 8001b18:	4629      	mov	r1, r5
 8001b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b2c:	4659      	mov	r1, fp
 8001b2e:	018b      	lsls	r3, r1, #6
 8001b30:	4651      	mov	r1, sl
 8001b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b36:	4651      	mov	r1, sl
 8001b38:	018a      	lsls	r2, r1, #6
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b40:	4659      	mov	r1, fp
 8001b42:	eb63 0901 	sbc.w	r9, r3, r1
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	4699      	mov	r9, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	eb18 0303 	adds.w	r3, r8, r3
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	462b      	mov	r3, r5
 8001b68:	eb49 0303 	adc.w	r3, r9, r3
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	024b      	lsls	r3, r1, #9
 8001b7e:	4621      	mov	r1, r4
 8001b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b84:	4621      	mov	r1, r4
 8001b86:	024a      	lsls	r2, r1, #9
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8e:	2200      	movs	r2, #0
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b98:	f7fe fb1a 	bl	80001d0 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ba4:	e058      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b38      	ldr	r3, [pc, #224]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	2200      	movs	r2, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc0:	4642      	mov	r2, r8
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	0159      	lsls	r1, r3, #5
 8001bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd2:	0150      	lsls	r0, r2, #5
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4641      	mov	r1, r8
 8001bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bde:	4649      	mov	r1, r9
 8001be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	00eb      	lsls	r3, r5, #3
 8001c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0e:	00e2      	lsls	r2, r4, #3
 8001c10:	4614      	mov	r4, r2
 8001c12:	461d      	mov	r5, r3
 8001c14:	4643      	mov	r3, r8
 8001c16:	18e3      	adds	r3, r4, r3
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	eb45 0303 	adc.w	r3, r5, r3
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c2e:	4629      	mov	r1, r5
 8001c30:	028b      	lsls	r3, r1, #10
 8001c32:	4621      	mov	r1, r4
 8001c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c38:	4621      	mov	r1, r4
 8001c3a:	028a      	lsls	r2, r1, #10
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c42:	2200      	movs	r2, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	61fa      	str	r2, [r7, #28]
 8001c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4c:	f7fe fac0 	bl	80001d0 <__aeabi_uldivmod>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4613      	mov	r3, r2
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	3301      	adds	r3, #1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3750      	adds	r7, #80	@ 0x50
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08005afc 	.word	0x08005afc

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07b      	b.n	8001e42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d5a:	d009      	beq.n	8001d70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
 8001d62:	e005      	b.n	8001d70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fee6 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001da6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df4:	ea42 0103 	orr.w	r1, r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f003 0104 	and.w	r1, r3, #4
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	f003 0210 	and.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_SPI_Transmit+0x22>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e12d      	b.n	80020c8 <HAL_SPI_Transmit+0x27e>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e74:	f7fe ffd4 	bl	8000e20 <HAL_GetTick>
 8001e78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d002      	beq.n	8001e90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e8e:	e116      	b.n	80020be <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_SPI_Transmit+0x52>
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ea0:	e10d      	b.n	80020be <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ee8:	d10f      	bne.n	8001f0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	d007      	beq.n	8001f28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f30:	d14f      	bne.n	8001fd2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_Transmit+0xf6>
 8001f3a:	8afb      	ldrh	r3, [r7, #22]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d142      	bne.n	8001fc6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	1c9a      	adds	r2, r3, #2
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f64:	e02f      	b.n	8001fc6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d112      	bne.n	8001f9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f98:	e015      	b.n	8001fc6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f9a:	f7fe ff41 	bl	8000e20 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d803      	bhi.n	8001fb2 <HAL_SPI_Transmit+0x168>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d102      	bne.n	8001fb8 <HAL_SPI_Transmit+0x16e>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001fc4:	e07b      	b.n	80020be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ca      	bne.n	8001f66 <HAL_SPI_Transmit+0x11c>
 8001fd0:	e050      	b.n	8002074 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Transmit+0x196>
 8001fda:	8afb      	ldrh	r3, [r7, #22]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d144      	bne.n	800206a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002006:	e030      	b.n	800206a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b02      	cmp	r3, #2
 8002014:	d113      	bne.n	800203e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	330c      	adds	r3, #12
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800203c:	e015      	b.n	800206a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800203e:	f7fe feef 	bl	8000e20 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d803      	bhi.n	8002056 <HAL_SPI_Transmit+0x20c>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d102      	bne.n	800205c <HAL_SPI_Transmit+0x212>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002068:	e029      	b.n	80020be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1c9      	bne.n	8002008 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fbdf 	bl	800283c <SPI_EndRxTxTransaction>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	77fb      	strb	r3, [r7, #31]
 80020b4:	e003      	b.n	80020be <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d002      	beq.n	80020f6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
 80020f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020f4:	e0fb      	b.n	80022ee <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020fe:	d112      	bne.n	8002126 <HAL_SPI_Receive+0x56>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10e      	bne.n	8002126 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2204      	movs	r2, #4
 800210c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f8ef 	bl	8002300 <HAL_SPI_TransmitReceive>
 8002122:	4603      	mov	r3, r0
 8002124:	e0e8      	b.n	80022f8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_SPI_Receive+0x64>
 8002130:	2302      	movs	r3, #2
 8002132:	e0e1      	b.n	80022f8 <HAL_SPI_Receive+0x228>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800213c:	f7fe fe70 	bl	8000e20 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_SPI_Receive+0x7e>
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002152:	e0cc      	b.n	80022ee <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2204      	movs	r2, #4
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	88fa      	ldrh	r2, [r7, #6]
 800216c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	88fa      	ldrh	r2, [r7, #6]
 8002172:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800219a:	d10f      	bne.n	80021bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b40      	cmp	r3, #64	@ 0x40
 80021c8:	d007      	beq.n	80021da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d16a      	bne.n	80022b8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021e2:	e032      	b.n	800224a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d115      	bne.n	800221e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f103 020c 	add.w	r2, r3, #12
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800221c:	e015      	b.n	800224a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800221e:	f7fe fdff 	bl	8000e20 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d803      	bhi.n	8002236 <HAL_SPI_Receive+0x166>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d102      	bne.n	800223c <HAL_SPI_Receive+0x16c>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002248:	e051      	b.n	80022ee <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1c7      	bne.n	80021e4 <HAL_SPI_Receive+0x114>
 8002254:	e035      	b.n	80022c2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d113      	bne.n	800228c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	b292      	uxth	r2, r2
 8002270:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002276:	1c9a      	adds	r2, r3, #2
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002280:	b29b      	uxth	r3, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800228a:	e015      	b.n	80022b8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800228c:	f7fe fdc8 	bl	8000e20 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d803      	bhi.n	80022a4 <HAL_SPI_Receive+0x1d4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d102      	bne.n	80022aa <HAL_SPI_Receive+0x1da>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80022b6:	e01a      	b.n	80022ee <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1c9      	bne.n	8002256 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	6839      	ldr	r1, [r7, #0]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fa52 	bl	8002770 <SPI_EndRxTransaction>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	75fb      	strb	r3, [r7, #23]
 80022e4:	e003      	b.n	80022ee <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800230e:	2301      	movs	r3, #1
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x26>
 8002322:	2302      	movs	r3, #2
 8002324:	e198      	b.n	8002658 <HAL_SPI_TransmitReceive+0x358>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800232e:	f7fe fd77 	bl	8000e20 <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800233a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002348:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800234c:	2b01      	cmp	r3, #1
 800234e:	d00f      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x70>
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002356:	d107      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d103      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x68>
 8002360:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002364:	2b04      	cmp	r3, #4
 8002366:	d003      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800236e:	e16d      	b.n	800264c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x82>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x82>
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002388:	e160      	b.n	800264c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b04      	cmp	r3, #4
 8002394:	d003      	beq.n	800239e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023de:	2b40      	cmp	r3, #64	@ 0x40
 80023e0:	d007      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023fa:	d17c      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_SPI_TransmitReceive+0x10a>
 8002404:	8b7b      	ldrh	r3, [r7, #26]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d16a      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	1c9a      	adds	r2, r3, #2
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800242e:	e057      	b.n	80024e0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d11b      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x176>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_SPI_TransmitReceive+0x176>
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d113      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	1c9a      	adds	r2, r3, #2
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d119      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x1b8>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d014      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002498:	b292      	uxth	r2, r2
 800249a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	1c9a      	adds	r2, r3, #2
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024b4:	2301      	movs	r3, #1
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024b8:	f7fe fcb2 	bl	8000e20 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d80b      	bhi.n	80024e0 <HAL_SPI_TransmitReceive+0x1e0>
 80024c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ce:	d007      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80024de:	e0b5      	b.n	800264c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1a2      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x130>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d19d      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x130>
 80024f4:	e080      	b.n	80025f8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x204>
 80024fe:	8b7b      	ldrh	r3, [r7, #26]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d16f      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252a:	e05b      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11c      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x274>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x274>
 8002544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d114      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d119      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x2b6>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d014      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b2:	2301      	movs	r3, #1
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025b6:	f7fe fc33 	bl	8000e20 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d803      	bhi.n	80025ce <HAL_SPI_TransmitReceive+0x2ce>
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d102      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x2d4>
 80025ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80025e2:	e033      	b.n	800264c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d19e      	bne.n	800252c <HAL_SPI_TransmitReceive+0x22c>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d199      	bne.n	800252c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f91d 	bl	800283c <SPI_EndRxTxTransaction>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002614:	e01a      	b.n	800264c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002642:	e003      	b.n	800264c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002654:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002658:	4618      	mov	r0, r3
 800265a:	3730      	adds	r7, #48	@ 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002670:	f7fe fbd6 	bl	8000e20 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002680:	f7fe fbce 	bl	8000e20 <HAL_GetTick>
 8002684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002686:	4b39      	ldr	r3, [pc, #228]	@ (800276c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	0d1b      	lsrs	r3, r3, #20
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002696:	e054      	b.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d050      	beq.n	8002742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026a0:	f7fe fbbe 	bl	8000e20 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d902      	bls.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d13d      	bne.n	8002732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80026c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ce:	d111      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026d8:	d004      	beq.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e2:	d107      	bne.n	80026f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fc:	d10f      	bne.n	800271e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800271c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e017      	b.n	8002762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3b01      	subs	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d19b      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002784:	d111      	bne.n	80027aa <SPI_EndRxTransaction+0x3a>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800278e:	d004      	beq.n	800279a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002798:	d107      	bne.n	80027aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027b2:	d12a      	bne.n	800280a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027bc:	d012      	beq.n	80027e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff ff49 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02d      	beq.n	8002830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e026      	b.n	8002832 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff ff36 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01a      	beq.n	8002830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e013      	b.n	8002832 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	2101      	movs	r1, #1
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff ff23 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e000      	b.n	8002832 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2201      	movs	r2, #1
 8002850:	2102      	movs	r1, #2
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7ff ff04 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e032      	b.n	80028d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <SPI_EndRxTxTransaction+0xa0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <SPI_EndRxTxTransaction+0xa4>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0d5b      	lsrs	r3, r3, #21
 800287a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800288c:	d112      	bne.n	80028b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	@ 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff fee1 	bl	8002660 <SPI_WaitFlagStateUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e00f      	b.n	80028d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3b01      	subs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b80      	cmp	r3, #128	@ 0x80
 80028cc:	d0f2      	beq.n	80028b4 <SPI_EndRxTxTransaction+0x78>
 80028ce:	e000      	b.n	80028d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80028d0:	bf00      	nop
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000000 	.word	0x20000000
 80028e0:	165e9f81 	.word	0x165e9f81

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f839 	bl	8002982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 f9c0 	bl	8002ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04e      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d022      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d01d      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d018      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d010      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3a:	e007      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40010400 	.word	0x40010400
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40001800 	.word	0x40001800

08002a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0202 	mvn.w	r2, #2
 8002aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8d2 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8c4 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8d5 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0204 	mvn.w	r2, #4
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8ac 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f89e 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8af 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d020      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f886 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f878 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f889 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d020      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0210 	mvn.w	r2, #16
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2208      	movs	r2, #8
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f860 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f852 	bl	8002c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f863 	bl	8002c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd ff7c 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f906 	bl	8002e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00c      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f834 	bl	8002c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0220 	mvn.w	r2, #32
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8d8 	bl	8002e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a46      	ldr	r2, [pc, #280]	@ (8002dd4 <TIM_Base_SetConfig+0x12c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc6:	d00f      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a43      	ldr	r2, [pc, #268]	@ (8002dd8 <TIM_Base_SetConfig+0x130>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00b      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a42      	ldr	r2, [pc, #264]	@ (8002ddc <TIM_Base_SetConfig+0x134>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a41      	ldr	r2, [pc, #260]	@ (8002de0 <TIM_Base_SetConfig+0x138>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <TIM_Base_SetConfig+0x13c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a35      	ldr	r2, [pc, #212]	@ (8002dd4 <TIM_Base_SetConfig+0x12c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d08:	d027      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a32      	ldr	r2, [pc, #200]	@ (8002dd8 <TIM_Base_SetConfig+0x130>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d023      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <TIM_Base_SetConfig+0x134>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01f      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a30      	ldr	r2, [pc, #192]	@ (8002de0 <TIM_Base_SetConfig+0x138>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2f      	ldr	r2, [pc, #188]	@ (8002de4 <TIM_Base_SetConfig+0x13c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d017      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <TIM_Base_SetConfig+0x140>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <TIM_Base_SetConfig+0x144>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <TIM_Base_SetConfig+0x148>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <TIM_Base_SetConfig+0x14c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002df8 <TIM_Base_SetConfig+0x150>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <TIM_Base_SetConfig+0x154>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <TIM_Base_SetConfig+0x12c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0xf8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <TIM_Base_SetConfig+0x13c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d103      	bne.n	8002da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f023 0201 	bic.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40000c00 	.word	0x40000c00
 8002de4:	40010400 	.word	0x40010400
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400
 8002df0:	40014800 	.word	0x40014800
 8002df4:	40001800 	.word	0x40001800
 8002df8:	40001c00 	.word	0x40001c00
 8002dfc:	40002000 	.word	0x40002000

08002e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 0208 	add.w	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f103 0208 	add.w	r2, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f103 0208 	add.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d103      	bne.n	8002eea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e00c      	b.n	8002f04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3308      	adds	r3, #8
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e002      	b.n	8002ef8 <vListInsert+0x2e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d2f6      	bcs.n	8002ef2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d103      	bne.n	8002f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fbc:	f002 fa34 	bl	8005428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	441a      	add	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	3b01      	subs	r3, #1
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	441a      	add	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	22ff      	movs	r2, #255	@ 0xff
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	22ff      	movs	r2, #255	@ 0xff
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01a      	beq.n	8003050 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3310      	adds	r3, #16
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f9d8 	bl	80043d4 <xTaskRemoveFromEventList>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d012      	beq.n	8003050 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <xQueueGenericReset+0xd0>)
 800302c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	e009      	b.n	8003050 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3310      	adds	r3, #16
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fef1 	bl	8002e28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3324      	adds	r3, #36	@ 0x24
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff feec 	bl	8002e28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003050:	f002 fa1c 	bl	800548c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003054:	2301      	movs	r3, #1
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	613b      	str	r3, [r7, #16]
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d102      	bne.n	800309c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e004      	b.n	80030a6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3350      	adds	r3, #80	@ 0x50
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 fade 	bl	800566c <pvPortMalloc>
 80030b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3350      	adds	r3, #80	@ 0x50
 80030c0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030c2:	79fa      	ldrb	r2, [r7, #7]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f805 	bl	80030de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030d4:	69bb      	ldr	r3, [r7, #24]
	}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e002      	b.n	8003100 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800310c:	2101      	movs	r1, #1
 800310e:	69b8      	ldr	r0, [r7, #24]
 8003110:	f7ff ff3e 	bl	8002f90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08e      	sub	sp, #56	@ 0x38
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <xQueueGenericSend+0x34>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueGenericSend+0x42>
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueGenericSend+0x46>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueGenericSend+0x48>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <xQueueGenericSend+0x64>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d103      	bne.n	8003196 <xQueueGenericSend+0x72>
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <xQueueGenericSend+0x76>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueGenericSend+0x78>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <xQueueGenericSend+0x94>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	623b      	str	r3, [r7, #32]
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b8:	f001 faac 	bl	8004714 <xTaskGetSchedulerState>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <xQueueGenericSend+0xa4>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <xQueueGenericSend+0xa8>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <xQueueGenericSend+0xaa>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <xQueueGenericSend+0xc6>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	61fb      	str	r3, [r7, #28]
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	e7fd      	b.n	80031e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ea:	f002 f91d 	bl	8005428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <xQueueGenericSend+0xdc>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d129      	bne.n	8003254 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003206:	f000 fbc5 	bl	8003994 <prvCopyDataToQueue>
 800320a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800320c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	3324      	adds	r3, #36	@ 0x24
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f8db 	bl	80043d4 <xTaskRemoveFromEventList>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003224:	4b3f      	ldr	r3, [pc, #252]	@ (8003324 <xQueueGenericSend+0x200>)
 8003226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	e00a      	b.n	800324c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800323c:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <xQueueGenericSend+0x200>)
 800323e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800324c:	f002 f91e 	bl	800548c <vPortExitCritical>
				return pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	e063      	b.n	800331c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800325a:	f002 f917 	bl	800548c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800325e:	2300      	movs	r3, #0
 8003260:	e05c      	b.n	800331c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f915 	bl	800449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003276:	f002 f909 	bl	800548c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800327a:	f000 fe87 	bl	8003f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800327e:	f002 f8d3 	bl	8005428 <vPortEnterCritical>
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003288:	b25b      	sxtb	r3, r3
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d103      	bne.n	8003298 <xQueueGenericSend+0x174>
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d103      	bne.n	80032ae <xQueueGenericSend+0x18a>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ae:	f002 f8ed 	bl	800548c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b2:	1d3a      	adds	r2, r7, #4
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 f904 	bl	80044c8 <xTaskCheckForTimeOut>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d124      	bne.n	8003310 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032c8:	f000 fc5c 	bl	8003b84 <prvIsQueueFull>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d4:	3310      	adds	r3, #16
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 f828 	bl	8004330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032e2:	f000 fbe7 	bl	8003ab4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032e6:	f000 fe5f 	bl	8003fa8 <xTaskResumeAll>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f af7c 	bne.w	80031ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80032f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <xQueueGenericSend+0x200>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	e772      	b.n	80031ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003306:	f000 fbd5 	bl	8003ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800330a:	f000 fe4d 	bl	8003fa8 <xTaskResumeAll>
 800330e:	e76c      	b.n	80031ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003312:	f000 fbcf 	bl	8003ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003316:	f000 fe47 	bl	8003fa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800331a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800331c:	4618      	mov	r0, r3
 800331e:	3738      	adds	r7, #56	@ 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	@ 0x38
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <xQueueGenericSendFromISR+0x3e>
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <xQueueGenericSendFromISR+0x42>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <xQueueGenericSendFromISR+0x44>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	623b      	str	r3, [r7, #32]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d103      	bne.n	8003396 <xQueueGenericSendFromISR+0x6e>
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <xQueueGenericSendFromISR+0x72>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <xQueueGenericSendFromISR+0x74>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61fb      	str	r3, [r7, #28]
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033b8:	f002 f916 	bl	80055e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033bc:	f3ef 8211 	mrs	r2, BASEPRI
 80033c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61ba      	str	r2, [r7, #24]
 80033d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <xQueueGenericSendFromISR+0xc2>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d12c      	bne.n	8003444 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033fa:	f000 facb 	bl	8003994 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d112      	bne.n	800342e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	d016      	beq.n	800343e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	3324      	adds	r3, #36	@ 0x24
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ffdd 	bl	80043d4 <xTaskRemoveFromEventList>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e007      	b.n	800343e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800342e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003432:	3301      	adds	r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	b25a      	sxtb	r2, r3
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800343e:	2301      	movs	r3, #1
 8003440:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003442:	e001      	b.n	8003448 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003444:	2300      	movs	r3, #0
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003452:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003456:	4618      	mov	r0, r3
 8003458:	3738      	adds	r7, #56	@ 0x38
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b08e      	sub	sp, #56	@ 0x38
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	623b      	str	r3, [r7, #32]
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	e7fd      	b.n	8003486 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	61fb      	str	r3, [r7, #28]
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80034aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <xQueueGiveFromISR+0x5c>
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <xQueueGiveFromISR+0x60>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xQueueGiveFromISR+0x62>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10b      	bne.n	80034dc <xQueueGiveFromISR+0x7e>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61bb      	str	r3, [r7, #24]
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034dc:	f002 f884 	bl	80055e8 <vPortValidateInterruptPriority>
	__asm volatile
 80034e0:	f3ef 8211 	mrs	r2, BASEPRI
 80034e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	617a      	str	r2, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80034f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003508:	429a      	cmp	r2, r3
 800350a:	d22b      	bcs.n	8003564 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800351e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d112      	bne.n	800354e <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d016      	beq.n	800355e <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	3324      	adds	r3, #36	@ 0x24
 8003534:	4618      	mov	r0, r3
 8003536:	f000 ff4d 	bl	80043d4 <xTaskRemoveFromEventList>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00b      	beq.n	800355e <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e007      	b.n	800355e <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800354e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003552:	3301      	adds	r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	b25a      	sxtb	r2, r3
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800355e:	2301      	movs	r3, #1
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
 8003562:	e001      	b.n	8003568 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f383 8811 	msr	BASEPRI, r3
}
 8003572:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003576:	4618      	mov	r0, r3
 8003578:	3738      	adds	r7, #56	@ 0x38
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	@ 0x30
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10b      	bne.n	80035b2 <xQueueReceive+0x32>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	623b      	str	r3, [r7, #32]
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	e7fd      	b.n	80035ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <xQueueReceive+0x40>
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <xQueueReceive+0x44>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <xQueueReceive+0x46>
 80035c4:	2300      	movs	r3, #0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <xQueueReceive+0x62>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61fb      	str	r3, [r7, #28]
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035e2:	f001 f897 	bl	8004714 <xTaskGetSchedulerState>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <xQueueReceive+0x72>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <xQueueReceive+0x76>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <xQueueReceive+0x78>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <xQueueReceive+0x94>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	61bb      	str	r3, [r7, #24]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003614:	f001 ff08 	bl	8005428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01f      	beq.n	8003664 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003628:	f000 fa1e 	bl	8003a68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	1e5a      	subs	r2, r3, #1
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363e:	3310      	adds	r3, #16
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fec7 	bl	80043d4 <xTaskRemoveFromEventList>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800364c:	4b3c      	ldr	r3, [pc, #240]	@ (8003740 <xQueueReceive+0x1c0>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800365c:	f001 ff16 	bl	800548c <vPortExitCritical>
				return pdPASS;
 8003660:	2301      	movs	r3, #1
 8003662:	e069      	b.n	8003738 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800366a:	f001 ff0f 	bl	800548c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800366e:	2300      	movs	r3, #0
 8003670:	e062      	b.n	8003738 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	4618      	mov	r0, r3
 800367e:	f000 ff0d 	bl	800449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003682:	2301      	movs	r3, #1
 8003684:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003686:	f001 ff01 	bl	800548c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800368a:	f000 fc7f 	bl	8003f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800368e:	f001 fecb 	bl	8005428 <vPortEnterCritical>
 8003692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003698:	b25b      	sxtb	r3, r3
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d103      	bne.n	80036a8 <xQueueReceive+0x128>
 80036a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d103      	bne.n	80036be <xQueueReceive+0x13e>
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036be:	f001 fee5 	bl	800548c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036c2:	1d3a      	adds	r2, r7, #4
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fefc 	bl	80044c8 <xTaskCheckForTimeOut>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d123      	bne.n	800371e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036d8:	f000 fa3e 	bl	8003b58 <prvIsQueueEmpty>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	3324      	adds	r3, #36	@ 0x24
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fe20 	bl	8004330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f2:	f000 f9df 	bl	8003ab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036f6:	f000 fc57 	bl	8003fa8 <xTaskResumeAll>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d189      	bne.n	8003614 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003700:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <xQueueReceive+0x1c0>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	e780      	b.n	8003614 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003714:	f000 f9ce 	bl	8003ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003718:	f000 fc46 	bl	8003fa8 <xTaskResumeAll>
 800371c:	e77a      	b.n	8003614 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800371e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003720:	f000 f9c8 	bl	8003ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003724:	f000 fc40 	bl	8003fa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800372a:	f000 fa15 	bl	8003b58 <prvIsQueueEmpty>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	f43f af6f 	beq.w	8003614 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003736:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003738:	4618      	mov	r0, r3
 800373a:	3730      	adds	r7, #48	@ 0x30
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08e      	sub	sp, #56	@ 0x38
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	623b      	str	r3, [r7, #32]
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	61fb      	str	r3, [r7, #28]
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003798:	f000 ffbc 	bl	8004714 <xTaskGetSchedulerState>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <xQueueSemaphoreTake+0x64>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <xQueueSemaphoreTake+0x68>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <xQueueSemaphoreTake+0x6a>
 80037ac:	2300      	movs	r3, #0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	61bb      	str	r3, [r7, #24]
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	e7fd      	b.n	80037c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ca:	f001 fe2d 	bl	8005428 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d024      	beq.n	8003824 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80037ea:	f001 f955 	bl	8004a98 <pvTaskIncrementMutexHeldCount>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00f      	beq.n	800381c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	3310      	adds	r3, #16
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fde7 	bl	80043d4 <xTaskRemoveFromEventList>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800380c:	4b54      	ldr	r3, [pc, #336]	@ (8003960 <xQueueSemaphoreTake+0x21c>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800381c:	f001 fe36 	bl	800548c <vPortExitCritical>
				return pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	e098      	b.n	8003956 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d112      	bne.n	8003850 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	617b      	str	r3, [r7, #20]
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003848:	f001 fe20 	bl	800548c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800384c:	2300      	movs	r3, #0
 800384e:	e082      	b.n	8003956 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fe1e 	bl	800449c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003864:	f001 fe12 	bl	800548c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003868:	f000 fb90 	bl	8003f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800386c:	f001 fddc 	bl	8005428 <vPortEnterCritical>
 8003870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003872:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003876:	b25b      	sxtb	r3, r3
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d103      	bne.n	8003886 <xQueueSemaphoreTake+0x142>
 800387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800388c:	b25b      	sxtb	r3, r3
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d103      	bne.n	800389c <xQueueSemaphoreTake+0x158>
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800389c:	f001 fdf6 	bl	800548c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038a0:	463a      	mov	r2, r7
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fe0d 	bl	80044c8 <xTaskCheckForTimeOut>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d132      	bne.n	800391a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038b6:	f000 f94f 	bl	8003b58 <prvIsQueueEmpty>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d026      	beq.n	800390e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80038c8:	f001 fdae 	bl	8005428 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ff3d 	bl	8004750 <xTaskPriorityInherit>
 80038d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80038d8:	f001 fdd8 	bl	800548c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038de:	3324      	adds	r3, #36	@ 0x24
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fd23 	bl	8004330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80038ec:	f000 f8e2 	bl	8003ab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038f0:	f000 fb5a 	bl	8003fa8 <xTaskResumeAll>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f47f af67 	bne.w	80037ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80038fc:	4b18      	ldr	r3, [pc, #96]	@ (8003960 <xQueueSemaphoreTake+0x21c>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	e75d      	b.n	80037ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800390e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003910:	f000 f8d0 	bl	8003ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003914:	f000 fb48 	bl	8003fa8 <xTaskResumeAll>
 8003918:	e757      	b.n	80037ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800391a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800391c:	f000 f8ca 	bl	8003ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003920:	f000 fb42 	bl	8003fa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003926:	f000 f917 	bl	8003b58 <prvIsQueueEmpty>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	f43f af4c 	beq.w	80037ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003938:	f001 fd76 	bl	8005428 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800393c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800393e:	f000 f811 	bl	8003964 <prvGetDisinheritPriorityAfterTimeout>
 8003942:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f808 	bl	8004960 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003950:	f001 fd9c 	bl	800548c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003956:	4618      	mov	r0, r3
 8003958:	3738      	adds	r7, #56	@ 0x38
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1c3 0305 	rsb	r3, r3, #5
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e001      	b.n	8003986 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003986:	68fb      	ldr	r3, [r7, #12]
	}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d14d      	bne.n	8003a56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 ff46 	bl	8004850 <xTaskPriorityDisinherit>
 80039c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	e043      	b.n	8003a56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d119      	bne.n	8003a08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6858      	ldr	r0, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	461a      	mov	r2, r3
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	f002 f850 	bl	8005a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	441a      	add	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d32b      	bcc.n	8003a56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	e026      	b.n	8003a56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68d8      	ldr	r0, [r3, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	461a      	mov	r2, r3
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	f002 f836 	bl	8005a84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	425b      	negs	r3, r3
 8003a22:	441a      	add	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d207      	bcs.n	8003a44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	425b      	negs	r3, r3
 8003a3e:	441a      	add	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d105      	bne.n	8003a56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a5e:	697b      	ldr	r3, [r7, #20]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d303      	bcc.n	8003a9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68d9      	ldr	r1, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6838      	ldr	r0, [r7, #0]
 8003aa8:	f001 ffec 	bl	8005a84 <memcpy>
	}
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003abc:	f001 fcb4 	bl	8005428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ac6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ac8:	e011      	b.n	8003aee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3324      	adds	r3, #36	@ 0x24
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fc7c 	bl	80043d4 <xTaskRemoveFromEventList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ae2:	f000 fd55 	bl	8004590 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dce9      	bgt.n	8003aca <prvUnlockQueue+0x16>
 8003af6:	e000      	b.n	8003afa <prvUnlockQueue+0x46>
					break;
 8003af8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	22ff      	movs	r2, #255	@ 0xff
 8003afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b02:	f001 fcc3 	bl	800548c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b06:	f001 fc8f 	bl	8005428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b12:	e011      	b.n	8003b38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3310      	adds	r3, #16
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fc57 	bl	80043d4 <xTaskRemoveFromEventList>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b2c:	f000 fd30 	bl	8004590 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	dce9      	bgt.n	8003b14 <prvUnlockQueue+0x60>
 8003b40:	e000      	b.n	8003b44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	22ff      	movs	r2, #255	@ 0xff
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b4c:	f001 fc9e 	bl	800548c <vPortExitCritical>
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b60:	f001 fc62 	bl	8005428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e001      	b.n	8003b76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f001 fc89 	bl	800548c <vPortExitCritical>

	return xReturn;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b8c:	f001 fc4c 	bl	8005428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d102      	bne.n	8003ba2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e001      	b.n	8003ba6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ba6:	f001 fc71 	bl	800548c <vPortExitCritical>

	return xReturn;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e014      	b.n	8003bee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c04 <vQueueAddToRegistry+0x50>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bd0:	490c      	ldr	r1, [pc, #48]	@ (8003c04 <vQueueAddToRegistry+0x50>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <vQueueAddToRegistry+0x50>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003be6:	e006      	b.n	8003bf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b07      	cmp	r3, #7
 8003bf2:	d9e7      	bls.n	8003bc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200000d8 	.word	0x200000d8

08003c08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c18:	f001 fc06 	bl	8005428 <vPortEnterCritical>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d103      	bne.n	8003c32 <vQueueWaitForMessageRestricted+0x2a>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d103      	bne.n	8003c48 <vQueueWaitForMessageRestricted+0x40>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c48:	f001 fc20 	bl	800548c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3324      	adds	r3, #36	@ 0x24
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fb8d 	bl	800437c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff26 	bl	8003ab4 <prvUnlockQueue>
	}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	@ 0x30
 8003c74:	af04      	add	r7, sp, #16
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fcf1 	bl	800566c <pvPortMalloc>
 8003c8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00e      	beq.n	8003cb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c92:	2058      	movs	r0, #88	@ 0x58
 8003c94:	f001 fcea 	bl	800566c <pvPortMalloc>
 8003c98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca6:	e005      	b.n	8003cb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f001 fda7 	bl	80057fc <vPortFree>
 8003cae:	e001      	b.n	8003cb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d013      	beq.n	8003ce2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9303      	str	r3, [sp, #12]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	9302      	str	r3, [sp, #8]
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f80e 	bl	8003cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cd6:	69f8      	ldr	r0, [r7, #28]
 8003cd8:	f000 f89c 	bl	8003e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e002      	b.n	8003ce8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b088      	sub	sp, #32
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	21a5      	movs	r1, #165	@ 0xa5
 8003d0c:	f001 fe8e 	bl	8005a2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f023 0307 	bic.w	r3, r3, #7
 8003d28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	617b      	str	r3, [r7, #20]
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01f      	beq.n	8003d92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e012      	b.n	8003d7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	7819      	ldrb	r1, [r3, #0]
 8003d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	3334      	adds	r3, #52	@ 0x34
 8003d68:	460a      	mov	r2, r1
 8003d6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d006      	beq.n	8003d86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	d9e9      	bls.n	8003d58 <prvInitialiseNewTask+0x66>
 8003d84:	e000      	b.n	8003d88 <prvInitialiseNewTask+0x96>
			{
				break;
 8003d86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d90:	e003      	b.n	8003d9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d901      	bls.n	8003da4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003da0:	2304      	movs	r3, #4
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dae:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	2200      	movs	r2, #0
 8003db4:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f854 	bl	8002e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff f84f 	bl	8002e68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	f1c3 0205 	rsb	r2, r3, #5
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	2200      	movs	r2, #0
 8003de4:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	68f9      	ldr	r1, [r7, #12]
 8003df2:	69b8      	ldr	r0, [r7, #24]
 8003df4:	f001 f9e8 	bl	80051c8 <pxPortInitialiseStack>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0a:	bf00      	nop
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e1c:	f001 fb04 	bl	8005428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e20:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed4 <prvAddNewTaskToReadyList+0xc0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed4 <prvAddNewTaskToReadyList+0xc0>)
 8003e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e32:	4a29      	ldr	r2, [pc, #164]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e38:	4b26      	ldr	r3, [pc, #152]	@ (8003ed4 <prvAddNewTaskToReadyList+0xc0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d110      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e40:	f000 fbca 	bl	80045d8 <prvInitialiseTaskLists>
 8003e44:	e00d      	b.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e46:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d802      	bhi.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a15      	ldr	r2, [pc, #84]	@ (8003ee8 <prvAddNewTaskToReadyList+0xd4>)
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7fe fff0 	bl	8002e82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ea2:	f001 faf3 	bl	800548c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00e      	beq.n	8003ecc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d207      	bcs.n	8003ecc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <prvAddNewTaskToReadyList+0xd8>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200001f0 	.word	0x200001f0
 8003ed8:	20000118 	.word	0x20000118
 8003edc:	200001fc 	.word	0x200001fc
 8003ee0:	2000020c 	.word	0x2000020c
 8003ee4:	200001f8 	.word	0x200001f8
 8003ee8:	2000011c 	.word	0x2000011c
 8003eec:	e000ed04 	.word	0xe000ed04

08003ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f74 <vTaskStartScheduler+0x84>)
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	2282      	movs	r2, #130	@ 0x82
 8003f02:	491d      	ldr	r1, [pc, #116]	@ (8003f78 <vTaskStartScheduler+0x88>)
 8003f04:	481d      	ldr	r0, [pc, #116]	@ (8003f7c <vTaskStartScheduler+0x8c>)
 8003f06:	f7ff feb3 	bl	8003c70 <xTaskCreate>
 8003f0a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003f12:	f000 fe3b 	bl	8004b8c <xTimerCreateTimerTask>
 8003f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d116      	bne.n	8003f4c <vTaskStartScheduler+0x5c>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
}
 8003f30:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f32:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <vTaskStartScheduler+0x90>)
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f3a:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <vTaskStartScheduler+0x94>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f40:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <vTaskStartScheduler+0x98>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f46:	f001 f9cb 	bl	80052e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f4a:	e00f      	b.n	8003f6c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d10b      	bne.n	8003f6c <vTaskStartScheduler+0x7c>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	607b      	str	r3, [r7, #4]
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <vTaskStartScheduler+0x78>
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000214 	.word	0x20000214
 8003f78:	08005ad4 	.word	0x08005ad4
 8003f7c:	080045a9 	.word	0x080045a9
 8003f80:	20000210 	.word	0x20000210
 8003f84:	200001fc 	.word	0x200001fc
 8003f88:	200001f4 	.word	0x200001f4

08003f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f90:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <vTaskSuspendAll+0x18>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a03      	ldr	r2, [pc, #12]	@ (8003fa4 <vTaskSuspendAll+0x18>)
 8003f98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000218 	.word	0x20000218

08003fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fb6:	4b42      	ldr	r3, [pc, #264]	@ (80040c0 <xTaskResumeAll+0x118>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	603b      	str	r3, [r7, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	e7fd      	b.n	8003fd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fd6:	f001 fa27 	bl	8005428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fda:	4b39      	ldr	r3, [pc, #228]	@ (80040c0 <xTaskResumeAll+0x118>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	4a37      	ldr	r2, [pc, #220]	@ (80040c0 <xTaskResumeAll+0x118>)
 8003fe2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe4:	4b36      	ldr	r3, [pc, #216]	@ (80040c0 <xTaskResumeAll+0x118>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d161      	bne.n	80040b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fec:	4b35      	ldr	r3, [pc, #212]	@ (80040c4 <xTaskResumeAll+0x11c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05d      	beq.n	80040b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ff4:	e02e      	b.n	8004054 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff6:	4b34      	ldr	r3, [pc, #208]	@ (80040c8 <xTaskResumeAll+0x120>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3318      	adds	r3, #24
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe ff9a 	bl	8002f3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3304      	adds	r3, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe ff95 	bl	8002f3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004016:	2201      	movs	r2, #1
 8004018:	409a      	lsls	r2, r3
 800401a:	4b2c      	ldr	r3, [pc, #176]	@ (80040cc <xTaskResumeAll+0x124>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4313      	orrs	r3, r2
 8004020:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <xTaskResumeAll+0x124>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a27      	ldr	r2, [pc, #156]	@ (80040d0 <xTaskResumeAll+0x128>)
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f7fe ff21 	bl	8002e82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	4b23      	ldr	r3, [pc, #140]	@ (80040d4 <xTaskResumeAll+0x12c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800404e:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <xTaskResumeAll+0x130>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004054:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <xTaskResumeAll+0x120>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1cc      	bne.n	8003ff6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004062:	f000 fb37 	bl	80046d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004066:	4b1d      	ldr	r3, [pc, #116]	@ (80040dc <xTaskResumeAll+0x134>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d010      	beq.n	8004094 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004072:	f000 f847 	bl	8004104 <xTaskIncrementTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800407c:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <xTaskResumeAll+0x130>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3b01      	subs	r3, #1
 8004086:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f1      	bne.n	8004072 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800408e:	4b13      	ldr	r3, [pc, #76]	@ (80040dc <xTaskResumeAll+0x134>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004094:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <xTaskResumeAll+0x130>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d009      	beq.n	80040b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040a0:	4b0f      	ldr	r3, [pc, #60]	@ (80040e0 <xTaskResumeAll+0x138>)
 80040a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040b0:	f001 f9ec 	bl	800548c <vPortExitCritical>

	return xAlreadyYielded;
 80040b4:	68bb      	ldr	r3, [r7, #8]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000218 	.word	0x20000218
 80040c4:	200001f0 	.word	0x200001f0
 80040c8:	200001b0 	.word	0x200001b0
 80040cc:	200001f8 	.word	0x200001f8
 80040d0:	2000011c 	.word	0x2000011c
 80040d4:	20000118 	.word	0x20000118
 80040d8:	20000204 	.word	0x20000204
 80040dc:	20000200 	.word	0x20000200
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040ea:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <xTaskGetTickCount+0x1c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	200001f4 	.word	0x200001f4

08004104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800410e:	4b4f      	ldr	r3, [pc, #316]	@ (800424c <xTaskIncrementTick+0x148>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 8089 	bne.w	800422a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004118:	4b4d      	ldr	r3, [pc, #308]	@ (8004250 <xTaskIncrementTick+0x14c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004120:	4a4b      	ldr	r2, [pc, #300]	@ (8004250 <xTaskIncrementTick+0x14c>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d121      	bne.n	8004170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800412c:	4b49      	ldr	r3, [pc, #292]	@ (8004254 <xTaskIncrementTick+0x150>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	603b      	str	r3, [r7, #0]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <xTaskIncrementTick+0x46>
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <xTaskIncrementTick+0x150>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	4b40      	ldr	r3, [pc, #256]	@ (8004258 <xTaskIncrementTick+0x154>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3e      	ldr	r2, [pc, #248]	@ (8004254 <xTaskIncrementTick+0x150>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4a3e      	ldr	r2, [pc, #248]	@ (8004258 <xTaskIncrementTick+0x154>)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b3e      	ldr	r3, [pc, #248]	@ (800425c <xTaskIncrementTick+0x158>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	4a3c      	ldr	r2, [pc, #240]	@ (800425c <xTaskIncrementTick+0x158>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	f000 fab2 	bl	80046d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004170:	4b3b      	ldr	r3, [pc, #236]	@ (8004260 <xTaskIncrementTick+0x15c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	429a      	cmp	r2, r3
 8004178:	d348      	bcc.n	800420c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800417a:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <xTaskIncrementTick+0x150>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004184:	4b36      	ldr	r3, [pc, #216]	@ (8004260 <xTaskIncrementTick+0x15c>)
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	601a      	str	r2, [r3, #0]
					break;
 800418c:	e03e      	b.n	800420c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418e:	4b31      	ldr	r3, [pc, #196]	@ (8004254 <xTaskIncrementTick+0x150>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d203      	bcs.n	80041ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004260 <xTaskIncrementTick+0x15c>)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041ac:	e02e      	b.n	800420c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fec2 	bl	8002f3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3318      	adds	r3, #24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe feb9 	bl	8002f3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	2201      	movs	r2, #1
 80041d0:	409a      	lsls	r2, r3
 80041d2:	4b24      	ldr	r3, [pc, #144]	@ (8004264 <xTaskIncrementTick+0x160>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	4a22      	ldr	r2, [pc, #136]	@ (8004264 <xTaskIncrementTick+0x160>)
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <xTaskIncrementTick+0x164>)
 80041ea:	441a      	add	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f7fe fe45 	bl	8002e82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <xTaskIncrementTick+0x168>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	429a      	cmp	r2, r3
 8004204:	d3b9      	bcc.n	800417a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004206:	2301      	movs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420a:	e7b6      	b.n	800417a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800420c:	4b17      	ldr	r3, [pc, #92]	@ (800426c <xTaskIncrementTick+0x168>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	4915      	ldr	r1, [pc, #84]	@ (8004268 <xTaskIncrementTick+0x164>)
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d907      	bls.n	8004234 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e004      	b.n	8004234 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800422a:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <xTaskIncrementTick+0x16c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <xTaskIncrementTick+0x16c>)
 8004232:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004234:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <xTaskIncrementTick+0x170>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004240:	697b      	ldr	r3, [r7, #20]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000218 	.word	0x20000218
 8004250:	200001f4 	.word	0x200001f4
 8004254:	200001a8 	.word	0x200001a8
 8004258:	200001ac 	.word	0x200001ac
 800425c:	20000208 	.word	0x20000208
 8004260:	20000210 	.word	0x20000210
 8004264:	200001f8 	.word	0x200001f8
 8004268:	2000011c 	.word	0x2000011c
 800426c:	20000118 	.word	0x20000118
 8004270:	20000200 	.word	0x20000200
 8004274:	20000204 	.word	0x20000204

08004278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800427e:	4b27      	ldr	r3, [pc, #156]	@ (800431c <vTaskSwitchContext+0xa4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004286:	4b26      	ldr	r3, [pc, #152]	@ (8004320 <vTaskSwitchContext+0xa8>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800428c:	e040      	b.n	8004310 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800428e:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <vTaskSwitchContext+0xa8>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004294:	4b23      	ldr	r3, [pc, #140]	@ (8004324 <vTaskSwitchContext+0xac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042a2:	7afb      	ldrb	r3, [r7, #11]
 80042a4:	f1c3 031f 	rsb	r3, r3, #31
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	491f      	ldr	r1, [pc, #124]	@ (8004328 <vTaskSwitchContext+0xb0>)
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	607b      	str	r3, [r7, #4]
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	e7fd      	b.n	80042d2 <vTaskSwitchContext+0x5a>
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <vTaskSwitchContext+0xb0>)
 80042e2:	4413      	add	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3308      	adds	r3, #8
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d104      	bne.n	8004306 <vTaskSwitchContext+0x8e>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a07      	ldr	r2, [pc, #28]	@ (800432c <vTaskSwitchContext+0xb4>)
 800430e:	6013      	str	r3, [r2, #0]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20000218 	.word	0x20000218
 8004320:	20000204 	.word	0x20000204
 8004324:	200001f8 	.word	0x200001f8
 8004328:	2000011c 	.word	0x2000011c
 800432c:	20000118 	.word	0x20000118

08004330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004358:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <vTaskPlaceOnEventList+0x48>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3318      	adds	r3, #24
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fe fdb2 	bl	8002eca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004366:	2101      	movs	r1, #1
 8004368:	6838      	ldr	r0, [r7, #0]
 800436a:	f000 fba9 	bl	8004ac0 <prvAddCurrentTaskToDelayedList>
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000118 	.word	0x20000118

0800437c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	617b      	str	r3, [r7, #20]
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	e7fd      	b.n	80043a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a6:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3318      	adds	r3, #24
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7fe fd67 	bl	8002e82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f000 fb7c 	bl	8004ac0 <prvAddCurrentTaskToDelayedList>
	}
 80043c8:	bf00      	nop
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000118 	.word	0x20000118

080043d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3318      	adds	r3, #24
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fd98 	bl	8002f3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440c:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <xTaskRemoveFromEventList+0xb0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11c      	bne.n	800444e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fd8f 	bl	8002f3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	2201      	movs	r2, #1
 8004424:	409a      	lsls	r2, r3
 8004426:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <xTaskRemoveFromEventList+0xb4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	4a16      	ldr	r2, [pc, #88]	@ (8004488 <xTaskRemoveFromEventList+0xb4>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <xTaskRemoveFromEventList+0xb8>)
 800443e:	441a      	add	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe fd1b 	bl	8002e82 <vListInsertEnd>
 800444c:	e005      	b.n	800445a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3318      	adds	r3, #24
 8004452:	4619      	mov	r1, r3
 8004454:	480e      	ldr	r0, [pc, #56]	@ (8004490 <xTaskRemoveFromEventList+0xbc>)
 8004456:	f7fe fd14 	bl	8002e82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <xTaskRemoveFromEventList+0xc0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	429a      	cmp	r2, r3
 8004466:	d905      	bls.n	8004474 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800446c:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <xTaskRemoveFromEventList+0xc4>)
 800446e:	2201      	movs	r2, #1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e001      	b.n	8004478 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000218 	.word	0x20000218
 8004488:	200001f8 	.word	0x200001f8
 800448c:	2000011c 	.word	0x2000011c
 8004490:	200001b0 	.word	0x200001b0
 8004494:	20000118 	.word	0x20000118
 8004498:	20000204 	.word	0x20000204

0800449c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <vTaskInternalSetTimeOutState+0x24>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <vTaskInternalSetTimeOutState+0x28>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000208 	.word	0x20000208
 80044c4:	200001f4 	.word	0x200001f4

080044c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10b      	bne.n	80044f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	613b      	str	r3, [r7, #16]
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	60fb      	str	r3, [r7, #12]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800450e:	f000 ff8b 	bl	8005428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004512:	4b1d      	ldr	r3, [pc, #116]	@ (8004588 <xTaskCheckForTimeOut+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d102      	bne.n	8004532 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	e023      	b.n	800457a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4b15      	ldr	r3, [pc, #84]	@ (800458c <xTaskCheckForTimeOut+0xc4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d007      	beq.n	800454e <xTaskCheckForTimeOut+0x86>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	e015      	b.n	800457a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	d20b      	bcs.n	8004570 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff99 	bl	800449c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e004      	b.n	800457a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800457a:	f000 ff87 	bl	800548c <vPortExitCritical>

	return xReturn;
 800457e:	69fb      	ldr	r3, [r7, #28]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200001f4 	.word	0x200001f4
 800458c:	20000208 	.word	0x20000208

08004590 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004594:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <vTaskMissedYield+0x14>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000204 	.word	0x20000204

080045a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045b0:	f000 f852 	bl	8004658 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <prvIdleTask+0x28>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d9f9      	bls.n	80045b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <prvIdleTask+0x2c>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045cc:	e7f0      	b.n	80045b0 <prvIdleTask+0x8>
 80045ce:	bf00      	nop
 80045d0:	2000011c 	.word	0x2000011c
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	e00c      	b.n	80045fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4a12      	ldr	r2, [pc, #72]	@ (8004638 <prvInitialiseTaskLists+0x60>)
 80045f0:	4413      	add	r3, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fc18 	bl	8002e28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3301      	adds	r3, #1
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d9ef      	bls.n	80045e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004604:	480d      	ldr	r0, [pc, #52]	@ (800463c <prvInitialiseTaskLists+0x64>)
 8004606:	f7fe fc0f 	bl	8002e28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800460a:	480d      	ldr	r0, [pc, #52]	@ (8004640 <prvInitialiseTaskLists+0x68>)
 800460c:	f7fe fc0c 	bl	8002e28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004610:	480c      	ldr	r0, [pc, #48]	@ (8004644 <prvInitialiseTaskLists+0x6c>)
 8004612:	f7fe fc09 	bl	8002e28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004616:	480c      	ldr	r0, [pc, #48]	@ (8004648 <prvInitialiseTaskLists+0x70>)
 8004618:	f7fe fc06 	bl	8002e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800461c:	480b      	ldr	r0, [pc, #44]	@ (800464c <prvInitialiseTaskLists+0x74>)
 800461e:	f7fe fc03 	bl	8002e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <prvInitialiseTaskLists+0x78>)
 8004624:	4a05      	ldr	r2, [pc, #20]	@ (800463c <prvInitialiseTaskLists+0x64>)
 8004626:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004628:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <prvInitialiseTaskLists+0x7c>)
 800462a:	4a05      	ldr	r2, [pc, #20]	@ (8004640 <prvInitialiseTaskLists+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	2000011c 	.word	0x2000011c
 800463c:	20000180 	.word	0x20000180
 8004640:	20000194 	.word	0x20000194
 8004644:	200001b0 	.word	0x200001b0
 8004648:	200001c4 	.word	0x200001c4
 800464c:	200001dc 	.word	0x200001dc
 8004650:	200001a8 	.word	0x200001a8
 8004654:	200001ac 	.word	0x200001ac

08004658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800465e:	e019      	b.n	8004694 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004660:	f000 fee2 	bl	8005428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004664:	4b10      	ldr	r3, [pc, #64]	@ (80046a8 <prvCheckTasksWaitingTermination+0x50>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe fc63 	bl	8002f3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <prvCheckTasksWaitingTermination+0x54>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a0b      	ldr	r2, [pc, #44]	@ (80046ac <prvCheckTasksWaitingTermination+0x54>)
 800467e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <prvCheckTasksWaitingTermination+0x58>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3b01      	subs	r3, #1
 8004686:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <prvCheckTasksWaitingTermination+0x58>)
 8004688:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800468a:	f000 feff 	bl	800548c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f810 	bl	80046b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <prvCheckTasksWaitingTermination+0x58>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e1      	bne.n	8004660 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	200001c4 	.word	0x200001c4
 80046ac:	200001f0 	.word	0x200001f0
 80046b0:	200001d8 	.word	0x200001d8

080046b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 f89b 	bl	80057fc <vPortFree>
			vPortFree( pxTCB );
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 f898 	bl	80057fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046da:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <prvResetNextTaskUnblockTime+0x38>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <prvResetNextTaskUnblockTime+0x3c>)
 80046e6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046ec:	e008      	b.n	8004700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ee:	4b07      	ldr	r3, [pc, #28]	@ (800470c <prvResetNextTaskUnblockTime+0x38>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a04      	ldr	r2, [pc, #16]	@ (8004710 <prvResetNextTaskUnblockTime+0x3c>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	200001a8 	.word	0x200001a8
 8004710:	20000210 	.word	0x20000210

08004714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <xTaskGetSchedulerState+0x34>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004722:	2301      	movs	r3, #1
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e008      	b.n	800473a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004728:	4b08      	ldr	r3, [pc, #32]	@ (800474c <xTaskGetSchedulerState+0x38>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004730:	2302      	movs	r3, #2
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e001      	b.n	800473a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004736:	2300      	movs	r3, #0
 8004738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800473a:	687b      	ldr	r3, [r7, #4]
	}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	200001fc 	.word	0x200001fc
 800474c:	20000218 	.word	0x20000218

08004750 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d069      	beq.n	800483a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <xTaskPriorityInherit+0xf4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	429a      	cmp	r2, r3
 8004772:	d259      	bcs.n	8004828 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	db06      	blt.n	800478a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477c:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <xTaskPriorityInherit+0xf4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	f1c3 0205 	rsb	r2, r3, #5
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6959      	ldr	r1, [r3, #20]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a2b      	ldr	r2, [pc, #172]	@ (8004848 <xTaskPriorityInherit+0xf8>)
 800479c:	4413      	add	r3, r2
 800479e:	4299      	cmp	r1, r3
 80047a0:	d13a      	bne.n	8004818 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fbc8 	bl	8002f3c <uxListRemove>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d115      	bne.n	80047de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	4924      	ldr	r1, [pc, #144]	@ (8004848 <xTaskPriorityInherit+0xf8>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <xTaskPriorityInherit+0x8e>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	2201      	movs	r2, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <xTaskPriorityInherit+0xfc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4013      	ands	r3, r2
 80047da:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <xTaskPriorityInherit+0xfc>)
 80047dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047de:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <xTaskPriorityInherit+0xf4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	2201      	movs	r2, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	4b16      	ldr	r3, [pc, #88]	@ (800484c <xTaskPriorityInherit+0xfc>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	4a15      	ldr	r2, [pc, #84]	@ (800484c <xTaskPriorityInherit+0xfc>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4a10      	ldr	r2, [pc, #64]	@ (8004848 <xTaskPriorityInherit+0xf8>)
 8004808:	441a      	add	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f7fe fb36 	bl	8002e82 <vListInsertEnd>
 8004816:	e004      	b.n	8004822 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <xTaskPriorityInherit+0xf4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e008      	b.n	800483a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800482c:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <xTaskPriorityInherit+0xf4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	429a      	cmp	r2, r3
 8004834:	d201      	bcs.n	800483a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004836:	2301      	movs	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800483a:	68fb      	ldr	r3, [r7, #12]
	}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000118 	.word	0x20000118
 8004848:	2000011c 	.word	0x2000011c
 800484c:	200001f8 	.word	0x200001f8

08004850 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d070      	beq.n	8004948 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <xTaskPriorityDisinherit+0x104>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	429a      	cmp	r2, r3
 800486e:	d00b      	beq.n	8004888 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60bb      	str	r3, [r7, #8]
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	e7fd      	b.n	80048a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ac:	1e5a      	subs	r2, r3, #1
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d044      	beq.n	8004948 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d140      	bne.n	8004948 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fb36 	bl	8002f3c <uxListRemove>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	491f      	ldr	r1, [pc, #124]	@ (8004958 <xTaskPriorityDisinherit+0x108>)
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTaskPriorityDisinherit+0xb2>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43da      	mvns	r2, r3
 80048f8:	4b18      	ldr	r3, [pc, #96]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4013      	ands	r3, r2
 80048fe:	4a17      	ldr	r2, [pc, #92]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 8004900:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	f1c3 0205 	rsb	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	2201      	movs	r2, #1
 800491c:	409a      	lsls	r2, r3
 800491e:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <xTaskPriorityDisinherit+0x10c>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a08      	ldr	r2, [pc, #32]	@ (8004958 <xTaskPriorityDisinherit+0x108>)
 8004936:	441a      	add	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fa9f 	bl	8002e82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004948:	697b      	ldr	r3, [r7, #20]
	}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000118 	.word	0x20000118
 8004958:	2000011c 	.word	0x2000011c
 800495c:	200001f8 	.word	0x200001f8

08004960 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800496e:	2301      	movs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8085 	beq.w	8004a84 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60fb      	str	r3, [r7, #12]
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d902      	bls.n	80049aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e002      	b.n	80049b0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d064      	beq.n	8004a84 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d15f      	bne.n	8004a84 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049c4:	4b31      	ldr	r3, [pc, #196]	@ (8004a8c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d10b      	bne.n	80049e6 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60bb      	str	r3, [r7, #8]
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	e7fd      	b.n	80049e2 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	db04      	blt.n	8004a04 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f1c3 0205 	rsb	r2, r3, #5
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6959      	ldr	r1, [r3, #20]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a14:	4413      	add	r3, r2
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d134      	bne.n	8004a84 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fa8c 	bl	8002f3c <uxListRemove>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d115      	bne.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2e:	4918      	ldr	r1, [pc, #96]	@ (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	2201      	movs	r2, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4013      	ands	r3, r2
 8004a52:	4a10      	ldr	r2, [pc, #64]	@ (8004a94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004a54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	4a0b      	ldr	r2, [pc, #44]	@ (8004a94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4a06      	ldr	r2, [pc, #24]	@ (8004a90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a76:	441a      	add	r2, r3
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fe f9ff 	bl	8002e82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a84:	bf00      	nop
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000118 	.word	0x20000118
 8004a90:	2000011c 	.word	0x2000011c
 8004a94:	200001f8 	.word	0x200001f8

08004a98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a9c:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <pvTaskIncrementMutexHeldCount+0x24>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <pvTaskIncrementMutexHeldCount+0x24>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004aaa:	3201      	adds	r2, #1
 8004aac:	64da      	str	r2, [r3, #76]	@ 0x4c
		}

		return pxCurrentTCB;
 8004aae:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <pvTaskIncrementMutexHeldCount+0x24>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
	}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000118 	.word	0x20000118

08004ac0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aca:	4b29      	ldr	r3, [pc, #164]	@ (8004b70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ad0:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fa30 	bl	8002f3c <uxListRemove>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ae2:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	2201      	movs	r2, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43da      	mvns	r2, r3
 8004af0:	4b21      	ldr	r3, [pc, #132]	@ (8004b78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4013      	ands	r3, r2
 8004af6:	4a20      	ldr	r2, [pc, #128]	@ (8004b78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004af8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d10a      	bne.n	8004b18 <prvAddCurrentTaskToDelayedList+0x58>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b08:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	481a      	ldr	r0, [pc, #104]	@ (8004b7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b12:	f7fe f9b6 	bl	8002e82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b16:	e026      	b.n	8004b66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b20:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d209      	bcs.n	8004b44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b30:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fe f9c4 	bl	8002eca <vListInsert>
}
 8004b42:	e010      	b.n	8004b66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b44:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f7fe f9ba 	bl	8002eca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d202      	bcs.n	8004b66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b60:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6013      	str	r3, [r2, #0]
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200001f4 	.word	0x200001f4
 8004b74:	20000118 	.word	0x20000118
 8004b78:	200001f8 	.word	0x200001f8
 8004b7c:	200001dc 	.word	0x200001dc
 8004b80:	200001ac 	.word	0x200001ac
 8004b84:	200001a8 	.word	0x200001a8
 8004b88:	20000210 	.word	0x20000210

08004b8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b96:	f000 fae1 	bl	800515c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <xTimerCreateTimerTask+0x58>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004ba2:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <xTimerCreateTimerTask+0x5c>)
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004bb0:	490e      	ldr	r1, [pc, #56]	@ (8004bec <xTimerCreateTimerTask+0x60>)
 8004bb2:	480f      	ldr	r0, [pc, #60]	@ (8004bf0 <xTimerCreateTimerTask+0x64>)
 8004bb4:	f7ff f85c 	bl	8003c70 <xTaskCreate>
 8004bb8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	603b      	str	r3, [r7, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004bd8:	687b      	ldr	r3, [r7, #4]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2000024c 	.word	0x2000024c
 8004be8:	20000250 	.word	0x20000250
 8004bec:	08005adc 	.word	0x08005adc
 8004bf0:	08004d2d 	.word	0x08004d2d

08004bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	@ 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <xTimerGenericCommand+0x30>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	623b      	str	r3, [r7, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02a      	beq.n	8004c82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b05      	cmp	r3, #5
 8004c3c:	dc18      	bgt.n	8004c70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c3e:	f7ff fd69 	bl	8004714 <xTaskGetSchedulerState>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d109      	bne.n	8004c5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c48:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	f107 0114 	add.w	r1, r7, #20
 8004c50:	2300      	movs	r3, #0
 8004c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c54:	f7fe fa66 	bl	8003124 <xQueueGenericSend>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c5a:	e012      	b.n	8004c82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	f107 0114 	add.w	r1, r7, #20
 8004c64:	2300      	movs	r3, #0
 8004c66:	2200      	movs	r2, #0
 8004c68:	f7fe fa5c 	bl	8003124 <xQueueGenericSend>
 8004c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c6e:	e008      	b.n	8004c82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <xTimerGenericCommand+0x98>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	f107 0114 	add.w	r1, r7, #20
 8004c78:	2300      	movs	r3, #0
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	f7fe fb54 	bl	8003328 <xQueueGenericSendFromISR>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3728      	adds	r7, #40	@ 0x28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	2000024c 	.word	0x2000024c

08004c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <prvProcessExpiredTimer+0x98>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f947 	bl	8002f3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	699a      	ldr	r2, [r3, #24]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	18d1      	adds	r1, r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	6978      	ldr	r0, [r7, #20]
 8004cca:	f000 f8d5 	bl	8004e78 <prvInsertTimerInActiveList>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	6978      	ldr	r0, [r7, #20]
 8004ce0:	f7ff ff88 	bl	8004bf4 <xTimerGenericCommand>
 8004ce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d114      	bne.n	8004d16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	4798      	blx	r3
}
 8004d1e:	bf00      	nop
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000244 	.word	0x20000244

08004d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d34:	f107 0308 	add.w	r3, r7, #8
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f859 	bl	8004df0 <prvGetNextExpireTime>
 8004d3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4619      	mov	r1, r3
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f805 	bl	8004d54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d4a:	f000 f8d7 	bl	8004efc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d4e:	bf00      	nop
 8004d50:	e7f0      	b.n	8004d34 <prvTimerTask+0x8>
	...

08004d54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d5e:	f7ff f915 	bl	8003f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d62:	f107 0308 	add.w	r3, r7, #8
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f866 	bl	8004e38 <prvSampleTimeNow>
 8004d6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d130      	bne.n	8004dd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <prvProcessTimerOrBlockTask+0x3c>
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d806      	bhi.n	8004d90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d82:	f7ff f911 	bl	8003fa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ff81 	bl	8004c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d8e:	e024      	b.n	8004dda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d96:	4b13      	ldr	r3, [pc, #76]	@ (8004de4 <prvProcessTimerOrBlockTask+0x90>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <prvProcessTimerOrBlockTask+0x50>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <prvProcessTimerOrBlockTask+0x52>
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004da8:	4b0f      	ldr	r3, [pc, #60]	@ (8004de8 <prvProcessTimerOrBlockTask+0x94>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	4619      	mov	r1, r3
 8004db6:	f7fe ff27 	bl	8003c08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dba:	f7ff f8f5 	bl	8003fa8 <xTaskResumeAll>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <prvProcessTimerOrBlockTask+0x98>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	f3bf 8f6f 	isb	sy
}
 8004dd4:	e001      	b.n	8004dda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dd6:	f7ff f8e7 	bl	8003fa8 <xTaskResumeAll>
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000248 	.word	0x20000248
 8004de8:	2000024c 	.word	0x2000024c
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004df8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e34 <prvGetNextExpireTime+0x44>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <prvGetNextExpireTime+0x16>
 8004e02:	2201      	movs	r2, #1
 8004e04:	e000      	b.n	8004e08 <prvGetNextExpireTime+0x18>
 8004e06:	2200      	movs	r2, #0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <prvGetNextExpireTime+0x44>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e001      	b.n	8004e24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000244 	.word	0x20000244

08004e38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e40:	f7ff f950 	bl	80040e4 <xTaskGetTickCount>
 8004e44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e46:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <prvSampleTimeNow+0x3c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d205      	bcs.n	8004e5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e50:	f000 f91e 	bl	8005090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e002      	b.n	8004e62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e62:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <prvSampleTimeNow+0x3c>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e68:	68fb      	ldr	r3, [r7, #12]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000254 	.word	0x20000254

08004e78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d812      	bhi.n	8004ec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad2      	subs	r2, r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e01b      	b.n	8004eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <prvInsertTimerInActiveList+0x7c>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7fe f804 	bl	8002eca <vListInsert>
 8004ec2:	e012      	b.n	8004eea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d206      	bcs.n	8004eda <prvInsertTimerInActiveList+0x62>
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d302      	bcc.n	8004eda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e007      	b.n	8004eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eda:	4b07      	ldr	r3, [pc, #28]	@ (8004ef8 <prvInsertTimerInActiveList+0x80>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7fd fff0 	bl	8002eca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004eea:	697b      	ldr	r3, [r7, #20]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000248 	.word	0x20000248
 8004ef8:	20000244 	.word	0x20000244

08004efc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	@ 0x30
 8004f00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f02:	e0b2      	b.n	800506a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f2c0 80af 	blt.w	800506a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d004      	beq.n	8004f22 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe f80d 	bl	8002f3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff87 	bl	8004e38 <prvSampleTimeNow>
 8004f2a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	f200 8098 	bhi.w	8005064 <prvProcessReceivedCommands+0x168>
 8004f34:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <prvProcessReceivedCommands+0x40>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f65 	.word	0x08004f65
 8004f48:	08004fdb 	.word	0x08004fdb
 8004f4c:	08004fef 	.word	0x08004fef
 8004f50:	0800503b 	.word	0x0800503b
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f65 	.word	0x08004f65
 8004f5c:	08004fdb 	.word	0x08004fdb
 8004f60:	08004fef 	.word	0x08004fef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	18d1      	adds	r1, r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f84:	f7ff ff78 	bl	8004e78 <prvInsertTimerInActiveList>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d06c      	beq.n	8005068 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d061      	beq.n	8005068 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	441a      	add	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fb6:	f7ff fe1d 	bl	8004bf4 <xTimerGenericCommand>
 8004fba:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d152      	bne.n	8005068 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	61bb      	str	r3, [r7, #24]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fec:	e03d      	b.n	800506a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	617b      	str	r3, [r7, #20]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	18d1      	adds	r1, r2, r3
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005034:	f7ff ff20 	bl	8004e78 <prvInsertTimerInActiveList>
					break;
 8005038:	e017      	b.n	800506a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005048:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800504a:	f000 fbd7 	bl	80057fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800504e:	e00c      	b.n	800506a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	b2da      	uxtb	r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005062:	e002      	b.n	800506a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005064:	bf00      	nop
 8005066:	e000      	b.n	800506a <prvProcessReceivedCommands+0x16e>
					break;
 8005068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800506a:	4b08      	ldr	r3, [pc, #32]	@ (800508c <prvProcessReceivedCommands+0x190>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f107 0108 	add.w	r1, r7, #8
 8005072:	2200      	movs	r2, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fa83 	bl	8003580 <xQueueReceive>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f47f af41 	bne.w	8004f04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	3728      	adds	r7, #40	@ 0x28
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	2000024c 	.word	0x2000024c

08005090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005096:	e049      	b.n	800512c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005098:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <prvSwitchTimerLists+0xc4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005154 <prvSwitchTimerLists+0xc4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fd ff43 	bl	8002f3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02f      	beq.n	800512c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d90e      	bls.n	80050fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005154 <prvSwitchTimerLists+0xc4>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f7fd fee8 	bl	8002eca <vListInsert>
 80050fa:	e017      	b.n	800512c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050fc:	2300      	movs	r3, #0
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2300      	movs	r3, #0
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	2100      	movs	r1, #0
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fd74 	bl	8004bf4 <xTimerGenericCommand>
 800510c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	603b      	str	r3, [r7, #0]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800512c:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <prvSwitchTimerLists+0xc4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1b0      	bne.n	8005098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005136:	4b07      	ldr	r3, [pc, #28]	@ (8005154 <prvSwitchTimerLists+0xc4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <prvSwitchTimerLists+0xc8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a04      	ldr	r2, [pc, #16]	@ (8005154 <prvSwitchTimerLists+0xc4>)
 8005142:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005144:	4a04      	ldr	r2, [pc, #16]	@ (8005158 <prvSwitchTimerLists+0xc8>)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000244 	.word	0x20000244
 8005158:	20000248 	.word	0x20000248

0800515c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005160:	f000 f962 	bl	8005428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005164:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <prvCheckForValidListAndQueue+0x54>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11d      	bne.n	80051a8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800516c:	4811      	ldr	r0, [pc, #68]	@ (80051b4 <prvCheckForValidListAndQueue+0x58>)
 800516e:	f7fd fe5b 	bl	8002e28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005172:	4811      	ldr	r0, [pc, #68]	@ (80051b8 <prvCheckForValidListAndQueue+0x5c>)
 8005174:	f7fd fe58 	bl	8002e28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005178:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <prvCheckForValidListAndQueue+0x60>)
 800517a:	4a0e      	ldr	r2, [pc, #56]	@ (80051b4 <prvCheckForValidListAndQueue+0x58>)
 800517c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <prvCheckForValidListAndQueue+0x64>)
 8005180:	4a0d      	ldr	r2, [pc, #52]	@ (80051b8 <prvCheckForValidListAndQueue+0x5c>)
 8005182:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005184:	2200      	movs	r2, #0
 8005186:	210c      	movs	r1, #12
 8005188:	200a      	movs	r0, #10
 800518a:	f7fd ff6b 	bl	8003064 <xQueueGenericCreate>
 800518e:	4603      	mov	r3, r0
 8005190:	4a07      	ldr	r2, [pc, #28]	@ (80051b0 <prvCheckForValidListAndQueue+0x54>)
 8005192:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <prvCheckForValidListAndQueue+0x54>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800519c:	4b04      	ldr	r3, [pc, #16]	@ (80051b0 <prvCheckForValidListAndQueue+0x54>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4908      	ldr	r1, [pc, #32]	@ (80051c4 <prvCheckForValidListAndQueue+0x68>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fd06 	bl	8003bb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051a8:	f000 f970 	bl	800548c <vPortExitCritical>
}
 80051ac:	bf00      	nop
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2000024c 	.word	0x2000024c
 80051b4:	2000021c 	.word	0x2000021c
 80051b8:	20000230 	.word	0x20000230
 80051bc:	20000244 	.word	0x20000244
 80051c0:	20000248 	.word	0x20000248
 80051c4:	08005ae4 	.word	0x08005ae4

080051c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3b04      	subs	r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3b04      	subs	r3, #4
 80051e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0201 	bic.w	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3b04      	subs	r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051f8:	4a0c      	ldr	r2, [pc, #48]	@ (800522c <pxPortInitialiseStack+0x64>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3b14      	subs	r3, #20
 8005202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f06f 0202 	mvn.w	r2, #2
 8005216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b20      	subs	r3, #32
 800521c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800521e:	68fb      	ldr	r3, [r7, #12]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	08005231 	.word	0x08005231

08005230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800523a:	4b13      	ldr	r3, [pc, #76]	@ (8005288 <prvTaskExitError+0x58>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d00b      	beq.n	800525c <prvTaskExitError+0x2c>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <prvTaskExitError+0x28>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60bb      	str	r3, [r7, #8]
}
 800526e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005270:	bf00      	nop
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0fc      	beq.n	8005272 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	2000000c 	.word	0x2000000c
 800528c:	00000000 	.word	0x00000000

08005290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005290:	4b07      	ldr	r3, [pc, #28]	@ (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	4770      	bx	lr
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst2>:
 80052b0:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052b8:	4808      	ldr	r0, [pc, #32]	@ (80052dc <prvPortStartFirstTask+0x24>)
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f380 8808 	msr	MSP, r0
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8814 	msr	CONTROL, r0
 80052ca:	b662      	cpsie	i
 80052cc:	b661      	cpsie	f
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	df00      	svc	0
 80052d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052da:	bf00      	nop
 80052dc:	e000ed08 	.word	0xe000ed08

080052e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052e6:	4b47      	ldr	r3, [pc, #284]	@ (8005404 <xPortStartScheduler+0x124>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a47      	ldr	r2, [pc, #284]	@ (8005408 <xPortStartScheduler+0x128>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10b      	bne.n	8005308 <xPortStartScheduler+0x28>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	613b      	str	r3, [r7, #16]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005308:	4b3e      	ldr	r3, [pc, #248]	@ (8005404 <xPortStartScheduler+0x124>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3f      	ldr	r2, [pc, #252]	@ (800540c <xPortStartScheduler+0x12c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10b      	bne.n	800532a <xPortStartScheduler+0x4a>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60fb      	str	r3, [r7, #12]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800532a:	4b39      	ldr	r3, [pc, #228]	@ (8005410 <xPortStartScheduler+0x130>)
 800532c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	22ff      	movs	r2, #255	@ 0xff
 800533a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <xPortStartScheduler+0x134>)
 8005350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005352:	4b31      	ldr	r3, [pc, #196]	@ (8005418 <xPortStartScheduler+0x138>)
 8005354:	2207      	movs	r2, #7
 8005356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005358:	e009      	b.n	800536e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800535a:	4b2f      	ldr	r3, [pc, #188]	@ (8005418 <xPortStartScheduler+0x138>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3b01      	subs	r3, #1
 8005360:	4a2d      	ldr	r2, [pc, #180]	@ (8005418 <xPortStartScheduler+0x138>)
 8005362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	b2db      	uxtb	r3, r3
 800536c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005376:	2b80      	cmp	r3, #128	@ 0x80
 8005378:	d0ef      	beq.n	800535a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800537a:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <xPortStartScheduler+0x138>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1c3 0307 	rsb	r3, r3, #7
 8005382:	2b04      	cmp	r3, #4
 8005384:	d00b      	beq.n	800539e <xPortStartScheduler+0xbe>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	60bb      	str	r3, [r7, #8]
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	e7fd      	b.n	800539a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800539e:	4b1e      	ldr	r3, [pc, #120]	@ (8005418 <xPortStartScheduler+0x138>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005418 <xPortStartScheduler+0x138>)
 80053a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <xPortStartScheduler+0x138>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <xPortStartScheduler+0x138>)
 80053b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053bc:	4b17      	ldr	r3, [pc, #92]	@ (800541c <xPortStartScheduler+0x13c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a16      	ldr	r2, [pc, #88]	@ (800541c <xPortStartScheduler+0x13c>)
 80053c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053c8:	4b14      	ldr	r3, [pc, #80]	@ (800541c <xPortStartScheduler+0x13c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a13      	ldr	r2, [pc, #76]	@ (800541c <xPortStartScheduler+0x13c>)
 80053ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053d4:	f000 f8da 	bl	800558c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053d8:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <xPortStartScheduler+0x140>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053de:	f000 f8f9 	bl	80055d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <xPortStartScheduler+0x144>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005424 <xPortStartScheduler+0x144>)
 80053e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053ee:	f7ff ff63 	bl	80052b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053f2:	f7fe ff41 	bl	8004278 <vTaskSwitchContext>
	prvTaskExitError();
 80053f6:	f7ff ff1b 	bl	8005230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	e000ed00 	.word	0xe000ed00
 8005408:	410fc271 	.word	0x410fc271
 800540c:	410fc270 	.word	0x410fc270
 8005410:	e000e400 	.word	0xe000e400
 8005414:	20000258 	.word	0x20000258
 8005418:	2000025c 	.word	0x2000025c
 800541c:	e000ed20 	.word	0xe000ed20
 8005420:	2000000c 	.word	0x2000000c
 8005424:	e000ef34 	.word	0xe000ef34

08005428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	607b      	str	r3, [r7, #4]
}
 8005440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005442:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <vPortEnterCritical+0x5c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a0e      	ldr	r2, [pc, #56]	@ (8005484 <vPortEnterCritical+0x5c>)
 800544a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800544c:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <vPortEnterCritical+0x5c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d110      	bne.n	8005476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005454:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <vPortEnterCritical+0x60>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <vPortEnterCritical+0x4e>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	603b      	str	r3, [r7, #0]
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	e7fd      	b.n	8005472 <vPortEnterCritical+0x4a>
	}
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	2000000c 	.word	0x2000000c
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005492:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <vPortExitCritical+0x50>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <vPortExitCritical+0x26>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	607b      	str	r3, [r7, #4]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054b2:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <vPortExitCritical+0x50>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	4a08      	ldr	r2, [pc, #32]	@ (80054dc <vPortExitCritical+0x50>)
 80054ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <vPortExitCritical+0x50>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <vPortExitCritical+0x44>
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	2000000c 	.word	0x2000000c

080054e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054e0:	f3ef 8009 	mrs	r0, PSP
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <pxCurrentTCBConst>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	f01e 0f10 	tst.w	lr, #16
 80054f0:	bf08      	it	eq
 80054f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fa:	6010      	str	r0, [r2, #0]
 80054fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005504:	f380 8811 	msr	BASEPRI, r0
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f7fe feb2 	bl	8004278 <vTaskSwitchContext>
 8005514:	f04f 0000 	mov.w	r0, #0
 8005518:	f380 8811 	msr	BASEPRI, r0
 800551c:	bc09      	pop	{r0, r3}
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	6808      	ldr	r0, [r1, #0]
 8005522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005526:	f01e 0f10 	tst.w	lr, #16
 800552a:	bf08      	it	eq
 800552c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005530:	f380 8809 	msr	PSP, r0
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	f3af 8000 	nop.w

08005540 <pxCurrentTCBConst>:
 8005540:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop

08005548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005562:	f7fe fdcf 	bl	8004104 <xTaskIncrementTick>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800556c:	4b06      	ldr	r3, [pc, #24]	@ (8005588 <SysTick_Handler+0x40>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f383 8811 	msr	BASEPRI, r3
}
 800557e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <vPortSetupTimerInterrupt+0x34>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005596:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <vPortSetupTimerInterrupt+0x38>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800559c:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <vPortSetupTimerInterrupt+0x3c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <vPortSetupTimerInterrupt+0x40>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <vPortSetupTimerInterrupt+0x44>)
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ae:	4b04      	ldr	r3, [pc, #16]	@ (80055c0 <vPortSetupTimerInterrupt+0x34>)
 80055b0:	2207      	movs	r2, #7
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	e000e010 	.word	0xe000e010
 80055c4:	e000e018 	.word	0xe000e018
 80055c8:	20000000 	.word	0x20000000
 80055cc:	10624dd3 	.word	0x10624dd3
 80055d0:	e000e014 	.word	0xe000e014

080055d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055e4 <vPortEnableVFP+0x10>
 80055d8:	6801      	ldr	r1, [r0, #0]
 80055da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055de:	6001      	str	r1, [r0, #0]
 80055e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055e2:	bf00      	nop
 80055e4:	e000ed88 	.word	0xe000ed88

080055e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055ee:	f3ef 8305 	mrs	r3, IPSR
 80055f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	d915      	bls.n	8005626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055fa:	4a18      	ldr	r2, [pc, #96]	@ (800565c <vPortValidateInterruptPriority+0x74>)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005604:	4b16      	ldr	r3, [pc, #88]	@ (8005660 <vPortValidateInterruptPriority+0x78>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	7afa      	ldrb	r2, [r7, #11]
 800560a:	429a      	cmp	r2, r3
 800560c:	d20b      	bcs.n	8005626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005626:	4b0f      	ldr	r3, [pc, #60]	@ (8005664 <vPortValidateInterruptPriority+0x7c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800562e:	4b0e      	ldr	r3, [pc, #56]	@ (8005668 <vPortValidateInterruptPriority+0x80>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d90b      	bls.n	800564e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	603b      	str	r3, [r7, #0]
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	e7fd      	b.n	800564a <vPortValidateInterruptPriority+0x62>
	}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	e000e3f0 	.word	0xe000e3f0
 8005660:	20000258 	.word	0x20000258
 8005664:	e000ed0c 	.word	0xe000ed0c
 8005668:	2000025c 	.word	0x2000025c

0800566c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	@ 0x28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005678:	f7fe fc88 	bl	8003f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800567c:	4b5a      	ldr	r3, [pc, #360]	@ (80057e8 <pvPortMalloc+0x17c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005684:	f000 f916 	bl	80058b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005688:	4b58      	ldr	r3, [pc, #352]	@ (80057ec <pvPortMalloc+0x180>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 8090 	bne.w	80057b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01e      	beq.n	80056da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800569c:	2208      	movs	r2, #8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d015      	beq.n	80056da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f023 0307 	bic.w	r3, r3, #7
 80056b4:	3308      	adds	r3, #8
 80056b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <pvPortMalloc+0x6e>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	617b      	str	r3, [r7, #20]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d06a      	beq.n	80057b6 <pvPortMalloc+0x14a>
 80056e0:	4b43      	ldr	r3, [pc, #268]	@ (80057f0 <pvPortMalloc+0x184>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d865      	bhi.n	80057b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056ea:	4b42      	ldr	r3, [pc, #264]	@ (80057f4 <pvPortMalloc+0x188>)
 80056ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056ee:	4b41      	ldr	r3, [pc, #260]	@ (80057f4 <pvPortMalloc+0x188>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056f4:	e004      	b.n	8005700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d903      	bls.n	8005712 <pvPortMalloc+0xa6>
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f1      	bne.n	80056f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005712:	4b35      	ldr	r3, [pc, #212]	@ (80057e8 <pvPortMalloc+0x17c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005718:	429a      	cmp	r2, r3
 800571a:	d04c      	beq.n	80057b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2208      	movs	r2, #8
 8005722:	4413      	add	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	1ad2      	subs	r2, r2, r3
 8005736:	2308      	movs	r3, #8
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	429a      	cmp	r2, r3
 800573c:	d920      	bls.n	8005780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800573e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4413      	add	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <pvPortMalloc+0xfc>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	613b      	str	r3, [r7, #16]
}
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	e7fd      	b.n	8005764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800577a:	69b8      	ldr	r0, [r7, #24]
 800577c:	f000 f8fc 	bl	8005978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <pvPortMalloc+0x184>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	4a19      	ldr	r2, [pc, #100]	@ (80057f0 <pvPortMalloc+0x184>)
 800578c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800578e:	4b18      	ldr	r3, [pc, #96]	@ (80057f0 <pvPortMalloc+0x184>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b19      	ldr	r3, [pc, #100]	@ (80057f8 <pvPortMalloc+0x18c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d203      	bcs.n	80057a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800579a:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <pvPortMalloc+0x184>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a16      	ldr	r2, [pc, #88]	@ (80057f8 <pvPortMalloc+0x18c>)
 80057a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <pvPortMalloc+0x180>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057b6:	f7fe fbf7 	bl	8003fa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <pvPortMalloc+0x170>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	60fb      	str	r3, [r7, #12]
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <pvPortMalloc+0x16c>
	return pvReturn;
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3728      	adds	r7, #40	@ 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20012e68 	.word	0x20012e68
 80057ec:	20012e74 	.word	0x20012e74
 80057f0:	20012e6c 	.word	0x20012e6c
 80057f4:	20012e60 	.word	0x20012e60
 80057f8:	20012e70 	.word	0x20012e70

080057fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04a      	beq.n	80058a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800580e:	2308      	movs	r3, #8
 8005810:	425b      	negs	r3, r3
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4413      	add	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	4b22      	ldr	r3, [pc, #136]	@ (80058ac <vPortFree+0xb0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <vPortFree+0x46>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	60fb      	str	r3, [r7, #12]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <vPortFree+0x66>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	60bb      	str	r3, [r7, #8]
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	e7fd      	b.n	800585e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4b11      	ldr	r3, [pc, #68]	@ (80058ac <vPortFree+0xb0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d019      	beq.n	80058a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d115      	bne.n	80058a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <vPortFree+0xb0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	43db      	mvns	r3, r3
 8005882:	401a      	ands	r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005888:	f7fe fb80 	bl	8003f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <vPortFree+0xb4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4413      	add	r3, r2
 8005896:	4a06      	ldr	r2, [pc, #24]	@ (80058b0 <vPortFree+0xb4>)
 8005898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800589a:	6938      	ldr	r0, [r7, #16]
 800589c:	f000 f86c 	bl	8005978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058a0:	f7fe fb82 	bl	8003fa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058a4:	bf00      	nop
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	20012e74 	.word	0x20012e74
 80058b0:	20012e6c 	.word	0x20012e6c

080058b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80058be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058c0:	4b27      	ldr	r3, [pc, #156]	@ (8005960 <prvHeapInit+0xac>)
 80058c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3307      	adds	r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005960 <prvHeapInit+0xac>)
 80058e4:	4413      	add	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <prvHeapInit+0xb0>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005964 <prvHeapInit+0xb0>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4413      	add	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005900:	2208      	movs	r2, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a15      	ldr	r2, [pc, #84]	@ (8005968 <prvHeapInit+0xb4>)
 8005914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005916:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <prvHeapInit+0xb4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800591e:	4b12      	ldr	r3, [pc, #72]	@ (8005968 <prvHeapInit+0xb4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005934:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <prvHeapInit+0xb4>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <prvHeapInit+0xb8>)
 8005942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a09      	ldr	r2, [pc, #36]	@ (8005970 <prvHeapInit+0xbc>)
 800594a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800594c:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <prvHeapInit+0xc0>)
 800594e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005952:	601a      	str	r2, [r3, #0]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000260 	.word	0x20000260
 8005964:	20012e60 	.word	0x20012e60
 8005968:	20012e68 	.word	0x20012e68
 800596c:	20012e70 	.word	0x20012e70
 8005970:	20012e6c 	.word	0x20012e6c
 8005974:	20012e74 	.word	0x20012e74

08005978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005980:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <prvInsertBlockIntoFreeList+0xac>)
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e002      	b.n	800598c <prvInsertBlockIntoFreeList+0x14>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d8f7      	bhi.n	8005986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4413      	add	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d108      	bne.n	80059ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	441a      	add	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	441a      	add	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d118      	bne.n	8005a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b15      	ldr	r3, [pc, #84]	@ (8005a28 <prvInsertBlockIntoFreeList+0xb0>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d00d      	beq.n	80059f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e008      	b.n	8005a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005a28 <prvInsertBlockIntoFreeList+0xb0>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e003      	b.n	8005a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d002      	beq.n	8005a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20012e60 	.word	0x20012e60
 8005a28:	20012e68 	.word	0x20012e68

08005a2c <memset>:
 8005a2c:	4402      	add	r2, r0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a80 <__libc_init_array+0x44>)
 8005a50:	f000 f826 	bl	8005aa0 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08005b0c 	.word	0x08005b0c
 8005a78:	08005b0c 	.word	0x08005b0c
 8005a7c:	08005b0c 	.word	0x08005b0c
 8005a80:	08005b10 	.word	0x08005b10

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
