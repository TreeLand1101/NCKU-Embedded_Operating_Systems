
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00012e5c  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e6c  20012e6c  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114a6  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2a  00000000  00000000  000174e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00019f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd3  00000000  00000000  0001af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002227c  00000000  00000000  0001bc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001303d  00000000  00000000  0003decf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f81  00000000  00000000  00050f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122e8d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044e0  00000000  00000000  00122ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001273b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ec0 	.word	0x08004ec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004ec0 	.word	0x08004ec0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc2b 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82f 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8c1 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f895 	bl	8000600 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xQueue = xQueueCreate(1, sizeof(int));
 80004d6:	2200      	movs	r2, #0
 80004d8:	2104      	movs	r1, #4
 80004da:	2001      	movs	r0, #1
 80004dc:	f002 fa84 	bl	80029e8 <xQueueGenericCreate>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <main+0x58>)
 80004e4:	6013      	str	r3, [r2, #0]

  xTaskCreate(vLEDHandler, "LED", 128, NULL, 1, NULL);
 80004e6:	2300      	movs	r3, #0
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	490a      	ldr	r1, [pc, #40]	@ (800051c <main+0x5c>)
 80004f4:	480a      	ldr	r0, [pc, #40]	@ (8000520 <main+0x60>)
 80004f6:	f002 fec5 	bl	8003284 <xTaskCreate>
  xTaskCreate(vButtonHandler, "BUTTON", 128, NULL, 1, NULL);
 80004fa:	2300      	movs	r3, #0
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2280      	movs	r2, #128	@ 0x80
 8000506:	4907      	ldr	r1, [pc, #28]	@ (8000524 <main+0x64>)
 8000508:	4807      	ldr	r0, [pc, #28]	@ (8000528 <main+0x68>)
 800050a:	f002 febb 	bl	8003284 <xTaskCreate>
  vTaskStartScheduler();
 800050e:	f003 f82f 	bl	8003570 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	bf00      	nop
 8000514:	e7fd      	b.n	8000512 <main+0x52>
 8000516:	bf00      	nop
 8000518:	20000070 	.word	0x20000070
 800051c:	08004ed8 	.word	0x08004ed8
 8000520:	0800097d 	.word	0x0800097d
 8000524:	08004edc 	.word	0x08004edc
 8000528:	08000911 	.word	0x08000911

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fc86 	bl	8004e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	@ (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	@ (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005a0:	2332      	movs	r3, #50	@ 0x32
 80005a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fec1 	bl	8001338 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 fa5c 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f922 	bl	8001828 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 fa45 	bl	8000a78 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_USART2_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000638:	f001 fdf6 	bl	8002228 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f000 fa19 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000002c 	.word	0x2000002c
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	@ 0x30
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	4ba2      	ldr	r3, [pc, #648]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4aa1      	ldr	r2, [pc, #644]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b9f      	ldr	r3, [pc, #636]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	4b9b      	ldr	r3, [pc, #620]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a9a      	ldr	r2, [pc, #616]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b98      	ldr	r3, [pc, #608]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b94      	ldr	r3, [pc, #592]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a93      	ldr	r2, [pc, #588]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b91      	ldr	r3, [pc, #580]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b8d      	ldr	r3, [pc, #564]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a8c      	ldr	r2, [pc, #560]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b8a      	ldr	r3, [pc, #552]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b86      	ldr	r3, [pc, #536]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a85      	ldr	r2, [pc, #532]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b83      	ldr	r3, [pc, #524]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b7f      	ldr	r3, [pc, #508]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a7e      	ldr	r2, [pc, #504]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b7c      	ldr	r3, [pc, #496]	@ (80008f8 <MX_GPIO_Init+0x2a4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2108      	movs	r1, #8
 8000716:	4879      	ldr	r0, [pc, #484]	@ (80008fc <MX_GPIO_Init+0x2a8>)
 8000718:	f000 fdda 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	4877      	ldr	r0, [pc, #476]	@ (8000900 <MX_GPIO_Init+0x2ac>)
 8000722:	f000 fdd5 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000726:	2200      	movs	r2, #0
 8000728:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800072c:	4875      	ldr	r0, [pc, #468]	@ (8000904 <MX_GPIO_Init+0x2b0>)
 800072e:	f000 fdcf 	bl	80012d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000732:	2308      	movs	r3, #8
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	486c      	ldr	r0, [pc, #432]	@ (80008fc <MX_GPIO_Init+0x2a8>)
 800074a:	f000 fc0d 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800074e:	2301      	movs	r3, #1
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4866      	ldr	r0, [pc, #408]	@ (8000900 <MX_GPIO_Init+0x2ac>)
 8000766:	f000 fbff 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800076a:	2308      	movs	r3, #8
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800077a:	2305      	movs	r3, #5
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	485e      	ldr	r0, [pc, #376]	@ (8000900 <MX_GPIO_Init+0x2ac>)
 8000786:	f000 fbef 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 800078a:	2301      	movs	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	485a      	ldr	r0, [pc, #360]	@ (8000908 <MX_GPIO_Init+0x2b4>)
 80007a0:	f000 fbe2 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007a4:	2310      	movs	r3, #16
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007b4:	2306      	movs	r3, #6
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4852      	ldr	r0, [pc, #328]	@ (8000908 <MX_GPIO_Init+0x2b4>)
 80007c0:	f000 fbd2 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007c4:	23e0      	movs	r3, #224	@ 0xe0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007d4:	2305      	movs	r3, #5
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	484a      	ldr	r0, [pc, #296]	@ (8000908 <MX_GPIO_Init+0x2b4>)
 80007e0:	f000 fbc2 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4845      	ldr	r0, [pc, #276]	@ (800090c <MX_GPIO_Init+0x2b8>)
 80007f8:	f000 fbb6 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483c      	ldr	r0, [pc, #240]	@ (800090c <MX_GPIO_Init+0x2b8>)
 800081a:	f000 fba5 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 800081e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000822:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4833      	ldr	r0, [pc, #204]	@ (8000904 <MX_GPIO_Init+0x2b0>)
 8000838:	f000 fb96 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800083c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800084e:	2306      	movs	r3, #6
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4829      	ldr	r0, [pc, #164]	@ (8000900 <MX_GPIO_Init+0x2ac>)
 800085a:	f000 fb85 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800085e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <MX_GPIO_Init+0x2b4>)
 8000874:	f000 fb78 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000878:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800088a:	230a      	movs	r3, #10
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	481c      	ldr	r0, [pc, #112]	@ (8000908 <MX_GPIO_Init+0x2b4>)
 8000896:	f000 fb67 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800089a:	2320      	movs	r3, #32
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4815      	ldr	r0, [pc, #84]	@ (8000904 <MX_GPIO_Init+0x2b0>)
 80008ae:	f000 fb5b 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008b2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b8:	2312      	movs	r3, #18
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c4:	2304      	movs	r3, #4
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480f      	ldr	r0, [pc, #60]	@ (800090c <MX_GPIO_Init+0x2b8>)
 80008d0:	f000 fb4a 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_GPIO_Init+0x2a8>)
 80008ea:	f000 fb3d 	bl	8000f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	@ 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400

08000910 <vButtonHandler>:

/* USER CODE BEGIN 4 */

void vButtonHandler(void *pvParameters) {
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    static uint16_t buttonState = 0;
    static unsigned int LEDstate = 0;

    while (1) {
    	buttonState = (buttonState << 1) | HAL_GPIO_ReadPin(Blue_Button_GPIO_Port, GPIO_PIN_0) | 0xFE00;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <vButtonHandler+0x5c>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	b21c      	sxth	r4, r3
 8000920:	2101      	movs	r1, #1
 8000922:	4813      	ldr	r0, [pc, #76]	@ (8000970 <vButtonHandler+0x60>)
 8000924:	f000 fcbc 	bl	80012a0 <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	b21b      	sxth	r3, r3
 800092c:	4323      	orrs	r3, r4
 800092e:	b21b      	sxth	r3, r3
 8000930:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 8000934:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 8000938:	b21b      	sxth	r3, r3
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <vButtonHandler+0x5c>)
 800093e:	801a      	strh	r2, [r3, #0]

        if (buttonState == 0xFF00) {
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <vButtonHandler+0x5c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000948:	d10c      	bne.n	8000964 <vButtonHandler+0x54>
        	LEDstate ^= 1;
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <vButtonHandler+0x64>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f083 0301 	eor.w	r3, r3, #1
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <vButtonHandler+0x64>)
 8000954:	6013      	str	r3, [r2, #0]
        	xQueueSend(xQueue, (int *) &LEDstate, 1);
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <vButtonHandler+0x68>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	2201      	movs	r2, #1
 800095e:	4905      	ldr	r1, [pc, #20]	@ (8000974 <vButtonHandler+0x64>)
 8000960:	f002 f8a2 	bl	8002aa8 <xQueueGenericSend>
        }

        vTaskDelay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f002 fdcd 	bl	8003504 <vTaskDelay>
    	buttonState = (buttonState << 1) | HAL_GPIO_ReadPin(Blue_Button_GPIO_Port, GPIO_PIN_0) | 0xFE00;
 800096a:	e7d5      	b.n	8000918 <vButtonHandler+0x8>
 800096c:	20000074 	.word	0x20000074
 8000970:	40020000 	.word	0x40020000
 8000974:	20000078 	.word	0x20000078
 8000978:	20000070 	.word	0x20000070

0800097c <vLEDHandler>:
    }
}

void vLEDHandler(void *pvParameters){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	static unsigned int receivedMsg = 0;
	while (1) {
		xQueueReceive(xQueue, &receivedMsg, 1);
 8000984:	4b30      	ldr	r3, [pc, #192]	@ (8000a48 <vLEDHandler+0xcc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2201      	movs	r2, #1
 800098a:	4930      	ldr	r1, [pc, #192]	@ (8000a4c <vLEDHandler+0xd0>)
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fa29 	bl	8002de4 <xQueueReceive>
		if (receivedMsg == 0) {
 8000992:	4b2e      	ldr	r3, [pc, #184]	@ (8000a4c <vLEDHandler+0xd0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d12e      	bne.n	80009f8 <vLEDHandler+0x7c>
			STATE0:
 800099a:	bf00      	nop
 800099c:	e000      	b.n	80009a0 <vLEDHandler+0x24>
				xQueueReceive(xQueue, &receivedMsg, 1000);
				HAL_GPIO_TogglePin(Orange_LED_GPIO_Port, GPIO_PIN_13);
				xQueueReceive(xQueue, &receivedMsg, 1000);

				if (receivedMsg == 0) {
					goto STATE0;
 800099e:	bf00      	nop
				HAL_GPIO_TogglePin(Green_LED_GPIO_Port, GPIO_PIN_12);
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	482a      	ldr	r0, [pc, #168]	@ (8000a50 <vLEDHandler+0xd4>)
 80009a6:	f000 fcac 	bl	8001302 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &receivedMsg, 2000);
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <vLEDHandler+0xcc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009b2:	4926      	ldr	r1, [pc, #152]	@ (8000a4c <vLEDHandler+0xd0>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fa15 	bl	8002de4 <xQueueReceive>
				HAL_GPIO_TogglePin(Green_LED_GPIO_Port, GPIO_PIN_12);
 80009ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009be:	4824      	ldr	r0, [pc, #144]	@ (8000a50 <vLEDHandler+0xd4>)
 80009c0:	f000 fc9f 	bl	8001302 <HAL_GPIO_TogglePin>
				if (receivedMsg == 1) {
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <vLEDHandler+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d01a      	beq.n	8000a02 <vLEDHandler+0x86>
				HAL_GPIO_TogglePin(Red_LED_GPIO_Port, GPIO_PIN_14);
 80009cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d0:	481f      	ldr	r0, [pc, #124]	@ (8000a50 <vLEDHandler+0xd4>)
 80009d2:	f000 fc96 	bl	8001302 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &receivedMsg, 2000);
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <vLEDHandler+0xcc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009de:	491b      	ldr	r1, [pc, #108]	@ (8000a4c <vLEDHandler+0xd0>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f9ff 	bl	8002de4 <xQueueReceive>
				HAL_GPIO_TogglePin(Red_LED_GPIO_Port, GPIO_PIN_14);
 80009e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ea:	4819      	ldr	r0, [pc, #100]	@ (8000a50 <vLEDHandler+0xd4>)
 80009ec:	f000 fc89 	bl	8001302 <HAL_GPIO_TogglePin>
				if (receivedMsg == 1) {
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <vLEDHandler+0xd0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d006      	beq.n	8000a06 <vLEDHandler+0x8a>
		if (receivedMsg == 1) {
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <vLEDHandler+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d1c1      	bne.n	8000984 <vLEDHandler+0x8>
			STATE1:
 8000a00:	e002      	b.n	8000a08 <vLEDHandler+0x8c>
					goto STATE1;
 8000a02:	bf00      	nop
 8000a04:	e000      	b.n	8000a08 <vLEDHandler+0x8c>
					goto STATE1;
 8000a06:	bf00      	nop
				HAL_GPIO_TogglePin(Orange_LED_GPIO_Port, GPIO_PIN_13);
 8000a08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0c:	4810      	ldr	r0, [pc, #64]	@ (8000a50 <vLEDHandler+0xd4>)
 8000a0e:	f000 fc78 	bl	8001302 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &receivedMsg, 1000);
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <vLEDHandler+0xcc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a1a:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <vLEDHandler+0xd0>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 f9e1 	bl	8002de4 <xQueueReceive>
				HAL_GPIO_TogglePin(Orange_LED_GPIO_Port, GPIO_PIN_13);
 8000a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a26:	480a      	ldr	r0, [pc, #40]	@ (8000a50 <vLEDHandler+0xd4>)
 8000a28:	f000 fc6b 	bl	8001302 <HAL_GPIO_TogglePin>
				xQueueReceive(xQueue, &receivedMsg, 1000);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <vLEDHandler+0xcc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a34:	4905      	ldr	r1, [pc, #20]	@ (8000a4c <vLEDHandler+0xd0>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f9d4 	bl	8002de4 <xQueueReceive>
				if (receivedMsg == 0) {
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <vLEDHandler+0xd0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0ac      	beq.n	800099e <vLEDHandler+0x22>
		xQueueReceive(xQueue, &receivedMsg, 1);
 8000a44:	e79e      	b.n	8000984 <vLEDHandler+0x8>
 8000a46:	bf00      	nop
 8000a48:	20000070 	.word	0x20000070
 8000a4c:	2000007c 	.word	0x2000007c
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a66:	f000 f97d 	bl	8000d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40001400 	.word	0x40001400

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	@ 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_UART_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12b      	bne.n	8000b4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_UART_MspInit+0x8c>)
 8000b4a:	f000 fa0d 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <HAL_InitTick+0xe4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	4a32      	ldr	r2, [pc, #200]	@ (8000c48 <HAL_InitTick+0xe4>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b84:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <HAL_InitTick+0xe4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	f003 0320 	and.w	r3, r3, #32
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b90:	f107 0210 	add.w	r2, r7, #16
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f864 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000baa:	f001 f835 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8000bae:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bb0:	e004      	b.n	8000bbc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bb2:	f001 f831 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbe:	4a23      	ldr	r2, [pc, #140]	@ (8000c4c <HAL_InitTick+0xe8>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <HAL_InitTick+0xf0>)
 8000bce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bdc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_InitTick+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <HAL_InitTick+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000bf0:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <HAL_InitTick+0xec>)
 8000bf2:	f001 f86b 	bl	8001ccc <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d11b      	bne.n	8000c3c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c04:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <HAL_InitTick+0xec>)
 8000c06:	f001 f8bb 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d111      	bne.n	8000c3c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c18:	2037      	movs	r0, #55	@ 0x37
 8000c1a:	f000 f997 	bl	8000f4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d808      	bhi.n	8000c36 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	2037      	movs	r0, #55	@ 0x37
 8000c2a:	f000 f973 	bl	8000f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_InitTick+0xf4>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e002      	b.n	8000c3c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3738      	adds	r7, #56	@ 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	20000080 	.word	0x20000080
 8000c54:	40001400 	.word	0x40001400
 8000c58:	20000004 	.word	0x20000004

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <NMI_Handler+0x4>

08000c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <MemManage_Handler+0x4>

08000c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <TIM7_IRQHandler+0x10>)
 8000c9a:	f001 f8e1 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000080 	.word	0x20000080

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd2:	490e      	ldr	r1, [pc, #56]	@ (8000d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce8:	4c0b      	ldr	r4, [pc, #44]	@ (8000d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf6:	f7ff ffd7 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f004 f8af 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fbdf 	bl	80004c0 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d10:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 8000d14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d18:	20012e6c 	.word	0x20012e6c

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f8d8 	bl	8000efe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff ff08 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fe96 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200000c8 	.word	0x200000c8

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200000c8 	.word	0x200000c8

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4907      	ldr	r1, [pc, #28]	@ (8000e40 <__NVIC_EnableIRQ+0x38>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	@ 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff4c 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f26:	f7ff ff61 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f7ff ffb1 	bl	8000e98 <NVIC_EncodePriority>
 8000f36:	4602      	mov	r2, r0
 8000f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff80 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff54 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e16b      	b.n	800125c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 815a 	bne.w	8001256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d005      	beq.n	8000fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d130      	bne.n	800101c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d017      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80b4 	beq.w	8001256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b60      	ldr	r3, [pc, #384]	@ (8001274 <HAL_GPIO_Init+0x30c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001274 <HAL_GPIO_Init+0x30c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <HAL_GPIO_Init+0x30c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a5b      	ldr	r2, [pc, #364]	@ (8001278 <HAL_GPIO_Init+0x310>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	@ (800127c <HAL_GPIO_Init+0x314>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a51      	ldr	r2, [pc, #324]	@ (8001280 <HAL_GPIO_Init+0x318>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a50      	ldr	r2, [pc, #320]	@ (8001284 <HAL_GPIO_Init+0x31c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4f      	ldr	r2, [pc, #316]	@ (8001288 <HAL_GPIO_Init+0x320>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x21a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4e      	ldr	r2, [pc, #312]	@ (800128c <HAL_GPIO_Init+0x324>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x216>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4d      	ldr	r2, [pc, #308]	@ (8001290 <HAL_GPIO_Init+0x328>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x212>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4c      	ldr	r2, [pc, #304]	@ (8001294 <HAL_GPIO_Init+0x32c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x20e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4b      	ldr	r2, [pc, #300]	@ (8001298 <HAL_GPIO_Init+0x330>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x20a>
 800116e:	2307      	movs	r3, #7
 8001170:	e00e      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001172:	2308      	movs	r3, #8
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001176:	2306      	movs	r3, #6
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x228>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x228>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	@ (8001278 <HAL_GPIO_Init+0x310>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b3b      	ldr	r3, [pc, #236]	@ (800129c <HAL_GPIO_Init+0x334>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a32      	ldr	r2, [pc, #200]	@ (800129c <HAL_GPIO_Init+0x334>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <HAL_GPIO_Init+0x334>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a27      	ldr	r2, [pc, #156]	@ (800129c <HAL_GPIO_Init+0x334>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <HAL_GPIO_Init+0x334>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1d      	ldr	r2, [pc, #116]	@ (800129c <HAL_GPIO_Init+0x334>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_GPIO_Init+0x334>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a12      	ldr	r2, [pc, #72]	@ (800129c <HAL_GPIO_Init+0x334>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae90 	bls.w	8000f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40021c00 	.word	0x40021c00
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e001      	b.n	80012c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001314:	887a      	ldrh	r2, [r7, #2]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	041a      	lsls	r2, r3, #16
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43d9      	mvns	r1, r3
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	400b      	ands	r3, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e267      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d075      	beq.n	8001442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001356:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d00c      	beq.n	800137c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b85      	ldr	r3, [pc, #532]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136a:	2b08      	cmp	r3, #8
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136e:	4b82      	ldr	r3, [pc, #520]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4b7e      	ldr	r3, [pc, #504]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d05b      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d157      	bne.n	8001440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e242      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x74>
 800139e:	4b76      	ldr	r3, [pc, #472]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a75      	ldr	r2, [pc, #468]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e01d      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b70      	ldr	r3, [pc, #448]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6c      	ldr	r2, [pc, #432]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0xb0>
 80013d0:	4b69      	ldr	r3, [pc, #420]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a68      	ldr	r2, [pc, #416]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b66      	ldr	r3, [pc, #408]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a65      	ldr	r2, [pc, #404]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fccc 	bl	8000d8c <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcc8 	bl	8000d8c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e207      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b5b      	ldr	r3, [pc, #364]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xc0>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcb8 	bl	8000d8c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fcb4 	bl	8000d8c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1f3      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0xe8>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b47      	ldr	r3, [pc, #284]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001466:	4b44      	ldr	r3, [pc, #272]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b41      	ldr	r3, [pc, #260]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1c7      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4937      	ldr	r1, [pc, #220]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e03a      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_RCC_OscConfig+0x244>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fc6d 	bl	8000d8c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc69 	bl	8000d8c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1a8      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4925      	ldr	r1, [pc, #148]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <HAL_RCC_OscConfig+0x244>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc4c 	bl	8000d8c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc48 	bl	8000d8c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e187      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d036      	beq.n	8001590 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d016      	beq.n	8001558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_RCC_OscConfig+0x248>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fc2c 	bl	8000d8c <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fc28 	bl	8000d8c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e167      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_RCC_OscConfig+0x240>)
 800154c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x200>
 8001556:	e01b      	b.n	8001590 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_RCC_OscConfig+0x248>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fc15 	bl	8000d8c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	e00e      	b.n	8001584 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fc11 	bl	8000d8c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d907      	bls.n	8001584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e150      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b88      	ldr	r3, [pc, #544]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ea      	bne.n	8001566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8097 	beq.w	80016cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b81      	ldr	r3, [pc, #516]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b7d      	ldr	r3, [pc, #500]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a7c      	ldr	r2, [pc, #496]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b7a      	ldr	r3, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b77      	ldr	r3, [pc, #476]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d118      	bne.n	800160c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b74      	ldr	r3, [pc, #464]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a73      	ldr	r2, [pc, #460]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbd1 	bl	8000d8c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff fbcd 	bl	8000d8c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e10c      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b6a      	ldr	r3, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x474>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x2ea>
 8001614:	4b64      	ldr	r3, [pc, #400]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001618:	4a63      	ldr	r2, [pc, #396]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001620:	e01c      	b.n	800165c <HAL_RCC_OscConfig+0x324>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x30c>
 800162a:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162e:	4a5e      	ldr	r2, [pc, #376]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6713      	str	r3, [r2, #112]	@ 0x70
 8001636:	4b5c      	ldr	r3, [pc, #368]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163a:	4a5b      	ldr	r2, [pc, #364]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6713      	str	r3, [r2, #112]	@ 0x70
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0x324>
 8001644:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001648:	4a57      	ldr	r2, [pc, #348]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001650:	4b55      	ldr	r3, [pc, #340]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001654:	4a54      	ldr	r2, [pc, #336]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d015      	beq.n	8001690 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fb92 	bl	8000d8c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	e00a      	b.n	8001682 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fb8e 	bl	8000d8c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e0cb      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001682:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0ee      	beq.n	800166c <HAL_RCC_OscConfig+0x334>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fb7c 	bl	8000d8c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fb78 	bl	8000d8c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0b5      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ee      	bne.n	8001698 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b39      	ldr	r3, [pc, #228]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a38      	ldr	r2, [pc, #224]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a1 	beq.w	8001818 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d05c      	beq.n	800179c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d141      	bne.n	800176e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <HAL_RCC_OscConfig+0x478>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb4c 	bl	8000d8c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fb48 	bl	8000d8c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e087      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	491b      	ldr	r1, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x478>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb21 	bl	8000d8c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb1d 	bl	8000d8c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e05c      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x416>
 800176c:	e054      	b.n	8001818 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_RCC_OscConfig+0x478>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb0a 	bl	8000d8c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb06 	bl	8000d8c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e045      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_OscConfig+0x470>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
 800179a:	e03d      	b.n	8001818 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e038      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x4ec>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d028      	beq.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d121      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d11a      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d111      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fa38 	bl	8000d8c <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fa34 	bl	8000d8c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f821 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f8c8 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08004efc 	.word	0x08004efc
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f8:	b094      	sub	sp, #80	@ 0x50
 80019fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a00:	2300      	movs	r3, #0
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a04:	2300      	movs	r3, #0
 8001a06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a0c:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d00d      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x40>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	f200 80e1 	bhi.w	8001be0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x34>
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a26:	e0db      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001a2c:	e0db      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2e:	4b73      	ldr	r3, [pc, #460]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a32:	e0d8      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a34:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a66:	4622      	mov	r2, r4
 8001a68:	462b      	mov	r3, r5
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4621      	mov	r1, r4
 8001a80:	1a51      	subs	r1, r2, r1
 8001a82:	6139      	str	r1, [r7, #16]
 8001a84:	4629      	mov	r1, r5
 8001a86:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a98:	4659      	mov	r1, fp
 8001a9a:	018b      	lsls	r3, r1, #6
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	018a      	lsls	r2, r1, #6
 8001aa6:	4651      	mov	r1, sl
 8001aa8:	ebb2 0801 	subs.w	r8, r2, r1
 8001aac:	4659      	mov	r1, fp
 8001aae:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	eb18 0303 	adds.w	r3, r8, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	eb49 0303 	adc.w	r3, r9, r3
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	024b      	lsls	r3, r1, #9
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af0:	4621      	mov	r1, r4
 8001af2:	024a      	lsls	r2, r1, #9
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afa:	2200      	movs	r2, #0
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001afe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b04:	f7fe fb64 	bl	80001d0 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b10:	e058      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	099b      	lsrs	r3, r3, #6
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b22:	623b      	str	r3, [r7, #32]
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b2c:	4642      	mov	r2, r8
 8001b2e:	464b      	mov	r3, r9
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	0159      	lsls	r1, r3, #5
 8001b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3e:	0150      	lsls	r0, r2, #5
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4641      	mov	r1, r8
 8001b46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b64:	ebb2 040a 	subs.w	r4, r2, sl
 8001b68:	eb63 050b 	sbc.w	r5, r3, fp
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	00eb      	lsls	r3, r5, #3
 8001b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7a:	00e2      	lsls	r2, r4, #3
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	461d      	mov	r5, r3
 8001b80:	4643      	mov	r3, r8
 8001b82:	18e3      	adds	r3, r4, r3
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	464b      	mov	r3, r9
 8001b88:	eb45 0303 	adc.w	r3, r5, r3
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	028b      	lsls	r3, r1, #10
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	028a      	lsls	r2, r1, #10
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	61fa      	str	r2, [r7, #28]
 8001bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb8:	f7fe fb0a 	bl	80001d0 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001be2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3750      	adds	r7, #80	@ 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a9b      	lsrs	r3, r3, #10
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	@ (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08004f0c 	.word	0x08004f0c

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c44:	f7ff ffdc 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08004f0c 	.word	0x08004f0c

08001c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_RCC_GetClockConfig+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f839 	bl	8001d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f9d8 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04e      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc2:	d01d      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40010400 	.word	0x40010400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	40001800 	.word	0x40001800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0202 	mvn.w	r2, #2
 8001e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8ee 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8e0 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8f1 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8c4 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8b6 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8c7 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f89a 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f88c 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f89d 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0210 	mvn.w	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f870 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f862 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f873 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fd38 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fee:	2b80      	cmp	r3, #128	@ 0x80
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffc:	2b80      	cmp	r3, #128	@ 0x80
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f902 	bl	8002214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201a:	2b40      	cmp	r3, #64	@ 0x40
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002028:	2b40      	cmp	r3, #64	@ 0x40
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f838 	bl	80020ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8cc 	bl	8002200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a40      	ldr	r2, [pc, #256]	@ (80021d4 <TIM_Base_SetConfig+0x114>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020de:	d00f      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3d      	ldr	r2, [pc, #244]	@ (80021d8 <TIM_Base_SetConfig+0x118>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00b      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3c      	ldr	r2, [pc, #240]	@ (80021dc <TIM_Base_SetConfig+0x11c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3b      	ldr	r2, [pc, #236]	@ (80021e0 <TIM_Base_SetConfig+0x120>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3a      	ldr	r2, [pc, #232]	@ (80021e4 <TIM_Base_SetConfig+0x124>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2f      	ldr	r2, [pc, #188]	@ (80021d4 <TIM_Base_SetConfig+0x114>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002120:	d027      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2c      	ldr	r2, [pc, #176]	@ (80021d8 <TIM_Base_SetConfig+0x118>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d023      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2b      	ldr	r2, [pc, #172]	@ (80021dc <TIM_Base_SetConfig+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2a      	ldr	r2, [pc, #168]	@ (80021e0 <TIM_Base_SetConfig+0x120>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a29      	ldr	r2, [pc, #164]	@ (80021e4 <TIM_Base_SetConfig+0x124>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d017      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a28      	ldr	r2, [pc, #160]	@ (80021e8 <TIM_Base_SetConfig+0x128>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a27      	ldr	r2, [pc, #156]	@ (80021ec <TIM_Base_SetConfig+0x12c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a26      	ldr	r2, [pc, #152]	@ (80021f0 <TIM_Base_SetConfig+0x130>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a25      	ldr	r2, [pc, #148]	@ (80021f4 <TIM_Base_SetConfig+0x134>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a24      	ldr	r2, [pc, #144]	@ (80021f8 <TIM_Base_SetConfig+0x138>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a23      	ldr	r2, [pc, #140]	@ (80021fc <TIM_Base_SetConfig+0x13c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d108      	bne.n	8002184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <TIM_Base_SetConfig+0x114>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0xf8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <TIM_Base_SetConfig+0x124>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d103      	bne.n	80021c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	615a      	str	r2, [r3, #20]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800
 80021f4:	40001800 	.word	0x40001800
 80021f8:	40001c00 	.word	0x40001c00
 80021fc:	40002000 	.word	0x40002000

08002200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e03f      	b.n	80022ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc40 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	@ 0x24
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800226a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f829 	bl	80022c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b0c0      	sub	sp, #256	@ 0x100
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	ea40 0301 	orr.w	r3, r0, r1
 80022ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	431a      	orrs	r2, r3
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800231c:	f021 010c 	bic.w	r1, r1, #12
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	6999      	ldr	r1, [r3, #24]
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	ea40 0301 	orr.w	r3, r0, r1
 800234a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b8f      	ldr	r3, [pc, #572]	@ (8002590 <UART_SetConfig+0x2cc>)
 8002354:	429a      	cmp	r2, r3
 8002356:	d005      	beq.n	8002364 <UART_SetConfig+0xa0>
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b8d      	ldr	r3, [pc, #564]	@ (8002594 <UART_SetConfig+0x2d0>)
 8002360:	429a      	cmp	r2, r3
 8002362:	d104      	bne.n	800236e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002364:	f7ff fc6c 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8002368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800236c:	e003      	b.n	8002376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800236e:	f7ff fc53 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002380:	f040 810c 	bne.w	800259c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800238e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	1891      	adds	r1, r2, r2
 800239c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800239e:	415b      	adcs	r3, r3
 80023a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023a6:	4621      	mov	r1, r4
 80023a8:	eb12 0801 	adds.w	r8, r2, r1
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb43 0901 	adc.w	r9, r3, r1
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c6:	4690      	mov	r8, r2
 80023c8:	4699      	mov	r9, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	eb18 0303 	adds.w	r3, r8, r3
 80023d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023d4:	462b      	mov	r3, r5
 80023d6:	eb49 0303 	adc.w	r3, r9, r3
 80023da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023f2:	460b      	mov	r3, r1
 80023f4:	18db      	adds	r3, r3, r3
 80023f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80023f8:	4613      	mov	r3, r2
 80023fa:	eb42 0303 	adc.w	r3, r2, r3
 80023fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002408:	f7fd fee2 	bl	80001d0 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4b61      	ldr	r3, [pc, #388]	@ (8002598 <UART_SetConfig+0x2d4>)
 8002412:	fba3 2302 	umull	r2, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	011c      	lsls	r4, r3, #4
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002434:	415b      	adcs	r3, r3
 8002436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800243c:	4641      	mov	r1, r8
 800243e:	eb12 0a01 	adds.w	sl, r2, r1
 8002442:	4649      	mov	r1, r9
 8002444:	eb43 0b01 	adc.w	fp, r3, r1
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800245c:	4692      	mov	sl, r2
 800245e:	469b      	mov	fp, r3
 8002460:	4643      	mov	r3, r8
 8002462:	eb1a 0303 	adds.w	r3, sl, r3
 8002466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800246a:	464b      	mov	r3, r9
 800246c:	eb4b 0303 	adc.w	r3, fp, r3
 8002470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002488:	460b      	mov	r3, r1
 800248a:	18db      	adds	r3, r3, r3
 800248c:	643b      	str	r3, [r7, #64]	@ 0x40
 800248e:	4613      	mov	r3, r2
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	647b      	str	r3, [r7, #68]	@ 0x44
 8002496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800249a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800249e:	f7fd fe97 	bl	80001d0 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002598 <UART_SetConfig+0x2d4>)
 80024aa:	fba3 2301 	umull	r2, r3, r3, r1
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2264      	movs	r2, #100	@ 0x64
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	1acb      	subs	r3, r1, r3
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024be:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <UART_SetConfig+0x2d4>)
 80024c0:	fba3 2302 	umull	r2, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024cc:	441c      	add	r4, r3
 80024ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024e8:	415b      	adcs	r3, r3
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024f0:	4641      	mov	r1, r8
 80024f2:	1851      	adds	r1, r2, r1
 80024f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80024f6:	4649      	mov	r1, r9
 80024f8:	414b      	adcs	r3, r1
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002508:	4659      	mov	r1, fp
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	4651      	mov	r1, sl
 800250e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002512:	4651      	mov	r1, sl
 8002514:	00ca      	lsls	r2, r1, #3
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4603      	mov	r3, r0
 800251c:	4642      	mov	r2, r8
 800251e:	189b      	adds	r3, r3, r2
 8002520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002524:	464b      	mov	r3, r9
 8002526:	460a      	mov	r2, r1
 8002528:	eb42 0303 	adc.w	r3, r2, r3
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800253c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002544:	460b      	mov	r3, r1
 8002546:	18db      	adds	r3, r3, r3
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800254a:	4613      	mov	r3, r2
 800254c:	eb42 0303 	adc.w	r3, r2, r3
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800255a:	f7fd fe39 	bl	80001d0 <__aeabi_uldivmod>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <UART_SetConfig+0x2d4>)
 8002564:	fba3 1302 	umull	r1, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2164      	movs	r1, #100	@ 0x64
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	3332      	adds	r3, #50	@ 0x32
 8002576:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <UART_SetConfig+0x2d4>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4422      	add	r2, r4
 800258a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800258c:	e106      	b.n	800279c <UART_SetConfig+0x4d8>
 800258e:	bf00      	nop
 8002590:	40011000 	.word	0x40011000
 8002594:	40011400 	.word	0x40011400
 8002598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025ae:	4642      	mov	r2, r8
 80025b0:	464b      	mov	r3, r9
 80025b2:	1891      	adds	r1, r2, r2
 80025b4:	6239      	str	r1, [r7, #32]
 80025b6:	415b      	adcs	r3, r3
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025be:	4641      	mov	r1, r8
 80025c0:	1854      	adds	r4, r2, r1
 80025c2:	4649      	mov	r1, r9
 80025c4:	eb43 0501 	adc.w	r5, r3, r1
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	00eb      	lsls	r3, r5, #3
 80025d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	4643      	mov	r3, r8
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025e4:	464b      	mov	r3, r9
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800260a:	4629      	mov	r1, r5
 800260c:	008b      	lsls	r3, r1, #2
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002614:	4621      	mov	r1, r4
 8002616:	008a      	lsls	r2, r1, #2
 8002618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800261c:	f7fd fdd8 	bl	80001d0 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <UART_SetConfig+0x4e4>)
 8002626:	fba3 2302 	umull	r2, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	011c      	lsls	r4, r3, #4
 800262e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002632:	2200      	movs	r2, #0
 8002634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800263c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002640:	4642      	mov	r2, r8
 8002642:	464b      	mov	r3, r9
 8002644:	1891      	adds	r1, r2, r2
 8002646:	61b9      	str	r1, [r7, #24]
 8002648:	415b      	adcs	r3, r3
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002650:	4641      	mov	r1, r8
 8002652:	1851      	adds	r1, r2, r1
 8002654:	6139      	str	r1, [r7, #16]
 8002656:	4649      	mov	r1, r9
 8002658:	414b      	adcs	r3, r1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002668:	4659      	mov	r1, fp
 800266a:	00cb      	lsls	r3, r1, #3
 800266c:	4651      	mov	r1, sl
 800266e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002672:	4651      	mov	r1, sl
 8002674:	00ca      	lsls	r2, r1, #3
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	4603      	mov	r3, r0
 800267c:	4642      	mov	r2, r8
 800267e:	189b      	adds	r3, r3, r2
 8002680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002684:	464b      	mov	r3, r9
 8002686:	460a      	mov	r2, r1
 8002688:	eb42 0303 	adc.w	r3, r2, r3
 800268c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026a8:	4649      	mov	r1, r9
 80026aa:	008b      	lsls	r3, r1, #2
 80026ac:	4641      	mov	r1, r8
 80026ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b2:	4641      	mov	r1, r8
 80026b4:	008a      	lsls	r2, r1, #2
 80026b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026ba:	f7fd fd89 	bl	80001d0 <__aeabi_uldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <UART_SetConfig+0x4e4>)
 80026c6:	fba3 2301 	umull	r2, r3, r3, r1
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2264      	movs	r2, #100	@ 0x64
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	1acb      	subs	r3, r1, r3
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	3332      	adds	r3, #50	@ 0x32
 80026d8:	4a33      	ldr	r2, [pc, #204]	@ (80027a8 <UART_SetConfig+0x4e4>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e4:	441c      	add	r4, r3
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80026ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80026f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	1891      	adds	r1, r2, r2
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	415b      	adcs	r3, r3
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002704:	4641      	mov	r1, r8
 8002706:	1851      	adds	r1, r2, r1
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	4649      	mov	r1, r9
 800270c:	414b      	adcs	r3, r1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800271c:	4659      	mov	r1, fp
 800271e:	00cb      	lsls	r3, r1, #3
 8002720:	4651      	mov	r1, sl
 8002722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002726:	4651      	mov	r1, sl
 8002728:	00ca      	lsls	r2, r1, #3
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4603      	mov	r3, r0
 8002730:	4642      	mov	r2, r8
 8002732:	189b      	adds	r3, r3, r2
 8002734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002736:	464b      	mov	r3, r9
 8002738:	460a      	mov	r2, r1
 800273a:	eb42 0303 	adc.w	r3, r2, r3
 800273e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	663b      	str	r3, [r7, #96]	@ 0x60
 800274a:	667a      	str	r2, [r7, #100]	@ 0x64
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002758:	4649      	mov	r1, r9
 800275a:	008b      	lsls	r3, r1, #2
 800275c:	4641      	mov	r1, r8
 800275e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002762:	4641      	mov	r1, r8
 8002764:	008a      	lsls	r2, r1, #2
 8002766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800276a:	f7fd fd31 	bl	80001d0 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <UART_SetConfig+0x4e4>)
 8002774:	fba3 1302 	umull	r1, r3, r3, r2
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	2164      	movs	r1, #100	@ 0x64
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	3332      	adds	r3, #50	@ 0x32
 8002786:	4a08      	ldr	r2, [pc, #32]	@ (80027a8 <UART_SetConfig+0x4e4>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4422      	add	r2, r4
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027a2:	46bd      	mov	sp, r7
 80027a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0208 	add.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 32ff 	mov.w	r2, #4294967295
 80027c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0208 	add.w	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f103 0208 	add.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d103      	bne.n	800286e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e00c      	b.n	8002888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3308      	adds	r3, #8
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e002      	b.n	800287c <vListInsert+0x2e>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d2f6      	bcs.n	8002876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6852      	ldr	r2, [r2, #4]
 80028e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d103      	bne.n	80028f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10b      	bne.n	8002940 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002940:	f001 ff82 	bl	8004848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	441a      	add	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	3b01      	subs	r3, #1
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	441a      	add	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	22ff      	movs	r2, #255	@ 0xff
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	22ff      	movs	r2, #255	@ 0xff
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d114      	bne.n	80029c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01a      	beq.n	80029d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3310      	adds	r3, #16
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f856 	bl	8003a54 <xTaskRemoveFromEventList>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d012      	beq.n	80029d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029ae:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <xQueueGenericReset+0xd0>)
 80029b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	e009      	b.n	80029d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3310      	adds	r3, #16
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fef1 	bl	80027ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3324      	adds	r3, #36	@ 0x24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff feec 	bl	80027ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029d4:	f001 ff6a 	bl	80048ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029d8:	2301      	movs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	@ 0x28
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10b      	bne.n	8002a14 <xQueueGenericCreate+0x2c>
	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	613b      	str	r3, [r7, #16]
}
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e004      	b.n	8002a2a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3350      	adds	r3, #80	@ 0x50
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 f82c 	bl	8004a8c <pvPortMalloc>
 8002a34:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3350      	adds	r3, #80	@ 0x50
 8002a44:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f805 	bl	8002a62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a58:	69bb      	ldr	r3, [r7, #24]
	}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e002      	b.n	8002a84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a90:	2101      	movs	r1, #1
 8002a92:	69b8      	ldr	r0, [r7, #24]
 8002a94:	f7ff ff3e 	bl	8002914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	@ 0x38
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <xQueueGenericSend+0x34>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <xQueueGenericSend+0x42>
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <xQueueGenericSend+0x46>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <xQueueGenericSend+0x48>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10b      	bne.n	8002b0c <xQueueGenericSend+0x64>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d103      	bne.n	8002b1a <xQueueGenericSend+0x72>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <xQueueGenericSend+0x76>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <xQueueGenericSend+0x78>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <xQueueGenericSend+0x94>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	623b      	str	r3, [r7, #32]
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3c:	f001 f92a 	bl	8003d94 <xTaskGetSchedulerState>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <xQueueGenericSend+0xa4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <xQueueGenericSend+0xa8>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <xQueueGenericSend+0xaa>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <xQueueGenericSend+0xc6>
	__asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	61fb      	str	r3, [r7, #28]
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	e7fd      	b.n	8002b6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b6e:	f001 fe6b 	bl	8004848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <xQueueGenericSend+0xdc>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d129      	bne.n	8002bd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b8a:	f000 fa0d 	bl	8002fa8 <prvCopyDataToQueue>
 8002b8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	3324      	adds	r3, #36	@ 0x24
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 ff59 	bl	8003a54 <xTaskRemoveFromEventList>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca8 <xQueueGenericSend+0x200>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	e00a      	b.n	8002bd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bc0:	4b39      	ldr	r3, [pc, #228]	@ (8002ca8 <xQueueGenericSend+0x200>)
 8002bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bd0:	f001 fe6c 	bl	80048ac <vPortExitCritical>
				return pdPASS;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e063      	b.n	8002ca0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bde:	f001 fe65 	bl	80048ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e05c      	b.n	8002ca0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 ff93 	bl	8003b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bfa:	f001 fe57 	bl	80048ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bfe:	f000 fd05 	bl	800360c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c02:	f001 fe21 	bl	8004848 <vPortEnterCritical>
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d103      	bne.n	8002c1c <xQueueGenericSend+0x174>
 8002c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSend+0x18a>
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c32:	f001 fe3b 	bl	80048ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c36:	1d3a      	adds	r2, r7, #4
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 ff82 	bl	8003b48 <xTaskCheckForTimeOut>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d124      	bne.n	8002c94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c4c:	f000 faa4 	bl	8003198 <prvIsQueueFull>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	3310      	adds	r3, #16
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fea6 	bl	80039b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c66:	f000 fa2f 	bl	80030c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c6a:	f000 fcdd 	bl	8003628 <xTaskResumeAll>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f47f af7c 	bne.w	8002b6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <xQueueGenericSend+0x200>)
 8002c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	e772      	b.n	8002b6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c8a:	f000 fa1d 	bl	80030c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8e:	f000 fccb 	bl	8003628 <xTaskResumeAll>
 8002c92:	e76c      	b.n	8002b6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c96:	f000 fa17 	bl	80030c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c9a:	f000 fcc5 	bl	8003628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3738      	adds	r7, #56	@ 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	@ 0x38
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <xQueueGenericSendFromISR+0x3e>
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericSendFromISR+0x42>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericSendFromISR+0x44>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	623b      	str	r3, [r7, #32]
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSendFromISR+0x6e>
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <xQueueGenericSendFromISR+0x72>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueGenericSendFromISR+0x74>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	61fb      	str	r3, [r7, #28]
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d3c:	f001 fe64 	bl	8004a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d40:	f3ef 8211 	mrs	r2, BASEPRI
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	61ba      	str	r2, [r7, #24]
 8002d56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d302      	bcc.n	8002d6e <xQueueGenericSendFromISR+0xc2>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d12c      	bne.n	8002dc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d7e:	f000 f913 	bl	8002fa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d82:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d112      	bne.n	8002db2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d96:	3324      	adds	r3, #36	@ 0x24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fe5b 	bl	8003a54 <xTaskRemoveFromEventList>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e007      	b.n	8002dc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002db2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002db6:	3301      	adds	r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	b25a      	sxtb	r2, r3
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002dc6:	e001      	b.n	8002dcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3738      	adds	r7, #56	@ 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	@ 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10b      	bne.n	8002e16 <xQueueReceive+0x32>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	623b      	str	r3, [r7, #32]
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	e7fd      	b.n	8002e12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <xQueueReceive+0x40>
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <xQueueReceive+0x44>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <xQueueReceive+0x46>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10b      	bne.n	8002e46 <xQueueReceive+0x62>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	61fb      	str	r3, [r7, #28]
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	e7fd      	b.n	8002e42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e46:	f000 ffa5 	bl	8003d94 <xTaskGetSchedulerState>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <xQueueReceive+0x72>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <xQueueReceive+0x76>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <xQueueReceive+0x78>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <xQueueReceive+0x94>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	61bb      	str	r3, [r7, #24]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e78:	f001 fce6 	bl	8004848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01f      	beq.n	8002ec8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e8c:	f000 f8f6 	bl	800307c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	1e5a      	subs	r2, r3, #1
 8002e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00f      	beq.n	8002ec0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fdd5 	bl	8003a54 <xTaskRemoveFromEventList>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa4 <xQueueReceive+0x1c0>)
 8002eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ec0:	f001 fcf4 	bl	80048ac <vPortExitCritical>
				return pdPASS;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e069      	b.n	8002f9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ece:	f001 fced 	bl	80048ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e062      	b.n	8002f9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fe1b 	bl	8003b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eea:	f001 fcdf 	bl	80048ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eee:	f000 fb8d 	bl	800360c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ef2:	f001 fca9 	bl	8004848 <vPortEnterCritical>
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f02:	d103      	bne.n	8002f0c <xQueueReceive+0x128>
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f12:	b25b      	sxtb	r3, r3
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d103      	bne.n	8002f22 <xQueueReceive+0x13e>
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f22:	f001 fcc3 	bl	80048ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f26:	1d3a      	adds	r2, r7, #4
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fe0a 	bl	8003b48 <xTaskCheckForTimeOut>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d123      	bne.n	8002f82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f3c:	f000 f916 	bl	800316c <prvIsQueueEmpty>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d017      	beq.n	8002f76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	3324      	adds	r3, #36	@ 0x24
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fd2e 	bl	80039b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f56:	f000 f8b7 	bl	80030c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f5a:	f000 fb65 	bl	8003628 <xTaskResumeAll>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d189      	bne.n	8002e78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <xQueueReceive+0x1c0>)
 8002f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	e780      	b.n	8002e78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f78:	f000 f8a6 	bl	80030c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f7c:	f000 fb54 	bl	8003628 <xTaskResumeAll>
 8002f80:	e77a      	b.n	8002e78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f84:	f000 f8a0 	bl	80030c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f88:	f000 fb4e 	bl	8003628 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f8e:	f000 f8ed 	bl	800316c <prvIsQueueEmpty>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f43f af6f 	beq.w	8002e78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3730      	adds	r7, #48	@ 0x30
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d14d      	bne.n	800306a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fefc 	bl	8003dd0 <xTaskPriorityDisinherit>
 8002fd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e043      	b.n	800306a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d119      	bne.n	800301c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6858      	ldr	r0, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	f001 ff56 	bl	8004ea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d32b      	bcc.n	800306a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	e026      	b.n	800306a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68d8      	ldr	r0, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	461a      	mov	r2, r3
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	f001 ff3c 	bl	8004ea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	425b      	negs	r3, r3
 8003036:	441a      	add	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d207      	bcs.n	8003058 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	425b      	negs	r3, r3
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d105      	bne.n	800306a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	3b01      	subs	r3, #1
 8003068:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003072:	697b      	ldr	r3, [r7, #20]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	441a      	add	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d303      	bcc.n	80030b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	461a      	mov	r2, r3
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	f001 fef2 	bl	8004ea4 <memcpy>
	}
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030d0:	f001 fbba 	bl	8004848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030dc:	e011      	b.n	8003102 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d012      	beq.n	800310c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3324      	adds	r3, #36	@ 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fcb2 	bl	8003a54 <xTaskRemoveFromEventList>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030f6:	f000 fd8b 	bl	8003c10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dce9      	bgt.n	80030de <prvUnlockQueue+0x16>
 800310a:	e000      	b.n	800310e <prvUnlockQueue+0x46>
					break;
 800310c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	22ff      	movs	r2, #255	@ 0xff
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003116:	f001 fbc9 	bl	80048ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800311a:	f001 fb95 	bl	8004848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003124:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003126:	e011      	b.n	800314c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3310      	adds	r3, #16
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fc8d 	bl	8003a54 <xTaskRemoveFromEventList>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003140:	f000 fd66 	bl	8003c10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	3b01      	subs	r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800314c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003150:	2b00      	cmp	r3, #0
 8003152:	dce9      	bgt.n	8003128 <prvUnlockQueue+0x60>
 8003154:	e000      	b.n	8003158 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003156:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	22ff      	movs	r2, #255	@ 0xff
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003160:	f001 fba4 	bl	80048ac <vPortExitCritical>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003174:	f001 fb68 	bl	8004848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003180:	2301      	movs	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e001      	b.n	800318a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800318a:	f001 fb8f 	bl	80048ac <vPortExitCritical>

	return xReturn;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031a0:	f001 fb52 	bl	8004848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d102      	bne.n	80031b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031b0:	2301      	movs	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e001      	b.n	80031ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ba:	f001 fb77 	bl	80048ac <vPortExitCritical>

	return xReturn;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e014      	b.n	8003202 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003218 <vQueueAddToRegistry+0x50>)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031e4:	490c      	ldr	r1, [pc, #48]	@ (8003218 <vQueueAddToRegistry+0x50>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <vQueueAddToRegistry+0x50>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031fa:	e006      	b.n	800320a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b07      	cmp	r3, #7
 8003206:	d9e7      	bls.n	80031d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	200000cc 	.word	0x200000cc

0800321c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800322c:	f001 fb0c 	bl	8004848 <vPortEnterCritical>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003236:	b25b      	sxtb	r3, r3
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d103      	bne.n	8003246 <vQueueWaitForMessageRestricted+0x2a>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800324c:	b25b      	sxtb	r3, r3
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d103      	bne.n	800325c <vQueueWaitForMessageRestricted+0x40>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800325c:	f001 fb26 	bl	80048ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3324      	adds	r3, #36	@ 0x24
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fbc3 	bl	80039fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7ff ff26 	bl	80030c8 <prvUnlockQueue>
	}
 800327c:	bf00      	nop
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	@ 0x30
 8003288:	af04      	add	r7, sp, #16
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fbf7 	bl	8004a8c <pvPortMalloc>
 800329e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00e      	beq.n	80032c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032a6:	2058      	movs	r0, #88	@ 0x58
 80032a8:	f001 fbf0 	bl	8004a8c <pvPortMalloc>
 80032ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ba:	e005      	b.n	80032c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f001 fcad 	bl	8004c1c <vPortFree>
 80032c2:	e001      	b.n	80032c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	2300      	movs	r3, #0
 80032d2:	9303      	str	r3, [sp, #12]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	9302      	str	r3, [sp, #8]
 80032d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f80e 	bl	8003306 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ea:	69f8      	ldr	r0, [r7, #28]
 80032ec:	f000 f89c 	bl	8003428 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032f0:	2301      	movs	r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e002      	b.n	80032fc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032fc:	69bb      	ldr	r3, [r7, #24]
	}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b088      	sub	sp, #32
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003316:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	461a      	mov	r2, r3
 800331e:	21a5      	movs	r1, #165	@ 0xa5
 8003320:	f001 fd94 	bl	8004e4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800332e:	3b01      	subs	r3, #1
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	617b      	str	r3, [r7, #20]
}
 800335a:	bf00      	nop
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01f      	beq.n	80033a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e012      	b.n	8003392 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	4413      	add	r3, r2
 8003372:	7819      	ldrb	r1, [r3, #0]
 8003374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	3334      	adds	r3, #52	@ 0x34
 800337c:	460a      	mov	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	3301      	adds	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b09      	cmp	r3, #9
 8003396:	d9e9      	bls.n	800336c <prvInitialiseNewTask+0x66>
 8003398:	e000      	b.n	800339c <prvInitialiseNewTask+0x96>
			{
				break;
 800339a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033a4:	e003      	b.n	80033ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d901      	bls.n	80033b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033b4:	2304      	movs	r3, #4
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c2:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	2200      	movs	r2, #0
 80033c8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fa0c 	bl	80027ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	3318      	adds	r3, #24
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fa07 	bl	80027ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	f1c3 0205 	rsb	r2, r3, #5
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	2200      	movs	r2, #0
 80033f8:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	69b8      	ldr	r0, [r7, #24]
 8003408:	f001 f8ee 	bl	80045e8 <pxPortInitialiseStack>
 800340c:	4602      	mov	r2, r0
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800341e:	bf00      	nop
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003430:	f001 fa0a 	bl	8004848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003434:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <prvAddNewTaskToReadyList+0xc0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <prvAddNewTaskToReadyList+0xc0>)
 800343c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800343e:	4b2b      	ldr	r3, [pc, #172]	@ (80034ec <prvAddNewTaskToReadyList+0xc4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003446:	4a29      	ldr	r2, [pc, #164]	@ (80034ec <prvAddNewTaskToReadyList+0xc4>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800344c:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <prvAddNewTaskToReadyList+0xc0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d110      	bne.n	8003476 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003454:	f000 fc00 	bl	8003c58 <prvInitialiseTaskLists>
 8003458:	e00d      	b.n	8003476 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800345a:	4b25      	ldr	r3, [pc, #148]	@ (80034f0 <prvAddNewTaskToReadyList+0xc8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003462:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <prvAddNewTaskToReadyList+0xc4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	429a      	cmp	r2, r3
 800346e:	d802      	bhi.n	8003476 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003470:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <prvAddNewTaskToReadyList+0xc4>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003476:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <prvAddNewTaskToReadyList+0xcc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <prvAddNewTaskToReadyList+0xcc>)
 800347e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003480:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <prvAddNewTaskToReadyList+0xcc>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	2201      	movs	r2, #1
 800348e:	409a      	lsls	r2, r3
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <prvAddNewTaskToReadyList+0xd0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <prvAddNewTaskToReadyList+0xd0>)
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4a15      	ldr	r2, [pc, #84]	@ (80034fc <prvAddNewTaskToReadyList+0xd4>)
 80034a8:	441a      	add	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7ff f9a8 	bl	8002806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b6:	f001 f9f9 	bl	80048ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <prvAddNewTaskToReadyList+0xc8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034c2:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <prvAddNewTaskToReadyList+0xc4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d207      	bcs.n	80034e0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <prvAddNewTaskToReadyList+0xd8>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200001e4 	.word	0x200001e4
 80034ec:	2000010c 	.word	0x2000010c
 80034f0:	200001f0 	.word	0x200001f0
 80034f4:	20000200 	.word	0x20000200
 80034f8:	200001ec 	.word	0x200001ec
 80034fc:	20000110 	.word	0x20000110
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d018      	beq.n	8003548 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003516:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <vTaskDelay+0x64>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <vTaskDelay+0x32>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60bb      	str	r3, [r7, #8]
}
 8003530:	bf00      	nop
 8003532:	bf00      	nop
 8003534:	e7fd      	b.n	8003532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003536:	f000 f869 	bl	800360c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800353a:	2100      	movs	r1, #0
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fccf 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003542:	f000 f871 	bl	8003628 <xTaskResumeAll>
 8003546:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <vTaskDelay+0x68>)
 8003550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000020c 	.word	0x2000020c
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003576:	4b1f      	ldr	r3, [pc, #124]	@ (80035f4 <vTaskStartScheduler+0x84>)
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2300      	movs	r3, #0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	2282      	movs	r2, #130	@ 0x82
 8003582:	491d      	ldr	r1, [pc, #116]	@ (80035f8 <vTaskStartScheduler+0x88>)
 8003584:	481d      	ldr	r0, [pc, #116]	@ (80035fc <vTaskStartScheduler+0x8c>)
 8003586:	f7ff fe7d 	bl	8003284 <xTaskCreate>
 800358a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003592:	f000 fd0b 	bl	8003fac <xTimerCreateTimerTask>
 8003596:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d116      	bne.n	80035cc <vTaskStartScheduler+0x5c>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60bb      	str	r3, [r7, #8]
}
 80035b0:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035b2:	4b13      	ldr	r3, [pc, #76]	@ (8003600 <vTaskStartScheduler+0x90>)
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <vTaskStartScheduler+0x94>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <vTaskStartScheduler+0x98>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035c6:	f001 f89b 	bl	8004700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035ca:	e00f      	b.n	80035ec <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d10b      	bne.n	80035ec <vTaskStartScheduler+0x7c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	607b      	str	r3, [r7, #4]
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <vTaskStartScheduler+0x78>
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000208 	.word	0x20000208
 80035f8:	08004ee4 	.word	0x08004ee4
 80035fc:	08003c29 	.word	0x08003c29
 8003600:	20000204 	.word	0x20000204
 8003604:	200001f0 	.word	0x200001f0
 8003608:	200001e8 	.word	0x200001e8

0800360c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <vTaskSuspendAll+0x18>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a03      	ldr	r2, [pc, #12]	@ (8003624 <vTaskSuspendAll+0x18>)
 8003618:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	2000020c 	.word	0x2000020c

08003628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003636:	4b42      	ldr	r3, [pc, #264]	@ (8003740 <xTaskResumeAll+0x118>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <xTaskResumeAll+0x2e>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	603b      	str	r3, [r7, #0]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003656:	f001 f8f7 	bl	8004848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800365a:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <xTaskResumeAll+0x118>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3b01      	subs	r3, #1
 8003660:	4a37      	ldr	r2, [pc, #220]	@ (8003740 <xTaskResumeAll+0x118>)
 8003662:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003664:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <xTaskResumeAll+0x118>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d161      	bne.n	8003730 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <xTaskResumeAll+0x11c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d05d      	beq.n	8003730 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003674:	e02e      	b.n	80036d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003676:	4b34      	ldr	r3, [pc, #208]	@ (8003748 <xTaskResumeAll+0x120>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3318      	adds	r3, #24
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f91c 	bl	80028c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f917 	bl	80028c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	2201      	movs	r2, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	4b2c      	ldr	r3, [pc, #176]	@ (800374c <xTaskResumeAll+0x124>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	4a2a      	ldr	r2, [pc, #168]	@ (800374c <xTaskResumeAll+0x124>)
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4a27      	ldr	r2, [pc, #156]	@ (8003750 <xTaskResumeAll+0x128>)
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7ff f8a3 	bl	8002806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <xTaskResumeAll+0x12c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036ce:	4b22      	ldr	r3, [pc, #136]	@ (8003758 <xTaskResumeAll+0x130>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003748 <xTaskResumeAll+0x120>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1cc      	bne.n	8003676 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036e2:	f000 fb37 	bl	8003d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036e6:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <xTaskResumeAll+0x134>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036f2:	f000 f847 	bl	8003784 <xTaskIncrementTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80036fc:	4b16      	ldr	r3, [pc, #88]	@ (8003758 <xTaskResumeAll+0x130>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3b01      	subs	r3, #1
 8003706:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f1      	bne.n	80036f2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800370e:	4b13      	ldr	r3, [pc, #76]	@ (800375c <xTaskResumeAll+0x134>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <xTaskResumeAll+0x130>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800371c:	2301      	movs	r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003720:	4b0f      	ldr	r3, [pc, #60]	@ (8003760 <xTaskResumeAll+0x138>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003730:	f001 f8bc 	bl	80048ac <vPortExitCritical>

	return xAlreadyYielded;
 8003734:	68bb      	ldr	r3, [r7, #8]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000020c 	.word	0x2000020c
 8003744:	200001e4 	.word	0x200001e4
 8003748:	200001a4 	.word	0x200001a4
 800374c:	200001ec 	.word	0x200001ec
 8003750:	20000110 	.word	0x20000110
 8003754:	2000010c 	.word	0x2000010c
 8003758:	200001f8 	.word	0x200001f8
 800375c:	200001f4 	.word	0x200001f4
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800376a:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <xTaskGetTickCount+0x1c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	200001e8 	.word	0x200001e8

08003784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378e:	4b4f      	ldr	r3, [pc, #316]	@ (80038cc <xTaskIncrementTick+0x148>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 8089 	bne.w	80038aa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003798:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <xTaskIncrementTick+0x14c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037a0:	4a4b      	ldr	r2, [pc, #300]	@ (80038d0 <xTaskIncrementTick+0x14c>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d121      	bne.n	80037f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80037ac:	4b49      	ldr	r3, [pc, #292]	@ (80038d4 <xTaskIncrementTick+0x150>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	603b      	str	r3, [r7, #0]
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	e7fd      	b.n	80037ca <xTaskIncrementTick+0x46>
 80037ce:	4b41      	ldr	r3, [pc, #260]	@ (80038d4 <xTaskIncrementTick+0x150>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	4b40      	ldr	r3, [pc, #256]	@ (80038d8 <xTaskIncrementTick+0x154>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3e      	ldr	r2, [pc, #248]	@ (80038d4 <xTaskIncrementTick+0x150>)
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4a3e      	ldr	r2, [pc, #248]	@ (80038d8 <xTaskIncrementTick+0x154>)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b3e      	ldr	r3, [pc, #248]	@ (80038dc <xTaskIncrementTick+0x158>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a3c      	ldr	r2, [pc, #240]	@ (80038dc <xTaskIncrementTick+0x158>)
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	f000 fab2 	bl	8003d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037f0:	4b3b      	ldr	r3, [pc, #236]	@ (80038e0 <xTaskIncrementTick+0x15c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d348      	bcc.n	800388c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fa:	4b36      	ldr	r3, [pc, #216]	@ (80038d4 <xTaskIncrementTick+0x150>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <xTaskIncrementTick+0x15c>)
 8003806:	f04f 32ff 	mov.w	r2, #4294967295
 800380a:	601a      	str	r2, [r3, #0]
					break;
 800380c:	e03e      	b.n	800388c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800380e:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <xTaskIncrementTick+0x150>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d203      	bcs.n	800382e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003826:	4a2e      	ldr	r2, [pc, #184]	@ (80038e0 <xTaskIncrementTick+0x15c>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800382c:	e02e      	b.n	800388c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f844 	bl	80028c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3318      	adds	r3, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff f83b 	bl	80028c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	2201      	movs	r2, #1
 8003850:	409a      	lsls	r2, r3
 8003852:	4b24      	ldr	r3, [pc, #144]	@ (80038e4 <xTaskIncrementTick+0x160>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	4a22      	ldr	r2, [pc, #136]	@ (80038e4 <xTaskIncrementTick+0x160>)
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <xTaskIncrementTick+0x164>)
 800386a:	441a      	add	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7fe ffc7 	bl	8002806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <xTaskIncrementTick+0x168>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b9      	bcc.n	80037fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800388a:	e7b6      	b.n	80037fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800388c:	4b17      	ldr	r3, [pc, #92]	@ (80038ec <xTaskIncrementTick+0x168>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003892:	4915      	ldr	r1, [pc, #84]	@ (80038e8 <xTaskIncrementTick+0x164>)
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d907      	bls.n	80038b4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e004      	b.n	80038b4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <xTaskIncrementTick+0x16c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a0f      	ldr	r2, [pc, #60]	@ (80038f0 <xTaskIncrementTick+0x16c>)
 80038b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038b4:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <xTaskIncrementTick+0x170>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038c0:	697b      	ldr	r3, [r7, #20]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	2000020c 	.word	0x2000020c
 80038d0:	200001e8 	.word	0x200001e8
 80038d4:	2000019c 	.word	0x2000019c
 80038d8:	200001a0 	.word	0x200001a0
 80038dc:	200001fc 	.word	0x200001fc
 80038e0:	20000204 	.word	0x20000204
 80038e4:	200001ec 	.word	0x200001ec
 80038e8:	20000110 	.word	0x20000110
 80038ec:	2000010c 	.word	0x2000010c
 80038f0:	200001f4 	.word	0x200001f4
 80038f4:	200001f8 	.word	0x200001f8

080038f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <vTaskSwitchContext+0xa4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003906:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <vTaskSwitchContext+0xa8>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800390c:	e040      	b.n	8003990 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800390e:	4b24      	ldr	r3, [pc, #144]	@ (80039a0 <vTaskSwitchContext+0xa8>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <vTaskSwitchContext+0xac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f1c3 031f 	rsb	r3, r3, #31
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	491f      	ldr	r1, [pc, #124]	@ (80039a8 <vTaskSwitchContext+0xb0>)
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <vTaskSwitchContext+0x5e>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	607b      	str	r3, [r7, #4]
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	e7fd      	b.n	8003952 <vTaskSwitchContext+0x5a>
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <vTaskSwitchContext+0xb0>)
 8003962:	4413      	add	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	3308      	adds	r3, #8
 8003978:	429a      	cmp	r2, r3
 800397a:	d104      	bne.n	8003986 <vTaskSwitchContext+0x8e>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <vTaskSwitchContext+0xb4>)
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	2000020c 	.word	0x2000020c
 80039a0:	200001f8 	.word	0x200001f8
 80039a4:	200001ec 	.word	0x200001ec
 80039a8:	20000110 	.word	0x20000110
 80039ac:	2000010c 	.word	0x2000010c

080039b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60fb      	str	r3, [r7, #12]
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d8:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <vTaskPlaceOnEventList+0x48>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3318      	adds	r3, #24
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fe ff34 	bl	800284e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e6:	2101      	movs	r1, #1
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f000 fa79 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	2000010c 	.word	0x2000010c

080039fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	617b      	str	r3, [r7, #20]
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	e7fd      	b.n	8003a22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a26:	4b0a      	ldr	r3, [pc, #40]	@ (8003a50 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7fe fee9 	bl	8002806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68b8      	ldr	r0, [r7, #8]
 8003a44:	f000 fa4c 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
	}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	2000010c 	.word	0x2000010c

08003a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60fb      	str	r3, [r7, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	e7fd      	b.n	8003a7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3318      	adds	r3, #24
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe ff1a 	bl	80028c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <xTaskRemoveFromEventList+0xb0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11c      	bne.n	8003ace <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe ff11 	bl	80028c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <xTaskRemoveFromEventList+0xb4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <xTaskRemoveFromEventList+0xb4>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a13      	ldr	r2, [pc, #76]	@ (8003b0c <xTaskRemoveFromEventList+0xb8>)
 8003abe:	441a      	add	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe fe9d 	bl	8002806 <vListInsertEnd>
 8003acc:	e005      	b.n	8003ada <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480e      	ldr	r0, [pc, #56]	@ (8003b10 <xTaskRemoveFromEventList+0xbc>)
 8003ad6:	f7fe fe96 	bl	8002806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <xTaskRemoveFromEventList+0xc0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d905      	bls.n	8003af4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <xTaskRemoveFromEventList+0xc4>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e001      	b.n	8003af8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2000020c 	.word	0x2000020c
 8003b08:	200001ec 	.word	0x200001ec
 8003b0c:	20000110 	.word	0x20000110
 8003b10:	200001a4 	.word	0x200001a4
 8003b14:	2000010c 	.word	0x2000010c
 8003b18:	200001f8 	.word	0x200001f8

08003b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <vTaskInternalSetTimeOutState+0x24>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <vTaskInternalSetTimeOutState+0x28>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	605a      	str	r2, [r3, #4]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	200001fc 	.word	0x200001fc
 8003b44:	200001e8 	.word	0x200001e8

08003b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	613b      	str	r3, [r7, #16]
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	e7fd      	b.n	8003b8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b8e:	f000 fe5b 	bl	8004848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <xTaskCheckForTimeOut+0xc0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d102      	bne.n	8003bb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e023      	b.n	8003bfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <xTaskCheckForTimeOut+0xc4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d007      	beq.n	8003bce <xTaskCheckForTimeOut+0x86>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e015      	b.n	8003bfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d20b      	bcs.n	8003bf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff99 	bl	8003b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e004      	b.n	8003bfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bfa:	f000 fe57 	bl	80048ac <vPortExitCritical>

	return xReturn;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200001e8 	.word	0x200001e8
 8003c0c:	200001fc 	.word	0x200001fc

08003c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <vTaskMissedYield+0x14>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	200001f8 	.word	0x200001f8

08003c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c30:	f000 f852 	bl	8003cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <prvIdleTask+0x28>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d9f9      	bls.n	8003c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <prvIdleTask+0x2c>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c4c:	e7f0      	b.n	8003c30 <prvIdleTask+0x8>
 8003c4e:	bf00      	nop
 8003c50:	20000110 	.word	0x20000110
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e00c      	b.n	8003c7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4a12      	ldr	r2, [pc, #72]	@ (8003cb8 <prvInitialiseTaskLists+0x60>)
 8003c70:	4413      	add	r3, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fd9a 	bl	80027ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d9ef      	bls.n	8003c64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c84:	480d      	ldr	r0, [pc, #52]	@ (8003cbc <prvInitialiseTaskLists+0x64>)
 8003c86:	f7fe fd91 	bl	80027ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c8a:	480d      	ldr	r0, [pc, #52]	@ (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003c8c:	f7fe fd8e 	bl	80027ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c90:	480c      	ldr	r0, [pc, #48]	@ (8003cc4 <prvInitialiseTaskLists+0x6c>)
 8003c92:	f7fe fd8b 	bl	80027ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c96:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <prvInitialiseTaskLists+0x70>)
 8003c98:	f7fe fd88 	bl	80027ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c9c:	480b      	ldr	r0, [pc, #44]	@ (8003ccc <prvInitialiseTaskLists+0x74>)
 8003c9e:	f7fe fd85 	bl	80027ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <prvInitialiseTaskLists+0x78>)
 8003ca4:	4a05      	ldr	r2, [pc, #20]	@ (8003cbc <prvInitialiseTaskLists+0x64>)
 8003ca6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <prvInitialiseTaskLists+0x7c>)
 8003caa:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <prvInitialiseTaskLists+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000110 	.word	0x20000110
 8003cbc:	20000174 	.word	0x20000174
 8003cc0:	20000188 	.word	0x20000188
 8003cc4:	200001a4 	.word	0x200001a4
 8003cc8:	200001b8 	.word	0x200001b8
 8003ccc:	200001d0 	.word	0x200001d0
 8003cd0:	2000019c 	.word	0x2000019c
 8003cd4:	200001a0 	.word	0x200001a0

08003cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cde:	e019      	b.n	8003d14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ce0:	f000 fdb2 	bl	8004848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <prvCheckTasksWaitingTermination+0x50>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fde5 	bl	80028c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d2c <prvCheckTasksWaitingTermination+0x54>)
 8003cfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d0a:	f000 fdcf 	bl	80048ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f810 	bl	8003d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d14:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <prvCheckTasksWaitingTermination+0x58>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e1      	bne.n	8003ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200001b8 	.word	0x200001b8
 8003d2c:	200001e4 	.word	0x200001e4
 8003d30:	200001cc 	.word	0x200001cc

08003d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 ff6b 	bl	8004c1c <vPortFree>
			vPortFree( pxTCB );
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 ff68 	bl	8004c1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <prvResetNextTaskUnblockTime+0x38>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <prvResetNextTaskUnblockTime+0x3c>)
 8003d66:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d6c:	e008      	b.n	8003d80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6e:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <prvResetNextTaskUnblockTime+0x38>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <prvResetNextTaskUnblockTime+0x3c>)
 8003d7e:	6013      	str	r3, [r2, #0]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	2000019c 	.word	0x2000019c
 8003d90:	20000204 	.word	0x20000204

08003d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <xTaskGetSchedulerState+0x34>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003da2:	2301      	movs	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e008      	b.n	8003dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <xTaskGetSchedulerState+0x38>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003db0:	2302      	movs	r3, #2
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	e001      	b.n	8003dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dba:	687b      	ldr	r3, [r7, #4]
	}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	200001f0 	.word	0x200001f0
 8003dcc:	2000020c 	.word	0x2000020c

08003dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d070      	beq.n	8003ec8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003de6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed4 <xTaskPriorityDisinherit+0x104>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d00b      	beq.n	8003e08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60bb      	str	r3, [r7, #8]
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2c:	1e5a      	subs	r2, r3, #1
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d044      	beq.n	8003ec8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d140      	bne.n	8003ec8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fd38 	bl	80028c0 <uxListRemove>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d115      	bne.n	8003e82 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5a:	491f      	ldr	r1, [pc, #124]	@ (8003ed8 <xTaskPriorityDisinherit+0x108>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xTaskPriorityDisinherit+0xb2>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	2201      	movs	r2, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	4b18      	ldr	r3, [pc, #96]	@ (8003edc <xTaskPriorityDisinherit+0x10c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <xTaskPriorityDisinherit+0x10c>)
 8003e80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	f1c3 0205 	rsb	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003edc <xTaskPriorityDisinherit+0x10c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8003edc <xTaskPriorityDisinherit+0x10c>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <xTaskPriorityDisinherit+0x108>)
 8003eb6:	441a      	add	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f7fe fca1 	bl	8002806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ec8:	697b      	ldr	r3, [r7, #20]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000010c 	.word	0x2000010c
 8003ed8:	20000110 	.word	0x20000110
 8003edc:	200001ec 	.word	0x200001ec

08003ee0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003eea:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef0:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fce2 	bl	80028c0 <uxListRemove>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f02:	4b24      	ldr	r3, [pc, #144]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	4b21      	ldr	r3, [pc, #132]	@ (8003f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4013      	ands	r3, r2
 8003f16:	4a20      	ldr	r2, [pc, #128]	@ (8003f98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d10a      	bne.n	8003f38 <prvAddCurrentTaskToDelayedList+0x58>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	481a      	ldr	r0, [pc, #104]	@ (8003f9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f32:	f7fe fc68 	bl	8002806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f36:	e026      	b.n	8003f86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f40:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d209      	bcs.n	8003f64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f50:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7fe fc76 	bl	800284e <vListInsert>
}
 8003f62:	e010      	b.n	8003f86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f64:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7fe fc6c 	bl	800284e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f76:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d202      	bcs.n	8003f86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f80:	4a09      	ldr	r2, [pc, #36]	@ (8003fa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6013      	str	r3, [r2, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200001e8 	.word	0x200001e8
 8003f94:	2000010c 	.word	0x2000010c
 8003f98:	200001ec 	.word	0x200001ec
 8003f9c:	200001d0 	.word	0x200001d0
 8003fa0:	200001a0 	.word	0x200001a0
 8003fa4:	2000019c 	.word	0x2000019c
 8003fa8:	20000204 	.word	0x20000204

08003fac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fb6:	f000 fae1 	bl	800457c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <xTimerCreateTimerTask+0x58>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003fc2:	4b11      	ldr	r3, [pc, #68]	@ (8004008 <xTimerCreateTimerTask+0x5c>)
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003fd0:	490e      	ldr	r1, [pc, #56]	@ (800400c <xTimerCreateTimerTask+0x60>)
 8003fd2:	480f      	ldr	r0, [pc, #60]	@ (8004010 <xTimerCreateTimerTask+0x64>)
 8003fd4:	f7ff f956 	bl	8003284 <xTaskCreate>
 8003fd8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	603b      	str	r3, [r7, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003ff8:	687b      	ldr	r3, [r7, #4]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000240 	.word	0x20000240
 8004008:	20000244 	.word	0x20000244
 800400c:	08004eec 	.word	0x08004eec
 8004010:	0800414d 	.word	0x0800414d

08004014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	@ 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <xTimerGenericCommand+0x30>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	623b      	str	r3, [r7, #32]
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <xTimerGenericCommand+0x98>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02a      	beq.n	80040a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b05      	cmp	r3, #5
 800405c:	dc18      	bgt.n	8004090 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800405e:	f7ff fe99 	bl	8003d94 <xTaskGetSchedulerState>
 8004062:	4603      	mov	r3, r0
 8004064:	2b02      	cmp	r3, #2
 8004066:	d109      	bne.n	800407c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004068:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <xTimerGenericCommand+0x98>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	f107 0114 	add.w	r1, r7, #20
 8004070:	2300      	movs	r3, #0
 8004072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004074:	f7fe fd18 	bl	8002aa8 <xQueueGenericSend>
 8004078:	6278      	str	r0, [r7, #36]	@ 0x24
 800407a:	e012      	b.n	80040a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <xTimerGenericCommand+0x98>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	f107 0114 	add.w	r1, r7, #20
 8004084:	2300      	movs	r3, #0
 8004086:	2200      	movs	r2, #0
 8004088:	f7fe fd0e 	bl	8002aa8 <xQueueGenericSend>
 800408c:	6278      	str	r0, [r7, #36]	@ 0x24
 800408e:	e008      	b.n	80040a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <xTimerGenericCommand+0x98>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	f107 0114 	add.w	r1, r7, #20
 8004098:	2300      	movs	r3, #0
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	f7fe fe06 	bl	8002cac <xQueueGenericSendFromISR>
 80040a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	@ 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000240 	.word	0x20000240

080040b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ba:	4b23      	ldr	r3, [pc, #140]	@ (8004148 <prvProcessExpiredTimer+0x98>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fbf9 	bl	80028c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d023      	beq.n	8004124 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	18d1      	adds	r1, r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	6978      	ldr	r0, [r7, #20]
 80040ea:	f000 f8d5 	bl	8004298 <prvInsertTimerInActiveList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f4:	2300      	movs	r3, #0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	2100      	movs	r1, #0
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7ff ff88 	bl	8004014 <xTimerGenericCommand>
 8004104:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d114      	bne.n	8004136 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60fb      	str	r3, [r7, #12]
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	6978      	ldr	r0, [r7, #20]
 800413c:	4798      	blx	r3
}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000238 	.word	0x20000238

0800414c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004154:	f107 0308 	add.w	r3, r7, #8
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f859 	bl	8004210 <prvGetNextExpireTime>
 800415e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4619      	mov	r1, r3
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f805 	bl	8004174 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800416a:	f000 f8d7 	bl	800431c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800416e:	bf00      	nop
 8004170:	e7f0      	b.n	8004154 <prvTimerTask+0x8>
	...

08004174 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800417e:	f7ff fa45 	bl	800360c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004182:	f107 0308 	add.w	r3, r7, #8
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f866 	bl	8004258 <prvSampleTimeNow>
 800418c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d130      	bne.n	80041f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <prvProcessTimerOrBlockTask+0x3c>
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d806      	bhi.n	80041b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041a2:	f7ff fa41 	bl	8003628 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff81 	bl	80040b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041ae:	e024      	b.n	80041fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041b6:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <prvProcessTimerOrBlockTask+0x90>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <prvProcessTimerOrBlockTask+0x50>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <prvProcessTimerOrBlockTask+0x52>
 80041c4:	2300      	movs	r3, #0
 80041c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004208 <prvProcessTimerOrBlockTask+0x94>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	f7ff f821 	bl	800321c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041da:	f7ff fa25 	bl	8003628 <xTaskResumeAll>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <prvProcessTimerOrBlockTask+0x98>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	f3bf 8f6f 	isb	sy
}
 80041f4:	e001      	b.n	80041fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041f6:	f7ff fa17 	bl	8003628 <xTaskResumeAll>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	2000023c 	.word	0x2000023c
 8004208:	20000240 	.word	0x20000240
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004218:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <prvGetNextExpireTime+0x44>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <prvGetNextExpireTime+0x16>
 8004222:	2201      	movs	r2, #1
 8004224:	e000      	b.n	8004228 <prvGetNextExpireTime+0x18>
 8004226:	2200      	movs	r2, #0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <prvGetNextExpireTime+0x44>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e001      	b.n	8004244 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000238 	.word	0x20000238

08004258 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004260:	f7ff fa80 	bl	8003764 <xTaskGetTickCount>
 8004264:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <prvSampleTimeNow+0x3c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d205      	bcs.n	800427c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004270:	f000 f91e 	bl	80044b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e002      	b.n	8004282 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004282:	4a04      	ldr	r2, [pc, #16]	@ (8004294 <prvSampleTimeNow+0x3c>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000248 	.word	0x20000248

08004298 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d812      	bhi.n	80042e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad2      	subs	r2, r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e01b      	b.n	800430a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042d2:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <prvInsertTimerInActiveList+0x7c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3304      	adds	r3, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f7fe fab6 	bl	800284e <vListInsert>
 80042e2:	e012      	b.n	800430a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d206      	bcs.n	80042fa <prvInsertTimerInActiveList+0x62>
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e007      	b.n	800430a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <prvInsertTimerInActiveList+0x80>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f7fe faa2 	bl	800284e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800430a:	697b      	ldr	r3, [r7, #20]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	2000023c 	.word	0x2000023c
 8004318:	20000238 	.word	0x20000238

0800431c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	@ 0x30
 8004320:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004322:	e0b2      	b.n	800448a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f2c0 80af 	blt.w	800448a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fabf 	bl	80028c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff87 	bl	8004258 <prvSampleTimeNow>
 800434a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b09      	cmp	r3, #9
 8004350:	f200 8098 	bhi.w	8004484 <prvProcessReceivedCommands+0x168>
 8004354:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <prvProcessReceivedCommands+0x40>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004385 	.word	0x08004385
 8004360:	08004385 	.word	0x08004385
 8004364:	08004385 	.word	0x08004385
 8004368:	080043fb 	.word	0x080043fb
 800436c:	0800440f 	.word	0x0800440f
 8004370:	0800445b 	.word	0x0800445b
 8004374:	08004385 	.word	0x08004385
 8004378:	08004385 	.word	0x08004385
 800437c:	080043fb 	.word	0x080043fb
 8004380:	0800440f 	.word	0x0800440f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	18d1      	adds	r1, r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043a4:	f7ff ff78 	bl	8004298 <prvInsertTimerInActiveList>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d06c      	beq.n	8004488 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d061      	beq.n	8004488 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	441a      	add	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2300      	movs	r3, #0
 80043d2:	2100      	movs	r1, #0
 80043d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043d6:	f7ff fe1d 	bl	8004014 <xTimerGenericCommand>
 80043da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d152      	bne.n	8004488 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	61bb      	str	r3, [r7, #24]
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	e7fd      	b.n	80043f6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800440c:	e03d      	b.n	800448a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	b2da      	uxtb	r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	617b      	str	r3, [r7, #20]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	18d1      	adds	r1, r2, r3
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004454:	f7ff ff20 	bl	8004298 <prvInsertTimerInActiveList>
					break;
 8004458:	e017      	b.n	800448a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d103      	bne.n	8004470 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004468:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800446a:	f000 fbd7 	bl	8004c1c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800446e:	e00c      	b.n	800448a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004482:	e002      	b.n	800448a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004484:	bf00      	nop
 8004486:	e000      	b.n	800448a <prvProcessReceivedCommands+0x16e>
					break;
 8004488:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <prvProcessReceivedCommands+0x190>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f107 0108 	add.w	r1, r7, #8
 8004492:	2200      	movs	r2, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fca5 	bl	8002de4 <xQueueReceive>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	f47f af41 	bne.w	8004324 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	@ 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000240 	.word	0x20000240

080044b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044b6:	e049      	b.n	800454c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004574 <prvSwitchTimerLists+0xc4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <prvSwitchTimerLists+0xc4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe f9f5 	bl	80028c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02f      	beq.n	800454c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90e      	bls.n	800451c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <prvSwitchTimerLists+0xc4>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7fe f99a 	bl	800284e <vListInsert>
 800451a:	e017      	b.n	800454c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800451c:	2300      	movs	r3, #0
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2300      	movs	r3, #0
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	2100      	movs	r1, #0
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff fd74 	bl	8004014 <xTimerGenericCommand>
 800452c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	603b      	str	r3, [r7, #0]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <prvSwitchTimerLists+0xc4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1b0      	bne.n	80044b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004556:	4b07      	ldr	r3, [pc, #28]	@ (8004574 <prvSwitchTimerLists+0xc4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <prvSwitchTimerLists+0xc8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a04      	ldr	r2, [pc, #16]	@ (8004574 <prvSwitchTimerLists+0xc4>)
 8004562:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004564:	4a04      	ldr	r2, [pc, #16]	@ (8004578 <prvSwitchTimerLists+0xc8>)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	6013      	str	r3, [r2, #0]
}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000238 	.word	0x20000238
 8004578:	2000023c 	.word	0x2000023c

0800457c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004580:	f000 f962 	bl	8004848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004584:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <prvCheckForValidListAndQueue+0x54>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11d      	bne.n	80045c8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800458c:	4811      	ldr	r0, [pc, #68]	@ (80045d4 <prvCheckForValidListAndQueue+0x58>)
 800458e:	f7fe f90d 	bl	80027ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004592:	4811      	ldr	r0, [pc, #68]	@ (80045d8 <prvCheckForValidListAndQueue+0x5c>)
 8004594:	f7fe f90a 	bl	80027ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <prvCheckForValidListAndQueue+0x60>)
 800459a:	4a0e      	ldr	r2, [pc, #56]	@ (80045d4 <prvCheckForValidListAndQueue+0x58>)
 800459c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800459e:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <prvCheckForValidListAndQueue+0x64>)
 80045a0:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <prvCheckForValidListAndQueue+0x5c>)
 80045a2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80045a4:	2200      	movs	r2, #0
 80045a6:	210c      	movs	r1, #12
 80045a8:	200a      	movs	r0, #10
 80045aa:	f7fe fa1d 	bl	80029e8 <xQueueGenericCreate>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a07      	ldr	r2, [pc, #28]	@ (80045d0 <prvCheckForValidListAndQueue+0x54>)
 80045b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <prvCheckForValidListAndQueue+0x54>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <prvCheckForValidListAndQueue+0x54>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4908      	ldr	r1, [pc, #32]	@ (80045e4 <prvCheckForValidListAndQueue+0x68>)
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fe00 	bl	80031c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045c8:	f000 f970 	bl	80048ac <vPortExitCritical>
}
 80045cc:	bf00      	nop
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000240 	.word	0x20000240
 80045d4:	20000210 	.word	0x20000210
 80045d8:	20000224 	.word	0x20000224
 80045dc:	20000238 	.word	0x20000238
 80045e0:	2000023c 	.word	0x2000023c
 80045e4:	08004ef4 	.word	0x08004ef4

080045e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3b04      	subs	r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b04      	subs	r3, #4
 8004606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 0201 	bic.w	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b04      	subs	r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004618:	4a0c      	ldr	r2, [pc, #48]	@ (800464c <pxPortInitialiseStack+0x64>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b14      	subs	r3, #20
 8004622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b04      	subs	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f06f 0202 	mvn.w	r2, #2
 8004636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3b20      	subs	r3, #32
 800463c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800463e:	68fb      	ldr	r3, [r7, #12]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	08004651 	.word	0x08004651

08004650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800465a:	4b13      	ldr	r3, [pc, #76]	@ (80046a8 <prvTaskExitError+0x58>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d00b      	beq.n	800467c <prvTaskExitError+0x2c>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60fb      	str	r3, [r7, #12]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <prvTaskExitError+0x28>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60bb      	str	r3, [r7, #8]
}
 800468e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004690:	bf00      	nop
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0fc      	beq.n	8004692 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2000000c 	.word	0x2000000c
 80046ac:	00000000 	.word	0x00000000

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	4770      	bx	lr
 80046cc:	f3af 8000 	nop.w

080046d0 <pxCurrentTCBConst2>:
 80046d0:	2000010c 	.word	0x2000010c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046d8:	4808      	ldr	r0, [pc, #32]	@ (80046fc <prvPortStartFirstTask+0x24>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f380 8814 	msr	CONTROL, r0
 80046ea:	b662      	cpsie	i
 80046ec:	b661      	cpsie	f
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	df00      	svc	0
 80046f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046fa:	bf00      	nop
 80046fc:	e000ed08 	.word	0xe000ed08

08004700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004706:	4b47      	ldr	r3, [pc, #284]	@ (8004824 <xPortStartScheduler+0x124>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a47      	ldr	r2, [pc, #284]	@ (8004828 <xPortStartScheduler+0x128>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10b      	bne.n	8004728 <xPortStartScheduler+0x28>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	613b      	str	r3, [r7, #16]
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	e7fd      	b.n	8004724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004728:	4b3e      	ldr	r3, [pc, #248]	@ (8004824 <xPortStartScheduler+0x124>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a3f      	ldr	r2, [pc, #252]	@ (800482c <xPortStartScheduler+0x12c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10b      	bne.n	800474a <xPortStartScheduler+0x4a>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800474a:	4b39      	ldr	r3, [pc, #228]	@ (8004830 <xPortStartScheduler+0x130>)
 800474c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	22ff      	movs	r2, #255	@ 0xff
 800475a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4b31      	ldr	r3, [pc, #196]	@ (8004834 <xPortStartScheduler+0x134>)
 8004770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004772:	4b31      	ldr	r3, [pc, #196]	@ (8004838 <xPortStartScheduler+0x138>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004778:	e009      	b.n	800478e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800477a:	4b2f      	ldr	r3, [pc, #188]	@ (8004838 <xPortStartScheduler+0x138>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	4a2d      	ldr	r2, [pc, #180]	@ (8004838 <xPortStartScheduler+0x138>)
 8004782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b80      	cmp	r3, #128	@ 0x80
 8004798:	d0ef      	beq.n	800477a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800479a:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <xPortStartScheduler+0x138>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1c3 0307 	rsb	r3, r3, #7
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d00b      	beq.n	80047be <xPortStartScheduler+0xbe>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60bb      	str	r3, [r7, #8]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047be:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <xPortStartScheduler+0x138>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004838 <xPortStartScheduler+0x138>)
 80047c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <xPortStartScheduler+0x138>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047d0:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <xPortStartScheduler+0x138>)
 80047d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047dc:	4b17      	ldr	r3, [pc, #92]	@ (800483c <xPortStartScheduler+0x13c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a16      	ldr	r2, [pc, #88]	@ (800483c <xPortStartScheduler+0x13c>)
 80047e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047e8:	4b14      	ldr	r3, [pc, #80]	@ (800483c <xPortStartScheduler+0x13c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a13      	ldr	r2, [pc, #76]	@ (800483c <xPortStartScheduler+0x13c>)
 80047ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80047f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047f4:	f000 f8da 	bl	80049ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047f8:	4b11      	ldr	r3, [pc, #68]	@ (8004840 <xPortStartScheduler+0x140>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047fe:	f000 f8f9 	bl	80049f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <xPortStartScheduler+0x144>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0f      	ldr	r2, [pc, #60]	@ (8004844 <xPortStartScheduler+0x144>)
 8004808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800480c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800480e:	f7ff ff63 	bl	80046d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004812:	f7ff f871 	bl	80038f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004816:	f7ff ff1b 	bl	8004650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	e000ed00 	.word	0xe000ed00
 8004828:	410fc271 	.word	0x410fc271
 800482c:	410fc270 	.word	0x410fc270
 8004830:	e000e400 	.word	0xe000e400
 8004834:	2000024c 	.word	0x2000024c
 8004838:	20000250 	.word	0x20000250
 800483c:	e000ed20 	.word	0xe000ed20
 8004840:	2000000c 	.word	0x2000000c
 8004844:	e000ef34 	.word	0xe000ef34

08004848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	607b      	str	r3, [r7, #4]
}
 8004860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <vPortEnterCritical+0x5c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	4a0e      	ldr	r2, [pc, #56]	@ (80048a4 <vPortEnterCritical+0x5c>)
 800486a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800486c:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <vPortEnterCritical+0x5c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d110      	bne.n	8004896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004874:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <vPortEnterCritical+0x60>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <vPortEnterCritical+0x4e>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <vPortEnterCritical+0x4a>
	}
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048b2:	4b12      	ldr	r3, [pc, #72]	@ (80048fc <vPortExitCritical+0x50>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10b      	bne.n	80048d2 <vPortExitCritical+0x26>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	607b      	str	r3, [r7, #4]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048d2:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <vPortExitCritical+0x50>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	4a08      	ldr	r2, [pc, #32]	@ (80048fc <vPortExitCritical+0x50>)
 80048da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048dc:	4b07      	ldr	r3, [pc, #28]	@ (80048fc <vPortExitCritical+0x50>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <vPortExitCritical+0x44>
 80048e4:	2300      	movs	r3, #0
 80048e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f383 8811 	msr	BASEPRI, r3
}
 80048ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	2000000c 	.word	0x2000000c

08004900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004900:	f3ef 8009 	mrs	r0, PSP
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <pxCurrentTCBConst>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	f01e 0f10 	tst.w	lr, #16
 8004910:	bf08      	it	eq
 8004912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	6010      	str	r0, [r2, #0]
 800491c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004924:	f380 8811 	msr	BASEPRI, r0
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f7fe ffe2 	bl	80038f8 <vTaskSwitchContext>
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f380 8811 	msr	BASEPRI, r0
 800493c:	bc09      	pop	{r0, r3}
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	6808      	ldr	r0, [r1, #0]
 8004942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004946:	f01e 0f10 	tst.w	lr, #16
 800494a:	bf08      	it	eq
 800494c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004950:	f380 8809 	msr	PSP, r0
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst>:
 8004960:	2000010c 	.word	0x2000010c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004982:	f7fe feff 	bl	8003784 <xTaskIncrementTick>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <SysTick_Handler+0x40>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f383 8811 	msr	BASEPRI, r3
}
 800499e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <vPortSetupTimerInterrupt+0x38>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <vPortSetupTimerInterrupt+0x3c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <vPortSetupTimerInterrupt+0x40>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <vPortSetupTimerInterrupt+0x44>)
 80049ca:	3b01      	subs	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000e010 	.word	0xe000e010
 80049e4:	e000e018 	.word	0xe000e018
 80049e8:	20000000 	.word	0x20000000
 80049ec:	10624dd3 	.word	0x10624dd3
 80049f0:	e000e014 	.word	0xe000e014

080049f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a04 <vPortEnableVFP+0x10>
 80049f8:	6801      	ldr	r1, [r0, #0]
 80049fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80049fe:	6001      	str	r1, [r0, #0]
 8004a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a02:	bf00      	nop
 8004a04:	e000ed88 	.word	0xe000ed88

08004a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a0e:	f3ef 8305 	mrs	r3, IPSR
 8004a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d915      	bls.n	8004a46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a1a:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <vPortValidateInterruptPriority+0x74>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a24:	4b16      	ldr	r3, [pc, #88]	@ (8004a80 <vPortValidateInterruptPriority+0x78>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	7afa      	ldrb	r2, [r7, #11]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d20b      	bcs.n	8004a46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a46:	4b0f      	ldr	r3, [pc, #60]	@ (8004a84 <vPortValidateInterruptPriority+0x7c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <vPortValidateInterruptPriority+0x80>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90b      	bls.n	8004a6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	603b      	str	r3, [r7, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <vPortValidateInterruptPriority+0x62>
	}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000e3f0 	.word	0xe000e3f0
 8004a80:	2000024c 	.word	0x2000024c
 8004a84:	e000ed0c 	.word	0xe000ed0c
 8004a88:	20000250 	.word	0x20000250

08004a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	@ 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a98:	f7fe fdb8 	bl	800360c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c08 <pvPortMalloc+0x17c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004aa4:	f000 f916 	bl	8004cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004aa8:	4b58      	ldr	r3, [pc, #352]	@ (8004c0c <pvPortMalloc+0x180>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 8090 	bne.w	8004bd6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01e      	beq.n	8004afa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004abc:	2208      	movs	r2, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d015      	beq.n	8004afa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f023 0307 	bic.w	r3, r3, #7
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <pvPortMalloc+0x6e>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	617b      	str	r3, [r7, #20]
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d06a      	beq.n	8004bd6 <pvPortMalloc+0x14a>
 8004b00:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <pvPortMalloc+0x184>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d865      	bhi.n	8004bd6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b0a:	4b42      	ldr	r3, [pc, #264]	@ (8004c14 <pvPortMalloc+0x188>)
 8004b0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b0e:	4b41      	ldr	r3, [pc, #260]	@ (8004c14 <pvPortMalloc+0x188>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b14:	e004      	b.n	8004b20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d903      	bls.n	8004b32 <pvPortMalloc+0xa6>
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f1      	bne.n	8004b16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b32:	4b35      	ldr	r3, [pc, #212]	@ (8004c08 <pvPortMalloc+0x17c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d04c      	beq.n	8004bd6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2208      	movs	r2, #8
 8004b42:	4413      	add	r3, r2
 8004b44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	1ad2      	subs	r2, r2, r3
 8004b56:	2308      	movs	r3, #8
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d920      	bls.n	8004ba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <pvPortMalloc+0xfc>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	613b      	str	r3, [r7, #16]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b9a:	69b8      	ldr	r0, [r7, #24]
 8004b9c:	f000 f8fc 	bl	8004d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <pvPortMalloc+0x184>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	4a19      	ldr	r2, [pc, #100]	@ (8004c10 <pvPortMalloc+0x184>)
 8004bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bae:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <pvPortMalloc+0x184>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b19      	ldr	r3, [pc, #100]	@ (8004c18 <pvPortMalloc+0x18c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d203      	bcs.n	8004bc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <pvPortMalloc+0x184>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	@ (8004c18 <pvPortMalloc+0x18c>)
 8004bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4b11      	ldr	r3, [pc, #68]	@ (8004c0c <pvPortMalloc+0x180>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bd6:	f7fe fd27 	bl	8003628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <pvPortMalloc+0x170>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <pvPortMalloc+0x16c>
	return pvReturn;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3728      	adds	r7, #40	@ 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20012e5c 	.word	0x20012e5c
 8004c0c:	20012e68 	.word	0x20012e68
 8004c10:	20012e60 	.word	0x20012e60
 8004c14:	20012e54 	.word	0x20012e54
 8004c18:	20012e64 	.word	0x20012e64

08004c1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d04a      	beq.n	8004cc4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c2e:	2308      	movs	r3, #8
 8004c30:	425b      	negs	r3, r3
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4413      	add	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4b22      	ldr	r3, [pc, #136]	@ (8004ccc <vPortFree+0xb0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <vPortFree+0x46>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	60fb      	str	r3, [r7, #12]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <vPortFree+0x66>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4b11      	ldr	r3, [pc, #68]	@ (8004ccc <vPortFree+0xb0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <vPortFree+0xb0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ca8:	f7fe fcb0 	bl	800360c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <vPortFree+0xb4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4a06      	ldr	r2, [pc, #24]	@ (8004cd0 <vPortFree+0xb4>)
 8004cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cba:	6938      	ldr	r0, [r7, #16]
 8004cbc:	f000 f86c 	bl	8004d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cc0:	f7fe fcb2 	bl	8003628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20012e68 	.word	0x20012e68
 8004cd0:	20012e60 	.word	0x20012e60

08004cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cda:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ce0:	4b27      	ldr	r3, [pc, #156]	@ (8004d80 <prvHeapInit+0xac>)
 8004ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3307      	adds	r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0307 	bic.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	4a1f      	ldr	r2, [pc, #124]	@ (8004d80 <prvHeapInit+0xac>)
 8004d04:	4413      	add	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d84 <prvHeapInit+0xb0>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	@ (8004d84 <prvHeapInit+0xb0>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d20:	2208      	movs	r2, #8
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a15      	ldr	r2, [pc, #84]	@ (8004d88 <prvHeapInit+0xb4>)
 8004d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d36:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <prvHeapInit+0xb4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <prvHeapInit+0xb4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <prvHeapInit+0xb4>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <prvHeapInit+0xb8>)
 8004d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a09      	ldr	r2, [pc, #36]	@ (8004d90 <prvHeapInit+0xbc>)
 8004d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d6c:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <prvHeapInit+0xc0>)
 8004d6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000254 	.word	0x20000254
 8004d84:	20012e54 	.word	0x20012e54
 8004d88:	20012e5c 	.word	0x20012e5c
 8004d8c:	20012e64 	.word	0x20012e64
 8004d90:	20012e60 	.word	0x20012e60
 8004d94:	20012e68 	.word	0x20012e68

08004d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <prvInsertBlockIntoFreeList+0xac>)
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e002      	b.n	8004dac <prvInsertBlockIntoFreeList+0x14>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d8f7      	bhi.n	8004da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d108      	bne.n	8004dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d118      	bne.n	8004e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b15      	ldr	r3, [pc, #84]	@ (8004e48 <prvInsertBlockIntoFreeList+0xb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d00d      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e008      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <prvInsertBlockIntoFreeList+0xb0>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e003      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d002      	beq.n	8004e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20012e54 	.word	0x20012e54
 8004e48:	20012e5c 	.word	0x20012e5c

08004e4c <memset>:
 8004e4c:	4402      	add	r2, r0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <memset+0xa>
 8004e54:	4770      	bx	lr
 8004e56:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5a:	e7f9      	b.n	8004e50 <memset+0x4>

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e94 <__libc_init_array+0x38>)
 8004e60:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	2600      	movs	r6, #0
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e9c <__libc_init_array+0x40>)
 8004e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e70:	f000 f826 	bl	8004ec0 <_init>
 8004e74:	1b64      	subs	r4, r4, r5
 8004e76:	10a4      	asrs	r4, r4, #2
 8004e78:	2600      	movs	r6, #0
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08004f1c 	.word	0x08004f1c
 8004e98:	08004f1c 	.word	0x08004f1c
 8004e9c:	08004f1c 	.word	0x08004f1c
 8004ea0:	08004f20 	.word	0x08004f20

08004ea4 <memcpy>:
 8004ea4:	440a      	add	r2, r1
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eac:	d100      	bne.n	8004eb0 <memcpy+0xc>
 8004eae:	4770      	bx	lr
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eba:	4291      	cmp	r1, r2
 8004ebc:	d1f9      	bne.n	8004eb2 <memcpy+0xe>
 8004ebe:	bd10      	pop	{r4, pc}

08004ec0 <_init>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr

08004ecc <_fini>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr
