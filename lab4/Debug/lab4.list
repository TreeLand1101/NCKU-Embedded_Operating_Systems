
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004798  08004798  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047a0  080047a0  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a0  080047a0  000057a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080047a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006064  2**0
                  CONTENTS
 10 .bss          0000171c  20000064  20000064  00006064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001780  20001780  00006064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fae1  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255e  00000000  00000000  00015b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  000180d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6d  00000000  00000000  00018f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ce1  00000000  00000000  00019aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118eb  00000000  00000000  0003b7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1bd7  00000000  00000000  0004d0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ec90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004204  00000000  00000000  0011ecd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00122ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046a8 	.word	0x080046a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080046a8 	.word	0x080046a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <red_LED_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void red_LED_task(void *pvParameters)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000578:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <red_LED_task+0x20>)
 800057e:	f000 ff06 	bl	800138e <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000582:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000586:	f002 fd3f 	bl	8003008 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800058a:	bf00      	nop
 800058c:	e7f4      	b.n	8000578 <red_LED_task+0x8>
 800058e:	bf00      	nop
 8000590:	40020c00 	.word	0x40020c00

08000594 <green_LED_task>:
	}
}

void green_LED_task(void *pvParameters)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800059c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <green_LED_task+0x20>)
 80005a2:	f000 fef4 	bl	800138e <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005aa:	f002 fd2d 	bl	8003008 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005ae:	bf00      	nop
 80005b0:	e7f4      	b.n	800059c <green_LED_task+0x8>
 80005b2:	bf00      	nop
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <task1>:
	}
}

void task1(void *pvParameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f002 fc91 	bl	8002ee8 <vTaskDelete>
 80005c6:	e7fb      	b.n	80005c0 <task1+0x8>

080005c8 <task2>:
    }
}

void task2(void *pvParameters)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f002 fc89 	bl	8002ee8 <vTaskDelete>
 80005d6:	e7fb      	b.n	80005d0 <task2+0x8>

080005d8 <task3>:
    }
}

void task3(void *pvParameters)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f002 fc81 	bl	8002ee8 <vTaskDelete>
 80005e6:	e7fb      	b.n	80005e0 <task3+0x8>

080005e8 <print_task>:
    }
}

void print_task(void *pvParameters)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    while (1) {
		vPrintFreeList();
 80005f0:	f003 fbaa 	bl	8003d48 <vPrintFreeList>
 80005f4:	e7fc      	b.n	80005f0 <print_task+0x8>
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fbed 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f85d 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8ef 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f8c3 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(red_LED_task, "RED_LED", 100, NULL, 0, NULL);
 800060e:	2300      	movs	r3, #0
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2300      	movs	r3, #0
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	2264      	movs	r2, #100	@ 0x64
 800061a:	491d      	ldr	r1, [pc, #116]	@ (8000690 <main+0x98>)
 800061c:	481d      	ldr	r0, [pc, #116]	@ (8000694 <main+0x9c>)
 800061e:	f002 fafd 	bl	8002c1c <xTaskCreate>
  xTaskCreate(task1, "TASK1", 50, NULL, 0, NULL);
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2300      	movs	r3, #0
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2232      	movs	r2, #50	@ 0x32
 800062e:	491a      	ldr	r1, [pc, #104]	@ (8000698 <main+0xa0>)
 8000630:	481a      	ldr	r0, [pc, #104]	@ (800069c <main+0xa4>)
 8000632:	f002 faf3 	bl	8002c1c <xTaskCreate>
  xTaskCreate(task2, "TASK2", 30, NULL, 0, NULL);
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	221e      	movs	r2, #30
 8000642:	4917      	ldr	r1, [pc, #92]	@ (80006a0 <main+0xa8>)
 8000644:	4817      	ldr	r0, [pc, #92]	@ (80006a4 <main+0xac>)
 8000646:	f002 fae9 	bl	8002c1c <xTaskCreate>
  xTaskCreate(green_LED_task, "GREEN_LED", 130, NULL, 0, NULL);
 800064a:	2300      	movs	r3, #0
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2300      	movs	r3, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2282      	movs	r2, #130	@ 0x82
 8000656:	4914      	ldr	r1, [pc, #80]	@ (80006a8 <main+0xb0>)
 8000658:	4814      	ldr	r0, [pc, #80]	@ (80006ac <main+0xb4>)
 800065a:	f002 fadf 	bl	8002c1c <xTaskCreate>
  xTaskCreate(task3, "TASK3", 40, NULL, 0, NULL);
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2300      	movs	r3, #0
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2228      	movs	r2, #40	@ 0x28
 800066a:	4911      	ldr	r1, [pc, #68]	@ (80006b0 <main+0xb8>)
 800066c:	4811      	ldr	r0, [pc, #68]	@ (80006b4 <main+0xbc>)
 800066e:	f002 fad5 	bl	8002c1c <xTaskCreate>
  xTaskCreate(print_task, "PRINT", 130, NULL, 0, NULL);
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2300      	movs	r3, #0
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2282      	movs	r2, #130	@ 0x82
 800067e:	490e      	ldr	r1, [pc, #56]	@ (80006b8 <main+0xc0>)
 8000680:	480e      	ldr	r0, [pc, #56]	@ (80006bc <main+0xc4>)
 8000682:	f002 facb 	bl	8002c1c <xTaskCreate>
  vTaskStartScheduler();
 8000686:	f002 fcf5 	bl	8003074 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <main+0x92>
 800068e:	bf00      	nop
 8000690:	080046c0 	.word	0x080046c0
 8000694:	08000571 	.word	0x08000571
 8000698:	080046c8 	.word	0x080046c8
 800069c:	080005b9 	.word	0x080005b9
 80006a0:	080046d0 	.word	0x080046d0
 80006a4:	080005c9 	.word	0x080005c9
 80006a8:	080046d8 	.word	0x080046d8
 80006ac:	08000595 	.word	0x08000595
 80006b0:	080046e4 	.word	0x080046e4
 80006b4:	080005d9 	.word	0x080005d9
 80006b8:	080046ec 	.word	0x080046ec
 80006bc:	080005e9 	.word	0x080005e9

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fb62 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	@ (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000734:	2332      	movs	r3, #50	@ 0x32
 8000736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000738:	2304      	movs	r3, #4
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe3d 	bl	80013c4 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f9ba 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f89e 	bl	80018b4 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f9a3 	bl	8000ac8 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 fd66 	bl	800229c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f977 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000080 	.word	0x20000080
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4ba2      	ldr	r3, [pc, #648]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4aa1      	ldr	r2, [pc, #644]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b9f      	ldr	r3, [pc, #636]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b9b      	ldr	r3, [pc, #620]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a9a      	ldr	r2, [pc, #616]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b98      	ldr	r3, [pc, #608]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b94      	ldr	r3, [pc, #592]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a93      	ldr	r2, [pc, #588]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b91      	ldr	r3, [pc, #580]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b8d      	ldr	r3, [pc, #564]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a8c      	ldr	r2, [pc, #560]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b8a      	ldr	r3, [pc, #552]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b86      	ldr	r3, [pc, #536]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a85      	ldr	r2, [pc, #532]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b83      	ldr	r3, [pc, #524]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a7e      	ldr	r2, [pc, #504]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a8c <MX_GPIO_Init+0x2a4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	4879      	ldr	r0, [pc, #484]	@ (8000a90 <MX_GPIO_Init+0x2a8>)
 80008ac:	f000 fd56 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4877      	ldr	r0, [pc, #476]	@ (8000a94 <MX_GPIO_Init+0x2ac>)
 80008b6:	f000 fd51 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008c0:	4875      	ldr	r0, [pc, #468]	@ (8000a98 <MX_GPIO_Init+0x2b0>)
 80008c2:	f000 fd4b 	bl	800135c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	486c      	ldr	r0, [pc, #432]	@ (8000a90 <MX_GPIO_Init+0x2a8>)
 80008de:	f000 fba1 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4866      	ldr	r0, [pc, #408]	@ (8000a94 <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 fb93 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fe:	2308      	movs	r3, #8
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	485e      	ldr	r0, [pc, #376]	@ (8000a94 <MX_GPIO_Init+0x2ac>)
 800091a:	f000 fb83 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	485a      	ldr	r0, [pc, #360]	@ (8000a9c <MX_GPIO_Init+0x2b4>)
 8000934:	f000 fb76 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000938:	2310      	movs	r3, #16
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000948:	2306      	movs	r3, #6
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4852      	ldr	r0, [pc, #328]	@ (8000a9c <MX_GPIO_Init+0x2b4>)
 8000954:	f000 fb66 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000958:	23e0      	movs	r3, #224	@ 0xe0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000968:	2305      	movs	r3, #5
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	484a      	ldr	r0, [pc, #296]	@ (8000a9c <MX_GPIO_Init+0x2b4>)
 8000974:	f000 fb56 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000978:	2304      	movs	r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4845      	ldr	r0, [pc, #276]	@ (8000aa0 <MX_GPIO_Init+0x2b8>)
 800098c:	f000 fb4a 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	483c      	ldr	r0, [pc, #240]	@ (8000aa0 <MX_GPIO_Init+0x2b8>)
 80009ae:	f000 fb39 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4833      	ldr	r0, [pc, #204]	@ (8000a98 <MX_GPIO_Init+0x2b0>)
 80009cc:	f000 fb2a 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e2:	2306      	movs	r3, #6
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4829      	ldr	r0, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0x2ac>)
 80009ee:	f000 fb19 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4825      	ldr	r0, [pc, #148]	@ (8000a9c <MX_GPIO_Init+0x2b4>)
 8000a08:	f000 fb0c 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a0c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	481c      	ldr	r0, [pc, #112]	@ (8000a9c <MX_GPIO_Init+0x2b4>)
 8000a2a:	f000 fafb 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2e:	2320      	movs	r3, #32
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	@ (8000a98 <MX_GPIO_Init+0x2b0>)
 8000a42:	f000 faef 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480f      	ldr	r0, [pc, #60]	@ (8000aa0 <MX_GPIO_Init+0x2b8>)
 8000a64:	f000 fade 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a6c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_GPIO_Init+0x2a8>)
 8000a7e:	f000 fad1 	bl	8001024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3730      	adds	r7, #48	@ 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d101      	bne.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab6:	f000 f9b3 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40001400 	.word	0x40001400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	@ (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12b      	bne.n	8000b9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <HAL_UART_MspInit+0x88>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <HAL_UART_MspInit+0x88>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <HAL_UART_MspInit+0x8c>)
 8000b9a:	f000 fa43 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <HAL_InitTick+0xe4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <HAL_InitTick+0xe4>)
 8000bce:	f043 0320 	orr.w	r3, r3, #32
 8000bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd4:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <HAL_InitTick+0xe4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be0:	f107 0210 	add.w	r2, r7, #16
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f882 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bfa:	f001 f853 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000bfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c00:	e004      	b.n	8000c0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c02:	f001 f84f 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0e:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <HAL_InitTick+0xe8>)
 8000c10:	fba2 2303 	umull	r2, r3, r2, r3
 8000c14:	0c9b      	lsrs	r3, r3, #18
 8000c16:	3b01      	subs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <HAL_InitTick+0xf0>)
 8000c1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c26:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c42:	f001 f889 	bl	8001d58 <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11b      	bne.n	8000c8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c54:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c56:	f001 f8d9 	bl	8001e0c <HAL_TIM_Base_Start_IT>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d111      	bne.n	8000c8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c68:	2037      	movs	r0, #55	@ 0x37
 8000c6a:	f000 f9cd 	bl	8001008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d808      	bhi.n	8000c86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2037      	movs	r0, #55	@ 0x37
 8000c7a:	f000 f9a9 	bl	8000fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_InitTick+0xf4>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e002      	b.n	8000c8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3738      	adds	r7, #56	@ 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	200000c8 	.word	0x200000c8
 8000ca4:	40001400 	.word	0x40001400
 8000ca8:	20000004 	.word	0x20000004

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM7_IRQHandler+0x10>)
 8000cea:	f001 f8ff 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000c8 	.word	0x200000c8

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f003 f83e 	bl	8003da8 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000110 	.word	0x20000110
 8000d60:	20001780 	.word	0x20001780

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fffd 	bl	8003db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc1d 	bl	80005f8 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000dcc:	080047a8 	.word	0x080047a8
  ldr r2, =_sbss
 8000dd0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dd4:	20001780 	.word	0x20001780

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8d8 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fed2 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe60 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000114 	.word	0x20000114

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000114 	.word	0x20000114

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	@ (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	@ (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e16b      	b.n	8001318 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 815a 	bne.w	8001312 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80b4 	beq.w	8001312 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b60      	ldr	r3, [pc, #384]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001334 <HAL_GPIO_Init+0x310>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_GPIO_Init+0x314>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a51      	ldr	r2, [pc, #324]	@ (800133c <HAL_GPIO_Init+0x318>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a50      	ldr	r2, [pc, #320]	@ (8001340 <HAL_GPIO_Init+0x31c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <HAL_GPIO_Init+0x320>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	@ (8001348 <HAL_GPIO_Init+0x324>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	@ (800134c <HAL_GPIO_Init+0x328>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	@ (8001350 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	@ (8001354 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x20a>
 800122a:	2307      	movs	r3, #7
 800122c:	e00e      	b.n	800124c <HAL_GPIO_Init+0x228>
 800122e:	2308      	movs	r3, #8
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001232:	2306      	movs	r3, #6
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x228>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	@ (8001334 <HAL_GPIO_Init+0x310>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <HAL_GPIO_Init+0x334>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a32      	ldr	r2, [pc, #200]	@ (8001358 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <HAL_GPIO_Init+0x334>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae90 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800
 8001354:	40021c00 	.word	0x40021c00
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	400b      	ands	r3, r1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e267      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d075      	beq.n	80014ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d00c      	beq.n	8001408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d112      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b82      	ldr	r3, [pc, #520]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05b      	beq.n	80014cc <HAL_RCC_OscConfig+0x108>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d157      	bne.n	80014cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e242      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x74>
 800142a:	4b76      	ldr	r3, [pc, #472]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a75      	ldr	r2, [pc, #468]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6f      	ldr	r2, [pc, #444]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6c      	ldr	r2, [pc, #432]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 800145c:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a68      	ldr	r2, [pc, #416]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a65      	ldr	r2, [pc, #404]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fce4 	bl	8000e48 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fce0 	bl	8000e48 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	@ 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e207      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xc0>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcd0 	bl	8000e48 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fccc 	bl	8000e48 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1f3      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0xe8>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d063      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1c7      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4937      	ldr	r1, [pc, #220]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e03a      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_RCC_OscConfig+0x244>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fc85 	bl	8000e48 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fc81 	bl	8000e48 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1a8      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4925      	ldr	r1, [pc, #148]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_RCC_OscConfig+0x244>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fc64 	bl	8000e48 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc60 	bl	8000e48 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e187      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d036      	beq.n	800161c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d016      	beq.n	80015e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_RCC_OscConfig+0x248>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fc44 	bl	8000e48 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc40 	bl	8000e48 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e167      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80015d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x200>
 80015e2:	e01b      	b.n	800161c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_RCC_OscConfig+0x248>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fc2d 	bl	8000e48 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	e00e      	b.n	8001610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc29 	bl	8000e48 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d907      	bls.n	8001610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e150      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	42470000 	.word	0x42470000
 800160c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ea      	bne.n	80015f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8097 	beq.w	8001758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b81      	ldr	r3, [pc, #516]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b7d      	ldr	r3, [pc, #500]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a7c      	ldr	r2, [pc, #496]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b7a      	ldr	r3, [pc, #488]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b77      	ldr	r3, [pc, #476]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a73      	ldr	r2, [pc, #460]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fbe9 	bl	8000e48 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fbe5 	bl	8000e48 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e10c      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x2ea>
 80016a0:	4b64      	ldr	r3, [pc, #400]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a63      	ldr	r2, [pc, #396]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x324>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x30c>
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x324>
 80016d0:	4b58      	ldr	r3, [pc, #352]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a57      	ldr	r2, [pc, #348]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
 80016dc:	4b55      	ldr	r3, [pc, #340]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a54      	ldr	r2, [pc, #336]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d015      	beq.n	800171c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fbaa 	bl	8000e48 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fba6 	bl	8000e48 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0cb      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	4b49      	ldr	r3, [pc, #292]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0ee      	beq.n	80016f8 <HAL_RCC_OscConfig+0x334>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fb94 	bl	8000e48 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fb90 	bl	8000e48 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0b5      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ee      	bne.n	8001724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a1 	beq.w	80018a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001762:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d05c      	beq.n	8001828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d141      	bne.n	80017fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb64 	bl	8000e48 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fb60 	bl	8000e48 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e087      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	491b      	ldr	r1, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb39 	bl	8000e48 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fb35 	bl	8000e48 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e05c      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x416>
 80017f8:	e054      	b.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb22 	bl	8000e48 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb1e 	bl	8000e48 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e045      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x444>
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e038      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000
 800183c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_RCC_OscConfig+0x4ec>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d028      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d121      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d11a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001878:	4293      	cmp	r3, r2
 800187a:	d111      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0cc      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d90c      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b65      	ldr	r3, [pc, #404]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b8      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001908:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a58      	ldr	r2, [pc, #352]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a52      	ldr	r2, [pc, #328]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800192a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b50      	ldr	r3, [pc, #320]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494d      	ldr	r1, [pc, #308]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d044      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d119      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e067      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4934      	ldr	r1, [pc, #208]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff fa50 	bl	8000e48 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff fa4c 	bl	8000e48 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20c      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e032      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4916      	ldr	r1, [pc, #88]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490e      	ldr	r1, [pc, #56]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 f821 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	490a      	ldr	r1, [pc, #40]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	5ccb      	ldrb	r3, [r1, r3]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a09      	ldr	r2, [pc, #36]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f8aa 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	0800474c 	.word	0x0800474c
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a84:	b094      	sub	sp, #80	@ 0x50
 8001a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	2300      	movs	r3, #0
 8001a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a98:	4b79      	ldr	r3, [pc, #484]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	f200 80e1 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x3a>
 8001ab2:	e0db      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ab8:	e0db      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aba:	4b73      	ldr	r3, [pc, #460]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001abe:	e0d8      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aca:	4b6d      	ldr	r3, [pc, #436]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	2200      	movs	r2, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001af2:	4622      	mov	r2, r4
 8001af4:	462b      	mov	r3, r5
 8001af6:	f04f 0000 	mov.w	r0, #0
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	0159      	lsls	r1, r3, #5
 8001b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b04:	0150      	lsls	r0, r2, #5
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	1a51      	subs	r1, r2, r1
 8001b0e:	6139      	str	r1, [r7, #16]
 8001b10:	4629      	mov	r1, r5
 8001b12:	eb63 0301 	sbc.w	r3, r3, r1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b24:	4659      	mov	r1, fp
 8001b26:	018b      	lsls	r3, r1, #6
 8001b28:	4651      	mov	r1, sl
 8001b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b2e:	4651      	mov	r1, sl
 8001b30:	018a      	lsls	r2, r1, #6
 8001b32:	4651      	mov	r1, sl
 8001b34:	ebb2 0801 	subs.w	r8, r2, r1
 8001b38:	4659      	mov	r1, fp
 8001b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b52:	4690      	mov	r8, r2
 8001b54:	4699      	mov	r9, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	eb18 0303 	adds.w	r3, r8, r3
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	462b      	mov	r3, r5
 8001b60:	eb49 0303 	adc.w	r3, r9, r3
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b72:	4629      	mov	r1, r5
 8001b74:	024b      	lsls	r3, r1, #9
 8001b76:	4621      	mov	r1, r4
 8001b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	024a      	lsls	r2, r1, #9
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2200      	movs	r2, #0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b90:	f7fe fb76 	bl	8000280 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	099b      	lsrs	r3, r3, #6
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4611      	mov	r1, r2
 8001baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bb8:	4642      	mov	r2, r8
 8001bba:	464b      	mov	r3, r9
 8001bbc:	f04f 0000 	mov.w	r0, #0
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	0159      	lsls	r1, r3, #5
 8001bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bca:	0150      	lsls	r0, r2, #5
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	00eb      	lsls	r3, r5, #3
 8001c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c06:	00e2      	lsls	r2, r4, #3
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	18e3      	adds	r3, r4, r3
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	464b      	mov	r3, r9
 8001c14:	eb45 0303 	adc.w	r3, r5, r3
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	61fa      	str	r2, [r7, #28]
 8001c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c44:	f7fe fb1c 	bl	8000280 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3750      	adds	r7, #80	@ 0x50
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	0800475c 	.word	0x0800475c

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	0800475c 	.word	0x0800475c

08001cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e041      	b.n	8001dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f839 	bl	8001df6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 f9c0 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d001      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04e      	b.n	8001ec2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4e:	d01d      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d010      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	e007      	b.n	8001ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	40000400 	.word	0x40000400
 8001ed8:	40000800 	.word	0x40000800
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40010400 	.word	0x40010400
 8001ee4:	40014000 	.word	0x40014000
 8001ee8:	40001800 	.word	0x40001800

08001eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0202 	mvn.w	r2, #2
 8001f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8d2 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8c4 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8d5 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0204 	mvn.w	r2, #4
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8ac 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f89e 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8af 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0208 	mvn.w	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f886 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f878 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f889 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0210 	mvn.w	r2, #16
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2208      	movs	r2, #8
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f860 	bl	80020e0 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f852 	bl	80020cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f863 	bl	80020f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fd26 	bl	8000aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f906 	bl	8002288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f834 	bl	8002108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0220 	mvn.w	r2, #32
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8d8 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a46      	ldr	r2, [pc, #280]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213a:	d00f      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a43      	ldr	r2, [pc, #268]	@ (800224c <TIM_Base_SetConfig+0x130>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a42      	ldr	r2, [pc, #264]	@ (8002250 <TIM_Base_SetConfig+0x134>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a41      	ldr	r2, [pc, #260]	@ (8002254 <TIM_Base_SetConfig+0x138>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a40      	ldr	r2, [pc, #256]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a35      	ldr	r2, [pc, #212]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d02b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d027      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a32      	ldr	r2, [pc, #200]	@ (800224c <TIM_Base_SetConfig+0x130>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d023      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a31      	ldr	r2, [pc, #196]	@ (8002250 <TIM_Base_SetConfig+0x134>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a30      	ldr	r2, [pc, #192]	@ (8002254 <TIM_Base_SetConfig+0x138>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d017      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <TIM_Base_SetConfig+0x140>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <TIM_Base_SetConfig+0x144>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00f      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002264 <TIM_Base_SetConfig+0x148>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00b      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <TIM_Base_SetConfig+0x14c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <TIM_Base_SetConfig+0x150>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d003      	beq.n	80021ce <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <TIM_Base_SetConfig+0x154>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <TIM_Base_SetConfig+0x12c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0xf8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <TIM_Base_SetConfig+0x13c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f023 0201 	bic.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
  }
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40010400 	.word	0x40010400
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800
 8002268:	40001800 	.word	0x40001800
 800226c:	40001c00 	.word	0x40001c00
 8002270:	40002000 	.word	0x40002000

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e042      	b.n	8002334 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fc2e 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f973 	bl	80025cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	@ 0x28
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b20      	cmp	r3, #32
 800235a:	d175      	bne.n	8002448 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_UART_Transmit+0x2c>
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e06e      	b.n	800244a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2221      	movs	r2, #33	@ 0x21
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800237a:	f7fe fd65 	bl	8000e48 <HAL_GetTick>
 800237e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002394:	d108      	bne.n	80023a8 <HAL_UART_Transmit+0x6c>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d104      	bne.n	80023a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	e003      	b.n	80023b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b0:	e02e      	b.n	8002410 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f848 	bl	8002452 <UART_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e03a      	b.n	800244a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10b      	bne.n	80023f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	3302      	adds	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e007      	b.n	8002402 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	3301      	adds	r3, #1
 8002400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1cb      	bne.n	80023b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2140      	movs	r1, #64	@ 0x40
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f814 	bl	8002452 <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002462:	e03b      	b.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d037      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7fe fcec 	bl	8000e48 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	6a3a      	ldr	r2, [r7, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <UART_WaitOnFlagUntilTimeout+0x30>
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e03a      	b.n	80024fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d020      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d01d      	beq.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d116      	bne.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f81d 	bl	8002504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2208      	movs	r2, #8
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e00f      	b.n	80024fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4013      	ands	r3, r2
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d0b4      	beq.n	8002464 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002504:	b480      	push	{r7}
 8002506:	b095      	sub	sp, #84	@ 0x54
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002516:	e853 3f00 	ldrex	r3, [r3]
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800252c:	643a      	str	r2, [r7, #64]	@ 0x40
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002530:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002532:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002534:	e841 2300 	strex	r3, r2, [r1]
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e5      	bne.n	800250c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3314      	adds	r3, #20
 8002546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	e853 3f00 	ldrex	r3, [r3]
 800254e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3314      	adds	r3, #20
 800255e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002560:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	2b01      	cmp	r3, #1
 800257a:	d119      	bne.n	80025b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	e853 3f00 	ldrex	r3, [r3]
 800258a:	60bb      	str	r3, [r7, #8]
   return(result);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f023 0310 	bic.w	r3, r3, #16
 8002592:	647b      	str	r3, [r7, #68]	@ 0x44
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800259c:	61ba      	str	r2, [r7, #24]
 800259e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	e841 2300 	strex	r3, r2, [r1]
 80025a8:	613b      	str	r3, [r7, #16]
   return(result);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e5      	bne.n	800257c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025be:	bf00      	nop
 80025c0:	3754      	adds	r7, #84	@ 0x54
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d0:	b0c0      	sub	sp, #256	@ 0x100
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	ea40 0301 	orr.w	r3, r0, r1
 80025f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	431a      	orrs	r2, r3
 8002604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	431a      	orrs	r2, r3
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002624:	f021 010c 	bic.w	r1, r1, #12
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002632:	430b      	orrs	r3, r1
 8002634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002646:	6999      	ldr	r1, [r3, #24]
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	ea40 0301 	orr.w	r3, r0, r1
 8002652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b8f      	ldr	r3, [pc, #572]	@ (8002898 <UART_SetConfig+0x2cc>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d005      	beq.n	800266c <UART_SetConfig+0xa0>
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b8d      	ldr	r3, [pc, #564]	@ (800289c <UART_SetConfig+0x2d0>)
 8002668:	429a      	cmp	r2, r3
 800266a:	d104      	bne.n	8002676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800266c:	f7ff fb2e 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002670:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002674:	e003      	b.n	800267e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002676:	f7ff fb15 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800267a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002688:	f040 810c 	bne.w	80028a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800268c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002690:	2200      	movs	r2, #0
 8002692:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002696:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800269a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	1891      	adds	r1, r2, r2
 80026a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026a6:	415b      	adcs	r3, r3
 80026a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026ae:	4621      	mov	r1, r4
 80026b0:	eb12 0801 	adds.w	r8, r2, r1
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb43 0901 	adc.w	r9, r3, r1
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ce:	4690      	mov	r8, r2
 80026d0:	4699      	mov	r9, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	eb18 0303 	adds.w	r3, r8, r3
 80026d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026dc:	462b      	mov	r3, r5
 80026de:	eb49 0303 	adc.w	r3, r9, r3
 80026e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026fa:	460b      	mov	r3, r1
 80026fc:	18db      	adds	r3, r3, r3
 80026fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002700:	4613      	mov	r3, r2
 8002702:	eb42 0303 	adc.w	r3, r2, r3
 8002706:	657b      	str	r3, [r7, #84]	@ 0x54
 8002708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800270c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002710:	f7fd fdb6 	bl	8000280 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4b61      	ldr	r3, [pc, #388]	@ (80028a0 <UART_SetConfig+0x2d4>)
 800271a:	fba3 2302 	umull	r2, r3, r3, r2
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	011c      	lsls	r4, r3, #4
 8002722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002726:	2200      	movs	r2, #0
 8002728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800272c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002734:	4642      	mov	r2, r8
 8002736:	464b      	mov	r3, r9
 8002738:	1891      	adds	r1, r2, r2
 800273a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800273c:	415b      	adcs	r3, r3
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002744:	4641      	mov	r1, r8
 8002746:	eb12 0a01 	adds.w	sl, r2, r1
 800274a:	4649      	mov	r1, r9
 800274c:	eb43 0b01 	adc.w	fp, r3, r1
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800275c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002764:	4692      	mov	sl, r2
 8002766:	469b      	mov	fp, r3
 8002768:	4643      	mov	r3, r8
 800276a:	eb1a 0303 	adds.w	r3, sl, r3
 800276e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002772:	464b      	mov	r3, r9
 8002774:	eb4b 0303 	adc.w	r3, fp, r3
 8002778:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002788:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800278c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002790:	460b      	mov	r3, r1
 8002792:	18db      	adds	r3, r3, r3
 8002794:	643b      	str	r3, [r7, #64]	@ 0x40
 8002796:	4613      	mov	r3, r2
 8002798:	eb42 0303 	adc.w	r3, r2, r3
 800279c:	647b      	str	r3, [r7, #68]	@ 0x44
 800279e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027a6:	f7fd fd6b 	bl	8000280 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <UART_SetConfig+0x2d4>)
 80027b2:	fba3 2301 	umull	r2, r3, r3, r1
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2264      	movs	r2, #100	@ 0x64
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	1acb      	subs	r3, r1, r3
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027c6:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <UART_SetConfig+0x2d4>)
 80027c8:	fba3 2302 	umull	r2, r3, r3, r2
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027d4:	441c      	add	r4, r3
 80027d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027f0:	415b      	adcs	r3, r3
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027f8:	4641      	mov	r1, r8
 80027fa:	1851      	adds	r1, r2, r1
 80027fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80027fe:	4649      	mov	r1, r9
 8002800:	414b      	adcs	r3, r1
 8002802:	637b      	str	r3, [r7, #52]	@ 0x34
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002810:	4659      	mov	r1, fp
 8002812:	00cb      	lsls	r3, r1, #3
 8002814:	4651      	mov	r1, sl
 8002816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281a:	4651      	mov	r1, sl
 800281c:	00ca      	lsls	r2, r1, #3
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	4603      	mov	r3, r0
 8002824:	4642      	mov	r2, r8
 8002826:	189b      	adds	r3, r3, r2
 8002828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800282c:	464b      	mov	r3, r9
 800282e:	460a      	mov	r2, r1
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002844:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800284c:	460b      	mov	r3, r1
 800284e:	18db      	adds	r3, r3, r3
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002852:	4613      	mov	r3, r2
 8002854:	eb42 0303 	adc.w	r3, r2, r3
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800285e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002862:	f7fd fd0d 	bl	8000280 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <UART_SetConfig+0x2d4>)
 800286c:	fba3 1302 	umull	r1, r3, r3, r2
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	2164      	movs	r1, #100	@ 0x64
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3332      	adds	r3, #50	@ 0x32
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <UART_SetConfig+0x2d4>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	f003 0207 	and.w	r2, r3, #7
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4422      	add	r2, r4
 8002892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002894:	e106      	b.n	8002aa4 <UART_SetConfig+0x4d8>
 8002896:	bf00      	nop
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028b6:	4642      	mov	r2, r8
 80028b8:	464b      	mov	r3, r9
 80028ba:	1891      	adds	r1, r2, r2
 80028bc:	6239      	str	r1, [r7, #32]
 80028be:	415b      	adcs	r3, r3
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028c6:	4641      	mov	r1, r8
 80028c8:	1854      	adds	r4, r2, r1
 80028ca:	4649      	mov	r1, r9
 80028cc:	eb43 0501 	adc.w	r5, r3, r1
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	00eb      	lsls	r3, r5, #3
 80028da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028de:	00e2      	lsls	r2, r4, #3
 80028e0:	4614      	mov	r4, r2
 80028e2:	461d      	mov	r5, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	18e3      	adds	r3, r4, r3
 80028e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028ec:	464b      	mov	r3, r9
 80028ee:	eb45 0303 	adc.w	r3, r5, r3
 80028f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002902:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002912:	4629      	mov	r1, r5
 8002914:	008b      	lsls	r3, r1, #2
 8002916:	4621      	mov	r1, r4
 8002918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800291c:	4621      	mov	r1, r4
 800291e:	008a      	lsls	r2, r1, #2
 8002920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002924:	f7fd fcac 	bl	8000280 <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4b60      	ldr	r3, [pc, #384]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 800292e:	fba3 2302 	umull	r2, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	011c      	lsls	r4, r3, #4
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002940:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002948:	4642      	mov	r2, r8
 800294a:	464b      	mov	r3, r9
 800294c:	1891      	adds	r1, r2, r2
 800294e:	61b9      	str	r1, [r7, #24]
 8002950:	415b      	adcs	r3, r3
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002958:	4641      	mov	r1, r8
 800295a:	1851      	adds	r1, r2, r1
 800295c:	6139      	str	r1, [r7, #16]
 800295e:	4649      	mov	r1, r9
 8002960:	414b      	adcs	r3, r1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002970:	4659      	mov	r1, fp
 8002972:	00cb      	lsls	r3, r1, #3
 8002974:	4651      	mov	r1, sl
 8002976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800297a:	4651      	mov	r1, sl
 800297c:	00ca      	lsls	r2, r1, #3
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	4603      	mov	r3, r0
 8002984:	4642      	mov	r2, r8
 8002986:	189b      	adds	r3, r3, r2
 8002988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800298c:	464b      	mov	r3, r9
 800298e:	460a      	mov	r2, r1
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029b0:	4649      	mov	r1, r9
 80029b2:	008b      	lsls	r3, r1, #2
 80029b4:	4641      	mov	r1, r8
 80029b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ba:	4641      	mov	r1, r8
 80029bc:	008a      	lsls	r2, r1, #2
 80029be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029c2:	f7fd fc5d 	bl	8000280 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 80029ce:	fba3 2301 	umull	r2, r3, r3, r1
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2264      	movs	r2, #100	@ 0x64
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	1acb      	subs	r3, r1, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	@ 0x32
 80029e0:	4a33      	ldr	r2, [pc, #204]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ec:	441c      	add	r4, r3
 80029ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029f2:	2200      	movs	r2, #0
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80029f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80029f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029fc:	4642      	mov	r2, r8
 80029fe:	464b      	mov	r3, r9
 8002a00:	1891      	adds	r1, r2, r2
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	415b      	adcs	r3, r3
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a0c:	4641      	mov	r1, r8
 8002a0e:	1851      	adds	r1, r2, r1
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	4649      	mov	r1, r9
 8002a14:	414b      	adcs	r3, r1
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a24:	4659      	mov	r1, fp
 8002a26:	00cb      	lsls	r3, r1, #3
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2e:	4651      	mov	r1, sl
 8002a30:	00ca      	lsls	r2, r1, #3
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	4642      	mov	r2, r8
 8002a3a:	189b      	adds	r3, r3, r2
 8002a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a3e:	464b      	mov	r3, r9
 8002a40:	460a      	mov	r2, r1
 8002a42:	eb42 0303 	adc.w	r3, r2, r3
 8002a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a52:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a60:	4649      	mov	r1, r9
 8002a62:	008b      	lsls	r3, r1, #2
 8002a64:	4641      	mov	r1, r8
 8002a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	008a      	lsls	r2, r1, #2
 8002a6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a72:	f7fd fc05 	bl	8000280 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 8002a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	2164      	movs	r1, #100	@ 0x64
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	3332      	adds	r3, #50	@ 0x32
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <UART_SetConfig+0x4e4>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4422      	add	r2, r4
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab0:	51eb851f 	.word	0x51eb851f

08002ab4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0208 	add.w	r2, r3, #8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f103 0208 	add.w	r2, r3, #8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f103 0208 	add.w	r2, r3, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d103      	bne.n	8002b76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e00c      	b.n	8002b90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e002      	b.n	8002b84 <vListInsert+0x2e>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d2f6      	bcs.n	8002b7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6892      	ldr	r2, [r2, #8]
 8002bde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d103      	bne.n	8002bfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	1e5a      	subs	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b090      	sub	sp, #64	@ 0x40
 8002c20:	af04      	add	r7, sp, #16
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
    char name[20];
    strcpy(name, pcName);
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f8e4 	bl	8003e00 <strcpy>
    strcat(name, "\n\r");
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fac7 	bl	80001d0 <strlen>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a25      	ldr	r2, [pc, #148]	@ (8002ce4 <xTaskCreate+0xc8>)
 8002c4e:	8811      	ldrh	r1, [r2, #0]
 8002c50:	7892      	ldrb	r2, [r2, #2]
 8002c52:	8019      	strh	r1, [r3, #0]
 8002c54:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)name, strlen(name), 0xffff);
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fab8 	bl	80001d0 <strlen>
 8002c60:	4603      	mov	r3, r0
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	f107 0110 	add.w	r1, r7, #16
 8002c68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c6c:	481e      	ldr	r0, [pc, #120]	@ (8002ce8 <xTaskCreate+0xcc>)
 8002c6e:	f7ff fb65 	bl	800233c <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 ff4e 	bl	8003b18 <pvPortMalloc>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

			if( pxStack != NULL )
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c84:	2058      	movs	r0, #88	@ 0x58
 8002c86:	f000 ff47 	bl	8003b18 <pvPortMalloc>
 8002c8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

				if( pxNewTCB != NULL )
 8002c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c98:	e005      	b.n	8002ca6 <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c9c:	f000 ffee 	bl	8003c7c <vPortFree>
 8002ca0:	e001      	b.n	8002ca6 <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9303      	str	r3, [sp, #12]
 8002cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f812 	bl	8002cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cca:	f000 f89f 	bl	8002e0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd2:	e002      	b.n	8002cda <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		return xReturn;
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3730      	adds	r7, #48	@ 0x30
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	080046f4 	.word	0x080046f4
 8002ce8:	20000080 	.word	0x20000080

08002cec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	461a      	mov	r2, r3
 8002d04:	21a5      	movs	r1, #165	@ 0xa5
 8002d06:	f001 f847 	bl	8003d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d14:	3b01      	subs	r3, #1
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01f      	beq.n	8002d8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e012      	b.n	8002d78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	7819      	ldrb	r1, [r3, #0]
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3334      	adds	r3, #52	@ 0x34
 8002d62:	460a      	mov	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	d9e9      	bls.n	8002d52 <prvInitialiseNewTask+0x66>
 8002d7e:	e000      	b.n	8002d82 <prvInitialiseNewTask+0x96>
			{
				break;
 8002d80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d8a:	e003      	b.n	8002d94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d901      	bls.n	8002d9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da8:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	2200      	movs	r2, #0
 8002dae:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	3304      	adds	r3, #4
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe9d 	bl	8002af4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe98 	bl	8002af4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dcc:	f1c3 0205 	rsb	r2, r3, #5
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	69b8      	ldr	r0, [r7, #24]
 8002dee:	f000 fc67 	bl	80036c0 <pxPortInitialiseStack>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e04:	bf00      	nop
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e14:	f000 fd9a 	bl	800394c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <prvAddNewTaskToReadyList+0xc0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ecc <prvAddNewTaskToReadyList+0xc0>)
 8002e20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e22:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed0 <prvAddNewTaskToReadyList+0xc4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e2a:	4a29      	ldr	r2, [pc, #164]	@ (8002ed0 <prvAddNewTaskToReadyList+0xc4>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e30:	4b26      	ldr	r3, [pc, #152]	@ (8002ecc <prvAddNewTaskToReadyList+0xc0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d110      	bne.n	8002e5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e38:	f000 fb3e 	bl	80034b8 <prvInitialiseTaskLists>
 8002e3c:	e00d      	b.n	8002e5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e3e:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <prvAddNewTaskToReadyList+0xc8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e46:	4b22      	ldr	r3, [pc, #136]	@ (8002ed0 <prvAddNewTaskToReadyList+0xc4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d802      	bhi.n	8002e5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e54:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <prvAddNewTaskToReadyList+0xc4>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <prvAddNewTaskToReadyList+0xcc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <prvAddNewTaskToReadyList+0xcc>)
 8002e62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed8 <prvAddNewTaskToReadyList+0xcc>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <prvAddNewTaskToReadyList+0xd0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	4a18      	ldr	r2, [pc, #96]	@ (8002edc <prvAddNewTaskToReadyList+0xd0>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <prvAddNewTaskToReadyList+0xd4>)
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f7ff fe3a 	bl	8002b0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e9a:	f000 fd89 	bl	80039b0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <prvAddNewTaskToReadyList+0xc8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <prvAddNewTaskToReadyList+0xc4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d207      	bcs.n	8002ec4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <prvAddNewTaskToReadyList+0xd8>)
 8002eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200001f0 	.word	0x200001f0
 8002ed0:	20000118 	.word	0x20000118
 8002ed4:	200001fc 	.word	0x200001fc
 8002ed8:	2000020c 	.word	0x2000020c
 8002edc:	200001f8 	.word	0x200001f8
 8002ee0:	2000011c 	.word	0x2000011c
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ef0:	f000 fd2c 	bl	800394c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <vTaskDelete+0x18>
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <vTaskDelete+0xf8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e000      	b.n	8002f02 <vTaskDelete+0x1a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe5d 	bl	8002bc8 <uxListRemove>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d115      	bne.n	8002f40 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f18:	4932      	ldr	r1, [pc, #200]	@ (8002fe4 <vTaskDelete+0xfc>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <vTaskDelete+0x58>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe8 <vTaskDelete+0x100>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe8 <vTaskDelete+0x100>)
 8002f3e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fe3b 	bl	8002bc8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002f52:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <vTaskDelete+0x104>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	4a24      	ldr	r2, [pc, #144]	@ (8002fec <vTaskDelete+0x104>)
 8002f5a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002f5c:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <vTaskDelete+0xf8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d10b      	bne.n	8002f7e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4820      	ldr	r0, [pc, #128]	@ (8002ff0 <vTaskDelete+0x108>)
 8002f6e:	f7ff fdce 	bl	8002b0e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <vTaskDelete+0x10c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <vTaskDelete+0x10c>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e009      	b.n	8002f92 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff8 <vTaskDelete+0x110>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <vTaskDelete+0x110>)
 8002f86:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fb03 	bl	8003594 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002f8e:	f000 fb11 	bl	80035b4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002f92:	f000 fd0d 	bl	80039b0 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002f96:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <vTaskDelete+0x114>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01c      	beq.n	8002fd8 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8002f9e:	4b10      	ldr	r3, [pc, #64]	@ (8002fe0 <vTaskDelete+0xf8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d117      	bne.n	8002fd8 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <vTaskDelete+0x118>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <vTaskDelete+0xe0>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	60bb      	str	r3, [r7, #8]
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <vTaskDelete+0x11c>)
 8002fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000118 	.word	0x20000118
 8002fe4:	2000011c 	.word	0x2000011c
 8002fe8:	200001f8 	.word	0x200001f8
 8002fec:	2000020c 	.word	0x2000020c
 8002ff0:	200001c4 	.word	0x200001c4
 8002ff4:	200001d8 	.word	0x200001d8
 8002ff8:	200001f0 	.word	0x200001f0
 8002ffc:	200001fc 	.word	0x200001fc
 8003000:	20000218 	.word	0x20000218
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d018      	beq.n	800304c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <vTaskDelay+0x64>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <vTaskDelay+0x32>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60bb      	str	r3, [r7, #8]
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	e7fd      	b.n	8003036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800303a:	f000 f863 	bl	8003104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800303e:	2100      	movs	r1, #0
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fad7 	bl	80035f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003046:	f000 f86b 	bl	8003120 <xTaskResumeAll>
 800304a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <vTaskDelay+0x68>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000218 	.word	0x20000218
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800307a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ec <vTaskStartScheduler+0x78>)
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	2282      	movs	r2, #130	@ 0x82
 8003086:	491a      	ldr	r1, [pc, #104]	@ (80030f0 <vTaskStartScheduler+0x7c>)
 8003088:	481a      	ldr	r0, [pc, #104]	@ (80030f4 <vTaskStartScheduler+0x80>)
 800308a:	f7ff fdc7 	bl	8002c1c <xTaskCreate>
 800308e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d116      	bne.n	80030c4 <vTaskStartScheduler+0x50>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60bb      	str	r3, [r7, #8]
}
 80030a8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030aa:	4b13      	ldr	r3, [pc, #76]	@ (80030f8 <vTaskStartScheduler+0x84>)
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <vTaskStartScheduler+0x88>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <vTaskStartScheduler+0x8c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030be:	f000 fb8f 	bl	80037e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030c2:	e00f      	b.n	80030e4 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d10b      	bne.n	80030e4 <vTaskStartScheduler+0x70>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	607b      	str	r3, [r7, #4]
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <vTaskStartScheduler+0x6c>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000214 	.word	0x20000214
 80030f0:	080046f8 	.word	0x080046f8
 80030f4:	08003489 	.word	0x08003489
 80030f8:	20000210 	.word	0x20000210
 80030fc:	200001fc 	.word	0x200001fc
 8003100:	200001f4 	.word	0x200001f4

08003104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003108:	4b04      	ldr	r3, [pc, #16]	@ (800311c <vTaskSuspendAll+0x18>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a03      	ldr	r2, [pc, #12]	@ (800311c <vTaskSuspendAll+0x18>)
 8003110:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	20000218 	.word	0x20000218

08003120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800312e:	4b42      	ldr	r3, [pc, #264]	@ (8003238 <xTaskResumeAll+0x118>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <xTaskResumeAll+0x2e>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	603b      	str	r3, [r7, #0]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800314e:	f000 fbfd 	bl	800394c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003152:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <xTaskResumeAll+0x118>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	4a37      	ldr	r2, [pc, #220]	@ (8003238 <xTaskResumeAll+0x118>)
 800315a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800315c:	4b36      	ldr	r3, [pc, #216]	@ (8003238 <xTaskResumeAll+0x118>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d161      	bne.n	8003228 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003164:	4b35      	ldr	r3, [pc, #212]	@ (800323c <xTaskResumeAll+0x11c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05d      	beq.n	8003228 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800316c:	e02e      	b.n	80031cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <xTaskResumeAll+0x120>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3318      	adds	r3, #24
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fd24 	bl	8002bc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3304      	adds	r3, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fd1f 	bl	8002bc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
 8003192:	4b2c      	ldr	r3, [pc, #176]	@ (8003244 <xTaskResumeAll+0x124>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	4a2a      	ldr	r2, [pc, #168]	@ (8003244 <xTaskResumeAll+0x124>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4a27      	ldr	r2, [pc, #156]	@ (8003248 <xTaskResumeAll+0x128>)
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7ff fcab 	bl	8002b0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031bc:	4b23      	ldr	r3, [pc, #140]	@ (800324c <xTaskResumeAll+0x12c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <xTaskResumeAll+0x130>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <xTaskResumeAll+0x120>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1cc      	bne.n	800316e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031da:	f000 f9eb 	bl	80035b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031de:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <xTaskResumeAll+0x134>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031ea:	f000 f837 	bl	800325c <xTaskIncrementTick>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031f4:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <xTaskResumeAll+0x130>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f1      	bne.n	80031ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <xTaskResumeAll+0x134>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <xTaskResumeAll+0x130>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <xTaskResumeAll+0x138>)
 800321a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003228:	f000 fbc2 	bl	80039b0 <vPortExitCritical>

	return xAlreadyYielded;
 800322c:	68bb      	ldr	r3, [r7, #8]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000218 	.word	0x20000218
 800323c:	200001f0 	.word	0x200001f0
 8003240:	200001b0 	.word	0x200001b0
 8003244:	200001f8 	.word	0x200001f8
 8003248:	2000011c 	.word	0x2000011c
 800324c:	20000118 	.word	0x20000118
 8003250:	20000204 	.word	0x20000204
 8003254:	20000200 	.word	0x20000200
 8003258:	e000ed04 	.word	0xe000ed04

0800325c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003266:	4b4f      	ldr	r3, [pc, #316]	@ (80033a4 <xTaskIncrementTick+0x148>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 8089 	bne.w	8003382 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003270:	4b4d      	ldr	r3, [pc, #308]	@ (80033a8 <xTaskIncrementTick+0x14c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <xTaskIncrementTick+0x14c>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d121      	bne.n	80032c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003284:	4b49      	ldr	r3, [pc, #292]	@ (80033ac <xTaskIncrementTick+0x150>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	603b      	str	r3, [r7, #0]
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	e7fd      	b.n	80032a2 <xTaskIncrementTick+0x46>
 80032a6:	4b41      	ldr	r3, [pc, #260]	@ (80033ac <xTaskIncrementTick+0x150>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <xTaskIncrementTick+0x154>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3e      	ldr	r2, [pc, #248]	@ (80033ac <xTaskIncrementTick+0x150>)
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4a3e      	ldr	r2, [pc, #248]	@ (80033b0 <xTaskIncrementTick+0x154>)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <xTaskIncrementTick+0x158>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <xTaskIncrementTick+0x158>)
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	f000 f976 	bl	80035b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032c8:	4b3b      	ldr	r3, [pc, #236]	@ (80033b8 <xTaskIncrementTick+0x15c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d348      	bcc.n	8003364 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d2:	4b36      	ldr	r3, [pc, #216]	@ (80033ac <xTaskIncrementTick+0x150>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032dc:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <xTaskIncrementTick+0x15c>)
 80032de:	f04f 32ff 	mov.w	r2, #4294967295
 80032e2:	601a      	str	r2, [r3, #0]
					break;
 80032e4:	e03e      	b.n	8003364 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e6:	4b31      	ldr	r3, [pc, #196]	@ (80033ac <xTaskIncrementTick+0x150>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d203      	bcs.n	8003306 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032fe:	4a2e      	ldr	r2, [pc, #184]	@ (80033b8 <xTaskIncrementTick+0x15c>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003304:	e02e      	b.n	8003364 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3304      	adds	r3, #4
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fc5c 	bl	8002bc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	3318      	adds	r3, #24
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fc53 	bl	8002bc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	2201      	movs	r2, #1
 8003328:	409a      	lsls	r2, r3
 800332a:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <xTaskIncrementTick+0x160>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	4a22      	ldr	r2, [pc, #136]	@ (80033bc <xTaskIncrementTick+0x160>)
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <xTaskIncrementTick+0x164>)
 8003342:	441a      	add	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7ff fbdf 	bl	8002b0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <xTaskIncrementTick+0x168>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	429a      	cmp	r2, r3
 800335c:	d3b9      	bcc.n	80032d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003362:	e7b6      	b.n	80032d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003364:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <xTaskIncrementTick+0x168>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	4915      	ldr	r1, [pc, #84]	@ (80033c0 <xTaskIncrementTick+0x164>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d907      	bls.n	800338c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e004      	b.n	800338c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003382:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <xTaskIncrementTick+0x16c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	4a0f      	ldr	r2, [pc, #60]	@ (80033c8 <xTaskIncrementTick+0x16c>)
 800338a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <xTaskIncrementTick+0x170>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003398:	697b      	ldr	r3, [r7, #20]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000218 	.word	0x20000218
 80033a8:	200001f4 	.word	0x200001f4
 80033ac:	200001a8 	.word	0x200001a8
 80033b0:	200001ac 	.word	0x200001ac
 80033b4:	20000208 	.word	0x20000208
 80033b8:	20000210 	.word	0x20000210
 80033bc:	200001f8 	.word	0x200001f8
 80033c0:	2000011c 	.word	0x2000011c
 80033c4:	20000118 	.word	0x20000118
 80033c8:	20000200 	.word	0x20000200
 80033cc:	20000204 	.word	0x20000204

080033d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033d6:	4b27      	ldr	r3, [pc, #156]	@ (8003474 <vTaskSwitchContext+0xa4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033de:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <vTaskSwitchContext+0xa8>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033e4:	e040      	b.n	8003468 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80033e6:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <vTaskSwitchContext+0xa8>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	4b23      	ldr	r3, [pc, #140]	@ (800347c <vTaskSwitchContext+0xac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	f1c3 031f 	rsb	r3, r3, #31
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	491f      	ldr	r1, [pc, #124]	@ (8003480 <vTaskSwitchContext+0xb0>)
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <vTaskSwitchContext+0x5e>
	__asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	607b      	str	r3, [r7, #4]
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	e7fd      	b.n	800342a <vTaskSwitchContext+0x5a>
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4a11      	ldr	r2, [pc, #68]	@ (8003480 <vTaskSwitchContext+0xb0>)
 800343a:	4413      	add	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	3308      	adds	r3, #8
 8003450:	429a      	cmp	r2, r3
 8003452:	d104      	bne.n	800345e <vTaskSwitchContext+0x8e>
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <vTaskSwitchContext+0xb4>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000218 	.word	0x20000218
 8003478:	20000204 	.word	0x20000204
 800347c:	200001f8 	.word	0x200001f8
 8003480:	2000011c 	.word	0x2000011c
 8003484:	20000118 	.word	0x20000118

08003488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003490:	f000 f852 	bl	8003538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <prvIdleTask+0x28>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d9f9      	bls.n	8003490 <prvIdleTask+0x8>
			{
				taskYIELD();
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <prvIdleTask+0x2c>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034ac:	e7f0      	b.n	8003490 <prvIdleTask+0x8>
 80034ae:	bf00      	nop
 80034b0:	2000011c 	.word	0x2000011c
 80034b4:	e000ed04 	.word	0xe000ed04

080034b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	e00c      	b.n	80034de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4a12      	ldr	r2, [pc, #72]	@ (8003518 <prvInitialiseTaskLists+0x60>)
 80034d0:	4413      	add	r3, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff faee 	bl	8002ab4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3301      	adds	r3, #1
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d9ef      	bls.n	80034c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034e4:	480d      	ldr	r0, [pc, #52]	@ (800351c <prvInitialiseTaskLists+0x64>)
 80034e6:	f7ff fae5 	bl	8002ab4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ea:	480d      	ldr	r0, [pc, #52]	@ (8003520 <prvInitialiseTaskLists+0x68>)
 80034ec:	f7ff fae2 	bl	8002ab4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034f0:	480c      	ldr	r0, [pc, #48]	@ (8003524 <prvInitialiseTaskLists+0x6c>)
 80034f2:	f7ff fadf 	bl	8002ab4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034f6:	480c      	ldr	r0, [pc, #48]	@ (8003528 <prvInitialiseTaskLists+0x70>)
 80034f8:	f7ff fadc 	bl	8002ab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034fc:	480b      	ldr	r0, [pc, #44]	@ (800352c <prvInitialiseTaskLists+0x74>)
 80034fe:	f7ff fad9 	bl	8002ab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003502:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <prvInitialiseTaskLists+0x78>)
 8003504:	4a05      	ldr	r2, [pc, #20]	@ (800351c <prvInitialiseTaskLists+0x64>)
 8003506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003508:	4b0a      	ldr	r3, [pc, #40]	@ (8003534 <prvInitialiseTaskLists+0x7c>)
 800350a:	4a05      	ldr	r2, [pc, #20]	@ (8003520 <prvInitialiseTaskLists+0x68>)
 800350c:	601a      	str	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2000011c 	.word	0x2000011c
 800351c:	20000180 	.word	0x20000180
 8003520:	20000194 	.word	0x20000194
 8003524:	200001b0 	.word	0x200001b0
 8003528:	200001c4 	.word	0x200001c4
 800352c:	200001dc 	.word	0x200001dc
 8003530:	200001a8 	.word	0x200001a8
 8003534:	200001ac 	.word	0x200001ac

08003538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800353e:	e019      	b.n	8003574 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003540:	f000 fa04 	bl	800394c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003544:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <prvCheckTasksWaitingTermination+0x50>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fb39 	bl	8002bc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <prvCheckTasksWaitingTermination+0x54>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <prvCheckTasksWaitingTermination+0x54>)
 800355e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <prvCheckTasksWaitingTermination+0x58>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3b01      	subs	r3, #1
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <prvCheckTasksWaitingTermination+0x58>)
 8003568:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800356a:	f000 fa21 	bl	80039b0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f810 	bl	8003594 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <prvCheckTasksWaitingTermination+0x58>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e1      	bne.n	8003540 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200001c4 	.word	0x200001c4
 800358c:	200001f0 	.word	0x200001f0
 8003590:	200001d8 	.word	0x200001d8

08003594 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fb6b 	bl	8003c7c <vPortFree>
			vPortFree( pxTCB );
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb68 	bl	8003c7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <prvResetNextTaskUnblockTime+0x38>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035c4:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <prvResetNextTaskUnblockTime+0x3c>)
 80035c6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035cc:	e008      	b.n	80035e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ce:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <prvResetNextTaskUnblockTime+0x38>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a04      	ldr	r2, [pc, #16]	@ (80035f0 <prvResetNextTaskUnblockTime+0x3c>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	200001a8 	.word	0x200001a8
 80035f0:	20000210 	.word	0x20000210

080035f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035fe:	4b29      	ldr	r3, [pc, #164]	@ (80036a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003604:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3304      	adds	r3, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fadc 	bl	8002bc8 <uxListRemove>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003616:	4b24      	ldr	r3, [pc, #144]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	2201      	movs	r2, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4013      	ands	r3, r2
 800362a:	4a20      	ldr	r2, [pc, #128]	@ (80036ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800362c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d10a      	bne.n	800364c <prvAddCurrentTaskToDelayedList+0x58>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800363c:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	481a      	ldr	r0, [pc, #104]	@ (80036b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003646:	f7ff fa62 	bl	8002b0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800364a:	e026      	b.n	800369a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003654:	4b14      	ldr	r3, [pc, #80]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d209      	bcs.n	8003678 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003664:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b0f      	ldr	r3, [pc, #60]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f7ff fa70 	bl	8002b56 <vListInsert>
}
 8003676:	e010      	b.n	800369a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003678:	4b0f      	ldr	r3, [pc, #60]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7ff fa66 	bl	8002b56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d202      	bcs.n	800369a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003694:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6013      	str	r3, [r2, #0]
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200001f4 	.word	0x200001f4
 80036a8:	20000118 	.word	0x20000118
 80036ac:	200001f8 	.word	0x200001f8
 80036b0:	200001dc 	.word	0x200001dc
 80036b4:	200001ac 	.word	0x200001ac
 80036b8:	200001a8 	.word	0x200001a8
 80036bc:	20000210 	.word	0x20000210

080036c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3b04      	subs	r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3b04      	subs	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3b04      	subs	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003724 <pxPortInitialiseStack+0x64>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3b14      	subs	r3, #20
 80036fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3b04      	subs	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f06f 0202 	mvn.w	r2, #2
 800370e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b20      	subs	r3, #32
 8003714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003716:	68fb      	ldr	r3, [r7, #12]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	08003729 	.word	0x08003729

08003728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <prvTaskExitError+0x58>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d00b      	beq.n	8003754 <prvTaskExitError+0x2c>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	60fb      	str	r3, [r7, #12]
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <prvTaskExitError+0x28>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	60bb      	str	r3, [r7, #8]
}
 8003766:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003768:	bf00      	nop
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0fc      	beq.n	800376a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000000c 	.word	0x2000000c
	...

08003790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003790:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <pxCurrentTCBConst2>)
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	6808      	ldr	r0, [r1, #0]
 8003796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379a:	f380 8809 	msr	PSP, r0
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f380 8811 	msr	BASEPRI, r0
 80037aa:	4770      	bx	lr
 80037ac:	f3af 8000 	nop.w

080037b0 <pxCurrentTCBConst2>:
 80037b0:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop

080037b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037b8:	4808      	ldr	r0, [pc, #32]	@ (80037dc <prvPortStartFirstTask+0x24>)
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	6800      	ldr	r0, [r0, #0]
 80037be:	f380 8808 	msr	MSP, r0
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8814 	msr	CONTROL, r0
 80037ca:	b662      	cpsie	i
 80037cc:	b661      	cpsie	f
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	df00      	svc	0
 80037d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037da:	bf00      	nop
 80037dc:	e000ed08 	.word	0xe000ed08

080037e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037e6:	4b50      	ldr	r3, [pc, #320]	@ (8003928 <xPortStartScheduler+0x148>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a50      	ldr	r2, [pc, #320]	@ (800392c <xPortStartScheduler+0x14c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10b      	bne.n	8003808 <xPortStartScheduler+0x28>
	__asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	61bb      	str	r3, [r7, #24]
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003808:	4b47      	ldr	r3, [pc, #284]	@ (8003928 <xPortStartScheduler+0x148>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a48      	ldr	r2, [pc, #288]	@ (8003930 <xPortStartScheduler+0x150>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10b      	bne.n	800382a <xPortStartScheduler+0x4a>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	617b      	str	r3, [r7, #20]
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	e7fd      	b.n	8003826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800382a:	4b42      	ldr	r3, [pc, #264]	@ (8003934 <xPortStartScheduler+0x154>)
 800382c:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	22ff      	movs	r2, #255	@ 0xff
 800383a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b3a      	ldr	r3, [pc, #232]	@ (8003938 <xPortStartScheduler+0x158>)
 8003850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003852:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <xPortStartScheduler+0x15c>)
 8003854:	2207      	movs	r2, #7
 8003856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003858:	e009      	b.n	800386e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800385a:	4b38      	ldr	r3, [pc, #224]	@ (800393c <xPortStartScheduler+0x15c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3b01      	subs	r3, #1
 8003860:	4a36      	ldr	r2, [pc, #216]	@ (800393c <xPortStartScheduler+0x15c>)
 8003862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b80      	cmp	r3, #128	@ 0x80
 8003878:	d0ef      	beq.n	800385a <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800387a:	4b30      	ldr	r3, [pc, #192]	@ (800393c <xPortStartScheduler+0x15c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	d00b      	beq.n	800389e <xPortStartScheduler+0xbe>
	__asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	613b      	str	r3, [r7, #16]
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	e7fd      	b.n	800389a <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800389e:	4b27      	ldr	r3, [pc, #156]	@ (800393c <xPortStartScheduler+0x15c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d00b      	beq.n	80038c2 <xPortStartScheduler+0xe2>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	60fb      	str	r3, [r7, #12]
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038c2:	4b1e      	ldr	r3, [pc, #120]	@ (800393c <xPortStartScheduler+0x15c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	4a1c      	ldr	r2, [pc, #112]	@ (800393c <xPortStartScheduler+0x15c>)
 80038ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038cc:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <xPortStartScheduler+0x15c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038d4:	4a19      	ldr	r2, [pc, #100]	@ (800393c <xPortStartScheduler+0x15c>)
 80038d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038e0:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <xPortStartScheduler+0x160>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <xPortStartScheduler+0x160>)
 80038e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <xPortStartScheduler+0x160>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a13      	ldr	r2, [pc, #76]	@ (8003940 <xPortStartScheduler+0x160>)
 80038f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80038f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038f8:	f000 f8e0 	bl	8003abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <xPortStartScheduler+0x164>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003902:	f000 f8ff 	bl	8003b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <xPortStartScheduler+0x168>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0f      	ldr	r2, [pc, #60]	@ (8003948 <xPortStartScheduler+0x168>)
 800390c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003910:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003912:	f7ff ff51 	bl	80037b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003916:	f7ff fd5b 	bl	80033d0 <vTaskSwitchContext>
	prvTaskExitError();
 800391a:	f7ff ff05 	bl	8003728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000ed00 	.word	0xe000ed00
 800392c:	410fc271 	.word	0x410fc271
 8003930:	410fc270 	.word	0x410fc270
 8003934:	e000e400 	.word	0xe000e400
 8003938:	2000021c 	.word	0x2000021c
 800393c:	20000220 	.word	0x20000220
 8003940:	e000ed20 	.word	0xe000ed20
 8003944:	2000000c 	.word	0x2000000c
 8003948:	e000ef34 	.word	0xe000ef34

0800394c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	607b      	str	r3, [r7, #4]
}
 8003964:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003966:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <vPortEnterCritical+0x5c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	4a0e      	ldr	r2, [pc, #56]	@ (80039a8 <vPortEnterCritical+0x5c>)
 800396e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003970:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <vPortEnterCritical+0x5c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d110      	bne.n	800399a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003978:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <vPortEnterCritical+0x60>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <vPortEnterCritical+0x4e>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	603b      	str	r3, [r7, #0]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <vPortEnterCritical+0x4a>
	}
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	2000000c 	.word	0x2000000c
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039b6:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <vPortExitCritical+0x50>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <vPortExitCritical+0x26>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	607b      	str	r3, [r7, #4]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <vPortExitCritical+0x50>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <vPortExitCritical+0x50>)
 80039de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <vPortExitCritical+0x50>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <vPortExitCritical+0x44>
 80039e8:	2300      	movs	r3, #0
 80039ea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039f2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	2000000c 	.word	0x2000000c
	...

08003a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a10:	f3ef 8009 	mrs	r0, PSP
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <pxCurrentTCBConst>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f01e 0f10 	tst.w	lr, #16
 8003a20:	bf08      	it	eq
 8003a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2a:	6010      	str	r0, [r2, #0]
 8003a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003a34:	f380 8811 	msr	BASEPRI, r0
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f7ff fcc6 	bl	80033d0 <vTaskSwitchContext>
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f380 8811 	msr	BASEPRI, r0
 8003a4c:	bc09      	pop	{r0, r3}
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a56:	f01e 0f10 	tst.w	lr, #16
 8003a5a:	bf08      	it	eq
 8003a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a60:	f380 8809 	msr	PSP, r0
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	f3af 8000 	nop.w

08003a70 <pxCurrentTCBConst>:
 8003a70:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	607b      	str	r3, [r7, #4]
}
 8003a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a92:	f7ff fbe3 	bl	800325c <xTaskIncrementTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <SysTick_Handler+0x40>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f383 8811 	msr	BASEPRI, r3
}
 8003aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <vPortSetupTimerInterrupt+0x34>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <vPortSetupTimerInterrupt+0x38>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <vPortSetupTimerInterrupt+0x3c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <vPortSetupTimerInterrupt+0x40>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	4a09      	ldr	r2, [pc, #36]	@ (8003b00 <vPortSetupTimerInterrupt+0x44>)
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <vPortSetupTimerInterrupt+0x34>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010
 8003af4:	e000e018 	.word	0xe000e018
 8003af8:	20000000 	.word	0x20000000
 8003afc:	10624dd3 	.word	0x10624dd3
 8003b00:	e000e014 	.word	0xe000e014

08003b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003b14 <vPortEnableVFP+0x10>
 8003b08:	6801      	ldr	r1, [r0, #0]
 8003b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003b0e:	6001      	str	r1, [r0, #0]
 8003b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b12:	bf00      	nop
 8003b14:	e000ed88 	.word	0xe000ed88

08003b18 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockHolding;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b0a2      	sub	sp, #136	@ 0x88
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	677b      	str	r3, [r7, #116]	@ 0x74
size_t BlockSize, WantedSize;
char data[80];
WantedSize = xWantedSize;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	66fb      	str	r3, [r7, #108]	@ 0x6c

	vTaskSuspendAll();
 8003b28:	f7ff faec 	bl	8003104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c64 <pvPortMalloc+0x14c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <pvPortMalloc+0x26>
		{
			prvHeapInit();
 8003b34:	f000 f8de 	bl	8003cf4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003b38:	4b4a      	ldr	r3, [pc, #296]	@ (8003c64 <pvPortMalloc+0x14c>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <pvPortMalloc+0x4a>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8003b44:	2308      	movs	r3, #8
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <pvPortMalloc+0x4a>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f023 0307 	bic.w	r3, r3, #7
 8003b5e:	3308      	adds	r3, #8
 8003b60:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d059      	beq.n	8003c1c <pvPortMalloc+0x104>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f241 32f7 	movw	r2, #5111	@ 0x13f7
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d854      	bhi.n	8003c1c <pvPortMalloc+0x104>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8003b72:	4b3d      	ldr	r3, [pc, #244]	@ (8003c68 <pvPortMalloc+0x150>)
 8003b74:	67bb      	str	r3, [r7, #120]	@ 0x78
			pxBlock = xStart.pxNextFreeBlock;
 8003b76:	4b3c      	ldr	r3, [pc, #240]	@ (8003c68 <pvPortMalloc+0x150>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b7c:	e004      	b.n	8003b88 <pvPortMalloc+0x70>
			{
				pxPreviousBlock = pxBlock;
 8003b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b80:	67bb      	str	r3, [r7, #120]	@ 0x78
				pxBlock = pxBlock->pxNextFreeBlock;
 8003b82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d903      	bls.n	8003b9a <pvPortMalloc+0x82>
 8003b92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f1      	bne.n	8003b7e <pvPortMalloc+0x66>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8003b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b9c:	4a33      	ldr	r2, [pc, #204]	@ (8003c6c <pvPortMalloc+0x154>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03c      	beq.n	8003c1c <pvPortMalloc+0x104>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	4413      	add	r3, r2
 8003baa:	677b      	str	r3, [r7, #116]	@ 0x74

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bb2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	0052      	lsls	r2, r2, #1
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d924      	bls.n	8003c0e <pvPortMalloc+0xf6>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	66bb      	str	r3, [r7, #104]	@ 0x68

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bd6:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8003bd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8003bde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003be0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003be2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003be8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c68 <pvPortMalloc+0x150>)
 8003bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bec:	e002      	b.n	8003bf4 <pvPortMalloc+0xdc>
 8003bee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d8f6      	bhi.n	8003bee <pvPortMalloc+0xd6>
 8003c00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c0c:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c0e:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <pvPortMalloc+0x158>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <pvPortMalloc+0x158>)
 8003c1a:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c1c:	f7ff fa80 	bl	8003120 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

    BlockSize = xWantedSize;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    sprintf(data, "pvReturn: %p | heapSTRUCT_SIZE: %0d | WantedSize: %3d | BlockSize: %3d\n\r", pvReturn, heapSTRUCT_SIZE, WantedSize, BlockSize);
 8003c24:	2308      	movs	r3, #8
 8003c26:	461a      	mov	r2, r3
 8003c28:	f107 000c 	add.w	r0, r7, #12
 8003c2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c38:	490e      	ldr	r1, [pc, #56]	@ (8003c74 <pvPortMalloc+0x15c>)
 8003c3a:	f000 f88d 	bl	8003d58 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fac4 	bl	80001d0 <strlen>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	f107 010c 	add.w	r1, r7, #12
 8003c50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c54:	4808      	ldr	r0, [pc, #32]	@ (8003c78 <pvPortMalloc+0x160>)
 8003c56:	f7fe fb71 	bl	800233c <HAL_UART_Transmit>

	return pvReturn;
 8003c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3780      	adds	r7, #128	@ 0x80
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20001634 	.word	0x20001634
 8003c68:	20001624 	.word	0x20001624
 8003c6c:	2000162c 	.word	0x2000162c
 8003c70:	20000010 	.word	0x20000010
 8003c74:	08004700 	.word	0x08004700
 8003c78:	20000080 	.word	0x20000080

08003c7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	61bb      	str	r3, [r7, #24]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d029      	beq.n	8003ce2 <vPortFree+0x66>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8003c8e:	2308      	movs	r3, #8
 8003c90:	425b      	negs	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4413      	add	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	617b      	str	r3, [r7, #20]

		vTaskSuspendAll();
 8003c9c:	f7ff fa32 	bl	8003104 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <vPortFree+0x70>)
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e002      	b.n	8003cb6 <vPortFree+0x3a>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d8f6      	bhi.n	8003cb0 <vPortFree+0x34>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <vPortFree+0x74>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	4a05      	ldr	r2, [pc, #20]	@ (8003cf0 <vPortFree+0x74>)
 8003cdc:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8003cde:	f7ff fa1f 	bl	8003120 <xTaskResumeAll>
	}
}
 8003ce2:	bf00      	nop
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20001624 	.word	0x20001624
 8003cf0:	20000010 	.word	0x20000010

08003cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <prvHeapInit+0x48>)
 8003cfc:	f023 0307 	bic.w	r3, r3, #7
 8003d00:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d02:	4a0f      	ldr	r2, [pc, #60]	@ (8003d40 <prvHeapInit+0x4c>)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d08:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <prvHeapInit+0x4c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <prvHeapInit+0x50>)
 8003d10:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 8003d14:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003d16:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <prvHeapInit+0x50>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f241 32f8 	movw	r2, #5112	@ 0x13f8
 8003d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4a06      	ldr	r2, [pc, #24]	@ (8003d44 <prvHeapInit+0x50>)
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000022c 	.word	0x2000022c
 8003d40:	20001624 	.word	0x20001624
 8003d44:	2000162c 	.word	0x2000162c

08003d48 <vPrintFreeList>:
/*-----------------------------------------------------------*/

void vPrintFreeList(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
     * Reference format
     * > sprintf(data, "StartAddress heapSTRUCT_SIZE xBlockSize EndAddress\n\r");
     * > sprintf(data, "%p         %d           %4d         %p\n\r", ...);
     * > sprintf(data, "configADJUSTED_HEAP_SIZE: %0d xFreeBytesRemaining: %0d\n\r", ...);
	 */
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <siprintf>:
 8003d58:	b40e      	push	{r1, r2, r3}
 8003d5a:	b500      	push	{lr}
 8003d5c:	b09c      	sub	sp, #112	@ 0x70
 8003d5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d60:	9002      	str	r0, [sp, #8]
 8003d62:	9006      	str	r0, [sp, #24]
 8003d64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d68:	4809      	ldr	r0, [pc, #36]	@ (8003d90 <siprintf+0x38>)
 8003d6a:	9107      	str	r1, [sp, #28]
 8003d6c:	9104      	str	r1, [sp, #16]
 8003d6e:	4909      	ldr	r1, [pc, #36]	@ (8003d94 <siprintf+0x3c>)
 8003d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d74:	9105      	str	r1, [sp, #20]
 8003d76:	6800      	ldr	r0, [r0, #0]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	a902      	add	r1, sp, #8
 8003d7c:	f000 f9aa 	bl	80040d4 <_svfiprintf_r>
 8003d80:	9b02      	ldr	r3, [sp, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	b01c      	add	sp, #112	@ 0x70
 8003d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d8c:	b003      	add	sp, #12
 8003d8e:	4770      	bx	lr
 8003d90:	20000014 	.word	0x20000014
 8003d94:	ffff0208 	.word	0xffff0208

08003d98 <memset>:
 8003d98:	4402      	add	r2, r0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <__errno>:
 8003da8:	4b01      	ldr	r3, [pc, #4]	@ (8003db0 <__errno+0x8>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000014 	.word	0x20000014

08003db4 <__libc_init_array>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4d0d      	ldr	r5, [pc, #52]	@ (8003dec <__libc_init_array+0x38>)
 8003db8:	4c0d      	ldr	r4, [pc, #52]	@ (8003df0 <__libc_init_array+0x3c>)
 8003dba:	1b64      	subs	r4, r4, r5
 8003dbc:	10a4      	asrs	r4, r4, #2
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	42a6      	cmp	r6, r4
 8003dc2:	d109      	bne.n	8003dd8 <__libc_init_array+0x24>
 8003dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8003df4 <__libc_init_array+0x40>)
 8003dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003df8 <__libc_init_array+0x44>)
 8003dc8:	f000 fc6e 	bl	80046a8 <_init>
 8003dcc:	1b64      	subs	r4, r4, r5
 8003dce:	10a4      	asrs	r4, r4, #2
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	42a6      	cmp	r6, r4
 8003dd4:	d105      	bne.n	8003de2 <__libc_init_array+0x2e>
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ddc:	4798      	blx	r3
 8003dde:	3601      	adds	r6, #1
 8003de0:	e7ee      	b.n	8003dc0 <__libc_init_array+0xc>
 8003de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de6:	4798      	blx	r3
 8003de8:	3601      	adds	r6, #1
 8003dea:	e7f2      	b.n	8003dd2 <__libc_init_array+0x1e>
 8003dec:	080047a0 	.word	0x080047a0
 8003df0:	080047a0 	.word	0x080047a0
 8003df4:	080047a0 	.word	0x080047a0
 8003df8:	080047a4 	.word	0x080047a4

08003dfc <__retarget_lock_acquire_recursive>:
 8003dfc:	4770      	bx	lr

08003dfe <__retarget_lock_release_recursive>:
 8003dfe:	4770      	bx	lr

08003e00 <strcpy>:
 8003e00:	4603      	mov	r3, r0
 8003e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e06:	f803 2b01 	strb.w	r2, [r3], #1
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	d1f9      	bne.n	8003e02 <strcpy+0x2>
 8003e0e:	4770      	bx	lr

08003e10 <memcpy>:
 8003e10:	440a      	add	r2, r1
 8003e12:	4291      	cmp	r1, r2
 8003e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e18:	d100      	bne.n	8003e1c <memcpy+0xc>
 8003e1a:	4770      	bx	lr
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e26:	4291      	cmp	r1, r2
 8003e28:	d1f9      	bne.n	8003e1e <memcpy+0xe>
 8003e2a:	bd10      	pop	{r4, pc}

08003e2c <_free_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4605      	mov	r5, r0
 8003e30:	2900      	cmp	r1, #0
 8003e32:	d041      	beq.n	8003eb8 <_free_r+0x8c>
 8003e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e38:	1f0c      	subs	r4, r1, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bfb8      	it	lt
 8003e3e:	18e4      	addlt	r4, r4, r3
 8003e40:	f000 f8e0 	bl	8004004 <__malloc_lock>
 8003e44:	4a1d      	ldr	r2, [pc, #116]	@ (8003ebc <_free_r+0x90>)
 8003e46:	6813      	ldr	r3, [r2, #0]
 8003e48:	b933      	cbnz	r3, 8003e58 <_free_r+0x2c>
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	6014      	str	r4, [r2, #0]
 8003e4e:	4628      	mov	r0, r5
 8003e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e54:	f000 b8dc 	b.w	8004010 <__malloc_unlock>
 8003e58:	42a3      	cmp	r3, r4
 8003e5a:	d908      	bls.n	8003e6e <_free_r+0x42>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	1821      	adds	r1, r4, r0
 8003e60:	428b      	cmp	r3, r1
 8003e62:	bf01      	itttt	eq
 8003e64:	6819      	ldreq	r1, [r3, #0]
 8003e66:	685b      	ldreq	r3, [r3, #4]
 8003e68:	1809      	addeq	r1, r1, r0
 8003e6a:	6021      	streq	r1, [r4, #0]
 8003e6c:	e7ed      	b.n	8003e4a <_free_r+0x1e>
 8003e6e:	461a      	mov	r2, r3
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b10b      	cbz	r3, 8003e78 <_free_r+0x4c>
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d9fa      	bls.n	8003e6e <_free_r+0x42>
 8003e78:	6811      	ldr	r1, [r2, #0]
 8003e7a:	1850      	adds	r0, r2, r1
 8003e7c:	42a0      	cmp	r0, r4
 8003e7e:	d10b      	bne.n	8003e98 <_free_r+0x6c>
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	4401      	add	r1, r0
 8003e84:	1850      	adds	r0, r2, r1
 8003e86:	4283      	cmp	r3, r0
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	d1e0      	bne.n	8003e4e <_free_r+0x22>
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	6053      	str	r3, [r2, #4]
 8003e92:	4408      	add	r0, r1
 8003e94:	6010      	str	r0, [r2, #0]
 8003e96:	e7da      	b.n	8003e4e <_free_r+0x22>
 8003e98:	d902      	bls.n	8003ea0 <_free_r+0x74>
 8003e9a:	230c      	movs	r3, #12
 8003e9c:	602b      	str	r3, [r5, #0]
 8003e9e:	e7d6      	b.n	8003e4e <_free_r+0x22>
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	1821      	adds	r1, r4, r0
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	bf04      	itt	eq
 8003ea8:	6819      	ldreq	r1, [r3, #0]
 8003eaa:	685b      	ldreq	r3, [r3, #4]
 8003eac:	6063      	str	r3, [r4, #4]
 8003eae:	bf04      	itt	eq
 8003eb0:	1809      	addeq	r1, r1, r0
 8003eb2:	6021      	streq	r1, [r4, #0]
 8003eb4:	6054      	str	r4, [r2, #4]
 8003eb6:	e7ca      	b.n	8003e4e <_free_r+0x22>
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
 8003eba:	bf00      	nop
 8003ebc:	2000177c 	.word	0x2000177c

08003ec0 <sbrk_aligned>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8003f00 <sbrk_aligned+0x40>)
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	6831      	ldr	r1, [r6, #0]
 8003ec8:	4605      	mov	r5, r0
 8003eca:	b911      	cbnz	r1, 8003ed2 <sbrk_aligned+0x12>
 8003ecc:	f000 fba6 	bl	800461c <_sbrk_r>
 8003ed0:	6030      	str	r0, [r6, #0]
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f000 fba1 	bl	800461c <_sbrk_r>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	d103      	bne.n	8003ee6 <sbrk_aligned+0x26>
 8003ede:	f04f 34ff 	mov.w	r4, #4294967295
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	1cc4      	adds	r4, r0, #3
 8003ee8:	f024 0403 	bic.w	r4, r4, #3
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d0f8      	beq.n	8003ee2 <sbrk_aligned+0x22>
 8003ef0:	1a21      	subs	r1, r4, r0
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fb92 	bl	800461c <_sbrk_r>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d1f2      	bne.n	8003ee2 <sbrk_aligned+0x22>
 8003efc:	e7ef      	b.n	8003ede <sbrk_aligned+0x1e>
 8003efe:	bf00      	nop
 8003f00:	20001778 	.word	0x20001778

08003f04 <_malloc_r>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	1ccd      	adds	r5, r1, #3
 8003f0a:	f025 0503 	bic.w	r5, r5, #3
 8003f0e:	3508      	adds	r5, #8
 8003f10:	2d0c      	cmp	r5, #12
 8003f12:	bf38      	it	cc
 8003f14:	250c      	movcc	r5, #12
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	4606      	mov	r6, r0
 8003f1a:	db01      	blt.n	8003f20 <_malloc_r+0x1c>
 8003f1c:	42a9      	cmp	r1, r5
 8003f1e:	d904      	bls.n	8003f2a <_malloc_r+0x26>
 8003f20:	230c      	movs	r3, #12
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	2000      	movs	r0, #0
 8003f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004000 <_malloc_r+0xfc>
 8003f2e:	f000 f869 	bl	8004004 <__malloc_lock>
 8003f32:	f8d8 3000 	ldr.w	r3, [r8]
 8003f36:	461c      	mov	r4, r3
 8003f38:	bb44      	cbnz	r4, 8003f8c <_malloc_r+0x88>
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7ff ffbf 	bl	8003ec0 <sbrk_aligned>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	4604      	mov	r4, r0
 8003f46:	d158      	bne.n	8003ffa <_malloc_r+0xf6>
 8003f48:	f8d8 4000 	ldr.w	r4, [r8]
 8003f4c:	4627      	mov	r7, r4
 8003f4e:	2f00      	cmp	r7, #0
 8003f50:	d143      	bne.n	8003fda <_malloc_r+0xd6>
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	d04b      	beq.n	8003fee <_malloc_r+0xea>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	eb04 0903 	add.w	r9, r4, r3
 8003f60:	f000 fb5c 	bl	800461c <_sbrk_r>
 8003f64:	4581      	cmp	r9, r0
 8003f66:	d142      	bne.n	8003fee <_malloc_r+0xea>
 8003f68:	6821      	ldr	r1, [r4, #0]
 8003f6a:	1a6d      	subs	r5, r5, r1
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f7ff ffa6 	bl	8003ec0 <sbrk_aligned>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d03a      	beq.n	8003fee <_malloc_r+0xea>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	442b      	add	r3, r5
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	bb62      	cbnz	r2, 8003fe0 <_malloc_r+0xdc>
 8003f86:	f8c8 7000 	str.w	r7, [r8]
 8003f8a:	e00f      	b.n	8003fac <_malloc_r+0xa8>
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	1b52      	subs	r2, r2, r5
 8003f90:	d420      	bmi.n	8003fd4 <_malloc_r+0xd0>
 8003f92:	2a0b      	cmp	r2, #11
 8003f94:	d917      	bls.n	8003fc6 <_malloc_r+0xc2>
 8003f96:	1961      	adds	r1, r4, r5
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	6025      	str	r5, [r4, #0]
 8003f9c:	bf18      	it	ne
 8003f9e:	6059      	strne	r1, [r3, #4]
 8003fa0:	6863      	ldr	r3, [r4, #4]
 8003fa2:	bf08      	it	eq
 8003fa4:	f8c8 1000 	streq.w	r1, [r8]
 8003fa8:	5162      	str	r2, [r4, r5]
 8003faa:	604b      	str	r3, [r1, #4]
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 f82f 	bl	8004010 <__malloc_unlock>
 8003fb2:	f104 000b 	add.w	r0, r4, #11
 8003fb6:	1d23      	adds	r3, r4, #4
 8003fb8:	f020 0007 	bic.w	r0, r0, #7
 8003fbc:	1ac2      	subs	r2, r0, r3
 8003fbe:	bf1c      	itt	ne
 8003fc0:	1a1b      	subne	r3, r3, r0
 8003fc2:	50a3      	strne	r3, [r4, r2]
 8003fc4:	e7af      	b.n	8003f26 <_malloc_r+0x22>
 8003fc6:	6862      	ldr	r2, [r4, #4]
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	bf0c      	ite	eq
 8003fcc:	f8c8 2000 	streq.w	r2, [r8]
 8003fd0:	605a      	strne	r2, [r3, #4]
 8003fd2:	e7eb      	b.n	8003fac <_malloc_r+0xa8>
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	6864      	ldr	r4, [r4, #4]
 8003fd8:	e7ae      	b.n	8003f38 <_malloc_r+0x34>
 8003fda:	463c      	mov	r4, r7
 8003fdc:	687f      	ldr	r7, [r7, #4]
 8003fde:	e7b6      	b.n	8003f4e <_malloc_r+0x4a>
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d1fb      	bne.n	8003fe0 <_malloc_r+0xdc>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6053      	str	r3, [r2, #4]
 8003fec:	e7de      	b.n	8003fac <_malloc_r+0xa8>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	6033      	str	r3, [r6, #0]
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 f80c 	bl	8004010 <__malloc_unlock>
 8003ff8:	e794      	b.n	8003f24 <_malloc_r+0x20>
 8003ffa:	6005      	str	r5, [r0, #0]
 8003ffc:	e7d6      	b.n	8003fac <_malloc_r+0xa8>
 8003ffe:	bf00      	nop
 8004000:	2000177c 	.word	0x2000177c

08004004 <__malloc_lock>:
 8004004:	4801      	ldr	r0, [pc, #4]	@ (800400c <__malloc_lock+0x8>)
 8004006:	f7ff bef9 	b.w	8003dfc <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	20001774 	.word	0x20001774

08004010 <__malloc_unlock>:
 8004010:	4801      	ldr	r0, [pc, #4]	@ (8004018 <__malloc_unlock+0x8>)
 8004012:	f7ff bef4 	b.w	8003dfe <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	20001774 	.word	0x20001774

0800401c <__ssputs_r>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	688e      	ldr	r6, [r1, #8]
 8004022:	461f      	mov	r7, r3
 8004024:	42be      	cmp	r6, r7
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	4682      	mov	sl, r0
 800402a:	460c      	mov	r4, r1
 800402c:	4690      	mov	r8, r2
 800402e:	d82d      	bhi.n	800408c <__ssputs_r+0x70>
 8004030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004038:	d026      	beq.n	8004088 <__ssputs_r+0x6c>
 800403a:	6965      	ldr	r5, [r4, #20]
 800403c:	6909      	ldr	r1, [r1, #16]
 800403e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004042:	eba3 0901 	sub.w	r9, r3, r1
 8004046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800404a:	1c7b      	adds	r3, r7, #1
 800404c:	444b      	add	r3, r9
 800404e:	106d      	asrs	r5, r5, #1
 8004050:	429d      	cmp	r5, r3
 8004052:	bf38      	it	cc
 8004054:	461d      	movcc	r5, r3
 8004056:	0553      	lsls	r3, r2, #21
 8004058:	d527      	bpl.n	80040aa <__ssputs_r+0x8e>
 800405a:	4629      	mov	r1, r5
 800405c:	f7ff ff52 	bl	8003f04 <_malloc_r>
 8004060:	4606      	mov	r6, r0
 8004062:	b360      	cbz	r0, 80040be <__ssputs_r+0xa2>
 8004064:	6921      	ldr	r1, [r4, #16]
 8004066:	464a      	mov	r2, r9
 8004068:	f7ff fed2 	bl	8003e10 <memcpy>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	6126      	str	r6, [r4, #16]
 800407a:	6165      	str	r5, [r4, #20]
 800407c:	444e      	add	r6, r9
 800407e:	eba5 0509 	sub.w	r5, r5, r9
 8004082:	6026      	str	r6, [r4, #0]
 8004084:	60a5      	str	r5, [r4, #8]
 8004086:	463e      	mov	r6, r7
 8004088:	42be      	cmp	r6, r7
 800408a:	d900      	bls.n	800408e <__ssputs_r+0x72>
 800408c:	463e      	mov	r6, r7
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	4632      	mov	r2, r6
 8004092:	4641      	mov	r1, r8
 8004094:	f000 faa8 	bl	80045e8 <memmove>
 8004098:	68a3      	ldr	r3, [r4, #8]
 800409a:	1b9b      	subs	r3, r3, r6
 800409c:	60a3      	str	r3, [r4, #8]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	4433      	add	r3, r6
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	2000      	movs	r0, #0
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	462a      	mov	r2, r5
 80040ac:	f000 fac6 	bl	800463c <_realloc_r>
 80040b0:	4606      	mov	r6, r0
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d1e0      	bne.n	8004078 <__ssputs_r+0x5c>
 80040b6:	6921      	ldr	r1, [r4, #16]
 80040b8:	4650      	mov	r0, sl
 80040ba:	f7ff feb7 	bl	8003e2c <_free_r>
 80040be:	230c      	movs	r3, #12
 80040c0:	f8ca 3000 	str.w	r3, [sl]
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	e7e9      	b.n	80040a6 <__ssputs_r+0x8a>
	...

080040d4 <_svfiprintf_r>:
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	4698      	mov	r8, r3
 80040da:	898b      	ldrh	r3, [r1, #12]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	b09d      	sub	sp, #116	@ 0x74
 80040e0:	4607      	mov	r7, r0
 80040e2:	460d      	mov	r5, r1
 80040e4:	4614      	mov	r4, r2
 80040e6:	d510      	bpl.n	800410a <_svfiprintf_r+0x36>
 80040e8:	690b      	ldr	r3, [r1, #16]
 80040ea:	b973      	cbnz	r3, 800410a <_svfiprintf_r+0x36>
 80040ec:	2140      	movs	r1, #64	@ 0x40
 80040ee:	f7ff ff09 	bl	8003f04 <_malloc_r>
 80040f2:	6028      	str	r0, [r5, #0]
 80040f4:	6128      	str	r0, [r5, #16]
 80040f6:	b930      	cbnz	r0, 8004106 <_svfiprintf_r+0x32>
 80040f8:	230c      	movs	r3, #12
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	b01d      	add	sp, #116	@ 0x74
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004106:	2340      	movs	r3, #64	@ 0x40
 8004108:	616b      	str	r3, [r5, #20]
 800410a:	2300      	movs	r3, #0
 800410c:	9309      	str	r3, [sp, #36]	@ 0x24
 800410e:	2320      	movs	r3, #32
 8004110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004114:	f8cd 800c 	str.w	r8, [sp, #12]
 8004118:	2330      	movs	r3, #48	@ 0x30
 800411a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80042b8 <_svfiprintf_r+0x1e4>
 800411e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004122:	f04f 0901 	mov.w	r9, #1
 8004126:	4623      	mov	r3, r4
 8004128:	469a      	mov	sl, r3
 800412a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800412e:	b10a      	cbz	r2, 8004134 <_svfiprintf_r+0x60>
 8004130:	2a25      	cmp	r2, #37	@ 0x25
 8004132:	d1f9      	bne.n	8004128 <_svfiprintf_r+0x54>
 8004134:	ebba 0b04 	subs.w	fp, sl, r4
 8004138:	d00b      	beq.n	8004152 <_svfiprintf_r+0x7e>
 800413a:	465b      	mov	r3, fp
 800413c:	4622      	mov	r2, r4
 800413e:	4629      	mov	r1, r5
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff ff6b 	bl	800401c <__ssputs_r>
 8004146:	3001      	adds	r0, #1
 8004148:	f000 80a7 	beq.w	800429a <_svfiprintf_r+0x1c6>
 800414c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800414e:	445a      	add	r2, fp
 8004150:	9209      	str	r2, [sp, #36]	@ 0x24
 8004152:	f89a 3000 	ldrb.w	r3, [sl]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 809f 	beq.w	800429a <_svfiprintf_r+0x1c6>
 800415c:	2300      	movs	r3, #0
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004166:	f10a 0a01 	add.w	sl, sl, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	9307      	str	r3, [sp, #28]
 800416e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004172:	931a      	str	r3, [sp, #104]	@ 0x68
 8004174:	4654      	mov	r4, sl
 8004176:	2205      	movs	r2, #5
 8004178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417c:	484e      	ldr	r0, [pc, #312]	@ (80042b8 <_svfiprintf_r+0x1e4>)
 800417e:	f7fc f82f 	bl	80001e0 <memchr>
 8004182:	9a04      	ldr	r2, [sp, #16]
 8004184:	b9d8      	cbnz	r0, 80041be <_svfiprintf_r+0xea>
 8004186:	06d0      	lsls	r0, r2, #27
 8004188:	bf44      	itt	mi
 800418a:	2320      	movmi	r3, #32
 800418c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004190:	0711      	lsls	r1, r2, #28
 8004192:	bf44      	itt	mi
 8004194:	232b      	movmi	r3, #43	@ 0x2b
 8004196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800419a:	f89a 3000 	ldrb.w	r3, [sl]
 800419e:	2b2a      	cmp	r3, #42	@ 0x2a
 80041a0:	d015      	beq.n	80041ce <_svfiprintf_r+0xfa>
 80041a2:	9a07      	ldr	r2, [sp, #28]
 80041a4:	4654      	mov	r4, sl
 80041a6:	2000      	movs	r0, #0
 80041a8:	f04f 0c0a 	mov.w	ip, #10
 80041ac:	4621      	mov	r1, r4
 80041ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041b2:	3b30      	subs	r3, #48	@ 0x30
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d94b      	bls.n	8004250 <_svfiprintf_r+0x17c>
 80041b8:	b1b0      	cbz	r0, 80041e8 <_svfiprintf_r+0x114>
 80041ba:	9207      	str	r2, [sp, #28]
 80041bc:	e014      	b.n	80041e8 <_svfiprintf_r+0x114>
 80041be:	eba0 0308 	sub.w	r3, r0, r8
 80041c2:	fa09 f303 	lsl.w	r3, r9, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	46a2      	mov	sl, r4
 80041cc:	e7d2      	b.n	8004174 <_svfiprintf_r+0xa0>
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	1d19      	adds	r1, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9103      	str	r1, [sp, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfbb      	ittet	lt
 80041da:	425b      	neglt	r3, r3
 80041dc:	f042 0202 	orrlt.w	r2, r2, #2
 80041e0:	9307      	strge	r3, [sp, #28]
 80041e2:	9307      	strlt	r3, [sp, #28]
 80041e4:	bfb8      	it	lt
 80041e6:	9204      	strlt	r2, [sp, #16]
 80041e8:	7823      	ldrb	r3, [r4, #0]
 80041ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80041ec:	d10a      	bne.n	8004204 <_svfiprintf_r+0x130>
 80041ee:	7863      	ldrb	r3, [r4, #1]
 80041f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f2:	d132      	bne.n	800425a <_svfiprintf_r+0x186>
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	9203      	str	r2, [sp, #12]
 80041fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004200:	3402      	adds	r4, #2
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80042c8 <_svfiprintf_r+0x1f4>
 8004208:	7821      	ldrb	r1, [r4, #0]
 800420a:	2203      	movs	r2, #3
 800420c:	4650      	mov	r0, sl
 800420e:	f7fb ffe7 	bl	80001e0 <memchr>
 8004212:	b138      	cbz	r0, 8004224 <_svfiprintf_r+0x150>
 8004214:	9b04      	ldr	r3, [sp, #16]
 8004216:	eba0 000a 	sub.w	r0, r0, sl
 800421a:	2240      	movs	r2, #64	@ 0x40
 800421c:	4082      	lsls	r2, r0
 800421e:	4313      	orrs	r3, r2
 8004220:	3401      	adds	r4, #1
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004228:	4824      	ldr	r0, [pc, #144]	@ (80042bc <_svfiprintf_r+0x1e8>)
 800422a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800422e:	2206      	movs	r2, #6
 8004230:	f7fb ffd6 	bl	80001e0 <memchr>
 8004234:	2800      	cmp	r0, #0
 8004236:	d036      	beq.n	80042a6 <_svfiprintf_r+0x1d2>
 8004238:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <_svfiprintf_r+0x1ec>)
 800423a:	bb1b      	cbnz	r3, 8004284 <_svfiprintf_r+0x1b0>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	3307      	adds	r3, #7
 8004240:	f023 0307 	bic.w	r3, r3, #7
 8004244:	3308      	adds	r3, #8
 8004246:	9303      	str	r3, [sp, #12]
 8004248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800424a:	4433      	add	r3, r6
 800424c:	9309      	str	r3, [sp, #36]	@ 0x24
 800424e:	e76a      	b.n	8004126 <_svfiprintf_r+0x52>
 8004250:	fb0c 3202 	mla	r2, ip, r2, r3
 8004254:	460c      	mov	r4, r1
 8004256:	2001      	movs	r0, #1
 8004258:	e7a8      	b.n	80041ac <_svfiprintf_r+0xd8>
 800425a:	2300      	movs	r3, #0
 800425c:	3401      	adds	r4, #1
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	4619      	mov	r1, r3
 8004262:	f04f 0c0a 	mov.w	ip, #10
 8004266:	4620      	mov	r0, r4
 8004268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800426c:	3a30      	subs	r2, #48	@ 0x30
 800426e:	2a09      	cmp	r2, #9
 8004270:	d903      	bls.n	800427a <_svfiprintf_r+0x1a6>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0c6      	beq.n	8004204 <_svfiprintf_r+0x130>
 8004276:	9105      	str	r1, [sp, #20]
 8004278:	e7c4      	b.n	8004204 <_svfiprintf_r+0x130>
 800427a:	fb0c 2101 	mla	r1, ip, r1, r2
 800427e:	4604      	mov	r4, r0
 8004280:	2301      	movs	r3, #1
 8004282:	e7f0      	b.n	8004266 <_svfiprintf_r+0x192>
 8004284:	ab03      	add	r3, sp, #12
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	462a      	mov	r2, r5
 800428a:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <_svfiprintf_r+0x1f0>)
 800428c:	a904      	add	r1, sp, #16
 800428e:	4638      	mov	r0, r7
 8004290:	f3af 8000 	nop.w
 8004294:	1c42      	adds	r2, r0, #1
 8004296:	4606      	mov	r6, r0
 8004298:	d1d6      	bne.n	8004248 <_svfiprintf_r+0x174>
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	065b      	lsls	r3, r3, #25
 800429e:	f53f af2d 	bmi.w	80040fc <_svfiprintf_r+0x28>
 80042a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042a4:	e72c      	b.n	8004100 <_svfiprintf_r+0x2c>
 80042a6:	ab03      	add	r3, sp, #12
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	462a      	mov	r2, r5
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <_svfiprintf_r+0x1f0>)
 80042ae:	a904      	add	r1, sp, #16
 80042b0:	4638      	mov	r0, r7
 80042b2:	f000 f879 	bl	80043a8 <_printf_i>
 80042b6:	e7ed      	b.n	8004294 <_svfiprintf_r+0x1c0>
 80042b8:	08004764 	.word	0x08004764
 80042bc:	0800476e 	.word	0x0800476e
 80042c0:	00000000 	.word	0x00000000
 80042c4:	0800401d 	.word	0x0800401d
 80042c8:	0800476a 	.word	0x0800476a

080042cc <_printf_common>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	4616      	mov	r6, r2
 80042d2:	4698      	mov	r8, r3
 80042d4:	688a      	ldr	r2, [r1, #8]
 80042d6:	690b      	ldr	r3, [r1, #16]
 80042d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042dc:	4293      	cmp	r3, r2
 80042de:	bfb8      	it	lt
 80042e0:	4613      	movlt	r3, r2
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042e8:	4607      	mov	r7, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	b10a      	cbz	r2, 80042f2 <_printf_common+0x26>
 80042ee:	3301      	adds	r3, #1
 80042f0:	6033      	str	r3, [r6, #0]
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	0699      	lsls	r1, r3, #26
 80042f6:	bf42      	ittt	mi
 80042f8:	6833      	ldrmi	r3, [r6, #0]
 80042fa:	3302      	addmi	r3, #2
 80042fc:	6033      	strmi	r3, [r6, #0]
 80042fe:	6825      	ldr	r5, [r4, #0]
 8004300:	f015 0506 	ands.w	r5, r5, #6
 8004304:	d106      	bne.n	8004314 <_printf_common+0x48>
 8004306:	f104 0a19 	add.w	sl, r4, #25
 800430a:	68e3      	ldr	r3, [r4, #12]
 800430c:	6832      	ldr	r2, [r6, #0]
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	42ab      	cmp	r3, r5
 8004312:	dc26      	bgt.n	8004362 <_printf_common+0x96>
 8004314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	3b00      	subs	r3, #0
 800431c:	bf18      	it	ne
 800431e:	2301      	movne	r3, #1
 8004320:	0692      	lsls	r2, r2, #26
 8004322:	d42b      	bmi.n	800437c <_printf_common+0xb0>
 8004324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004328:	4641      	mov	r1, r8
 800432a:	4638      	mov	r0, r7
 800432c:	47c8      	blx	r9
 800432e:	3001      	adds	r0, #1
 8004330:	d01e      	beq.n	8004370 <_printf_common+0xa4>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	f003 0306 	and.w	r3, r3, #6
 800433a:	2b04      	cmp	r3, #4
 800433c:	bf02      	ittt	eq
 800433e:	68e5      	ldreq	r5, [r4, #12]
 8004340:	6833      	ldreq	r3, [r6, #0]
 8004342:	1aed      	subeq	r5, r5, r3
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	bf0c      	ite	eq
 8004348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800434c:	2500      	movne	r5, #0
 800434e:	4293      	cmp	r3, r2
 8004350:	bfc4      	itt	gt
 8004352:	1a9b      	subgt	r3, r3, r2
 8004354:	18ed      	addgt	r5, r5, r3
 8004356:	2600      	movs	r6, #0
 8004358:	341a      	adds	r4, #26
 800435a:	42b5      	cmp	r5, r6
 800435c:	d11a      	bne.n	8004394 <_printf_common+0xc8>
 800435e:	2000      	movs	r0, #0
 8004360:	e008      	b.n	8004374 <_printf_common+0xa8>
 8004362:	2301      	movs	r3, #1
 8004364:	4652      	mov	r2, sl
 8004366:	4641      	mov	r1, r8
 8004368:	4638      	mov	r0, r7
 800436a:	47c8      	blx	r9
 800436c:	3001      	adds	r0, #1
 800436e:	d103      	bne.n	8004378 <_printf_common+0xac>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	3501      	adds	r5, #1
 800437a:	e7c6      	b.n	800430a <_printf_common+0x3e>
 800437c:	18e1      	adds	r1, r4, r3
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	2030      	movs	r0, #48	@ 0x30
 8004382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004386:	4422      	add	r2, r4
 8004388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800438c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004390:	3302      	adds	r3, #2
 8004392:	e7c7      	b.n	8004324 <_printf_common+0x58>
 8004394:	2301      	movs	r3, #1
 8004396:	4622      	mov	r2, r4
 8004398:	4641      	mov	r1, r8
 800439a:	4638      	mov	r0, r7
 800439c:	47c8      	blx	r9
 800439e:	3001      	adds	r0, #1
 80043a0:	d0e6      	beq.n	8004370 <_printf_common+0xa4>
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7d9      	b.n	800435a <_printf_common+0x8e>
	...

080043a8 <_printf_i>:
 80043a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	7e0f      	ldrb	r7, [r1, #24]
 80043ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043b0:	2f78      	cmp	r7, #120	@ 0x78
 80043b2:	4691      	mov	r9, r2
 80043b4:	4680      	mov	r8, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	469a      	mov	sl, r3
 80043ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043be:	d807      	bhi.n	80043d0 <_printf_i+0x28>
 80043c0:	2f62      	cmp	r7, #98	@ 0x62
 80043c2:	d80a      	bhi.n	80043da <_printf_i+0x32>
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f000 80d2 	beq.w	800456e <_printf_i+0x1c6>
 80043ca:	2f58      	cmp	r7, #88	@ 0x58
 80043cc:	f000 80b9 	beq.w	8004542 <_printf_i+0x19a>
 80043d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043d8:	e03a      	b.n	8004450 <_printf_i+0xa8>
 80043da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043de:	2b15      	cmp	r3, #21
 80043e0:	d8f6      	bhi.n	80043d0 <_printf_i+0x28>
 80043e2:	a101      	add	r1, pc, #4	@ (adr r1, 80043e8 <_printf_i+0x40>)
 80043e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004455 	.word	0x08004455
 80043f0:	080043d1 	.word	0x080043d1
 80043f4:	080043d1 	.word	0x080043d1
 80043f8:	080043d1 	.word	0x080043d1
 80043fc:	080043d1 	.word	0x080043d1
 8004400:	08004455 	.word	0x08004455
 8004404:	080043d1 	.word	0x080043d1
 8004408:	080043d1 	.word	0x080043d1
 800440c:	080043d1 	.word	0x080043d1
 8004410:	080043d1 	.word	0x080043d1
 8004414:	08004555 	.word	0x08004555
 8004418:	0800447f 	.word	0x0800447f
 800441c:	0800450f 	.word	0x0800450f
 8004420:	080043d1 	.word	0x080043d1
 8004424:	080043d1 	.word	0x080043d1
 8004428:	08004577 	.word	0x08004577
 800442c:	080043d1 	.word	0x080043d1
 8004430:	0800447f 	.word	0x0800447f
 8004434:	080043d1 	.word	0x080043d1
 8004438:	080043d1 	.word	0x080043d1
 800443c:	08004517 	.word	0x08004517
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6032      	str	r2, [r6, #0]
 8004448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800444c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004450:	2301      	movs	r3, #1
 8004452:	e09d      	b.n	8004590 <_printf_i+0x1e8>
 8004454:	6833      	ldr	r3, [r6, #0]
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	1d19      	adds	r1, r3, #4
 800445a:	6031      	str	r1, [r6, #0]
 800445c:	0606      	lsls	r6, r0, #24
 800445e:	d501      	bpl.n	8004464 <_printf_i+0xbc>
 8004460:	681d      	ldr	r5, [r3, #0]
 8004462:	e003      	b.n	800446c <_printf_i+0xc4>
 8004464:	0645      	lsls	r5, r0, #25
 8004466:	d5fb      	bpl.n	8004460 <_printf_i+0xb8>
 8004468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800446c:	2d00      	cmp	r5, #0
 800446e:	da03      	bge.n	8004478 <_printf_i+0xd0>
 8004470:	232d      	movs	r3, #45	@ 0x2d
 8004472:	426d      	negs	r5, r5
 8004474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004478:	4859      	ldr	r0, [pc, #356]	@ (80045e0 <_printf_i+0x238>)
 800447a:	230a      	movs	r3, #10
 800447c:	e011      	b.n	80044a2 <_printf_i+0xfa>
 800447e:	6821      	ldr	r1, [r4, #0]
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	0608      	lsls	r0, r1, #24
 8004484:	f853 5b04 	ldr.w	r5, [r3], #4
 8004488:	d402      	bmi.n	8004490 <_printf_i+0xe8>
 800448a:	0649      	lsls	r1, r1, #25
 800448c:	bf48      	it	mi
 800448e:	b2ad      	uxthmi	r5, r5
 8004490:	2f6f      	cmp	r7, #111	@ 0x6f
 8004492:	4853      	ldr	r0, [pc, #332]	@ (80045e0 <_printf_i+0x238>)
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	bf14      	ite	ne
 8004498:	230a      	movne	r3, #10
 800449a:	2308      	moveq	r3, #8
 800449c:	2100      	movs	r1, #0
 800449e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044a2:	6866      	ldr	r6, [r4, #4]
 80044a4:	60a6      	str	r6, [r4, #8]
 80044a6:	2e00      	cmp	r6, #0
 80044a8:	bfa2      	ittt	ge
 80044aa:	6821      	ldrge	r1, [r4, #0]
 80044ac:	f021 0104 	bicge.w	r1, r1, #4
 80044b0:	6021      	strge	r1, [r4, #0]
 80044b2:	b90d      	cbnz	r5, 80044b8 <_printf_i+0x110>
 80044b4:	2e00      	cmp	r6, #0
 80044b6:	d04b      	beq.n	8004550 <_printf_i+0x1a8>
 80044b8:	4616      	mov	r6, r2
 80044ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80044be:	fb03 5711 	mls	r7, r3, r1, r5
 80044c2:	5dc7      	ldrb	r7, [r0, r7]
 80044c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044c8:	462f      	mov	r7, r5
 80044ca:	42bb      	cmp	r3, r7
 80044cc:	460d      	mov	r5, r1
 80044ce:	d9f4      	bls.n	80044ba <_printf_i+0x112>
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10b      	bne.n	80044ec <_printf_i+0x144>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	07df      	lsls	r7, r3, #31
 80044d8:	d508      	bpl.n	80044ec <_printf_i+0x144>
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6861      	ldr	r1, [r4, #4]
 80044de:	4299      	cmp	r1, r3
 80044e0:	bfde      	ittt	le
 80044e2:	2330      	movle	r3, #48	@ 0x30
 80044e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044ec:	1b92      	subs	r2, r2, r6
 80044ee:	6122      	str	r2, [r4, #16]
 80044f0:	f8cd a000 	str.w	sl, [sp]
 80044f4:	464b      	mov	r3, r9
 80044f6:	aa03      	add	r2, sp, #12
 80044f8:	4621      	mov	r1, r4
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7ff fee6 	bl	80042cc <_printf_common>
 8004500:	3001      	adds	r0, #1
 8004502:	d14a      	bne.n	800459a <_printf_i+0x1f2>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	b004      	add	sp, #16
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f043 0320 	orr.w	r3, r3, #32
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	4833      	ldr	r0, [pc, #204]	@ (80045e4 <_printf_i+0x23c>)
 8004518:	2778      	movs	r7, #120	@ 0x78
 800451a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	6831      	ldr	r1, [r6, #0]
 8004522:	061f      	lsls	r7, r3, #24
 8004524:	f851 5b04 	ldr.w	r5, [r1], #4
 8004528:	d402      	bmi.n	8004530 <_printf_i+0x188>
 800452a:	065f      	lsls	r7, r3, #25
 800452c:	bf48      	it	mi
 800452e:	b2ad      	uxthmi	r5, r5
 8004530:	6031      	str	r1, [r6, #0]
 8004532:	07d9      	lsls	r1, r3, #31
 8004534:	bf44      	itt	mi
 8004536:	f043 0320 	orrmi.w	r3, r3, #32
 800453a:	6023      	strmi	r3, [r4, #0]
 800453c:	b11d      	cbz	r5, 8004546 <_printf_i+0x19e>
 800453e:	2310      	movs	r3, #16
 8004540:	e7ac      	b.n	800449c <_printf_i+0xf4>
 8004542:	4827      	ldr	r0, [pc, #156]	@ (80045e0 <_printf_i+0x238>)
 8004544:	e7e9      	b.n	800451a <_printf_i+0x172>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f023 0320 	bic.w	r3, r3, #32
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	e7f6      	b.n	800453e <_printf_i+0x196>
 8004550:	4616      	mov	r6, r2
 8004552:	e7bd      	b.n	80044d0 <_printf_i+0x128>
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	6961      	ldr	r1, [r4, #20]
 800455a:	1d18      	adds	r0, r3, #4
 800455c:	6030      	str	r0, [r6, #0]
 800455e:	062e      	lsls	r6, r5, #24
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	d501      	bpl.n	8004568 <_printf_i+0x1c0>
 8004564:	6019      	str	r1, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0x1c6>
 8004568:	0668      	lsls	r0, r5, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0x1bc>
 800456c:	8019      	strh	r1, [r3, #0]
 800456e:	2300      	movs	r3, #0
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	4616      	mov	r6, r2
 8004574:	e7bc      	b.n	80044f0 <_printf_i+0x148>
 8004576:	6833      	ldr	r3, [r6, #0]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	6032      	str	r2, [r6, #0]
 800457c:	681e      	ldr	r6, [r3, #0]
 800457e:	6862      	ldr	r2, [r4, #4]
 8004580:	2100      	movs	r1, #0
 8004582:	4630      	mov	r0, r6
 8004584:	f7fb fe2c 	bl	80001e0 <memchr>
 8004588:	b108      	cbz	r0, 800458e <_printf_i+0x1e6>
 800458a:	1b80      	subs	r0, r0, r6
 800458c:	6060      	str	r0, [r4, #4]
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	2300      	movs	r3, #0
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004598:	e7aa      	b.n	80044f0 <_printf_i+0x148>
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	4632      	mov	r2, r6
 800459e:	4649      	mov	r1, r9
 80045a0:	4640      	mov	r0, r8
 80045a2:	47d0      	blx	sl
 80045a4:	3001      	adds	r0, #1
 80045a6:	d0ad      	beq.n	8004504 <_printf_i+0x15c>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	079b      	lsls	r3, r3, #30
 80045ac:	d413      	bmi.n	80045d6 <_printf_i+0x22e>
 80045ae:	68e0      	ldr	r0, [r4, #12]
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	4298      	cmp	r0, r3
 80045b4:	bfb8      	it	lt
 80045b6:	4618      	movlt	r0, r3
 80045b8:	e7a6      	b.n	8004508 <_printf_i+0x160>
 80045ba:	2301      	movs	r3, #1
 80045bc:	4632      	mov	r2, r6
 80045be:	4649      	mov	r1, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	47d0      	blx	sl
 80045c4:	3001      	adds	r0, #1
 80045c6:	d09d      	beq.n	8004504 <_printf_i+0x15c>
 80045c8:	3501      	adds	r5, #1
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	9903      	ldr	r1, [sp, #12]
 80045ce:	1a5b      	subs	r3, r3, r1
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dcf2      	bgt.n	80045ba <_printf_i+0x212>
 80045d4:	e7eb      	b.n	80045ae <_printf_i+0x206>
 80045d6:	2500      	movs	r5, #0
 80045d8:	f104 0619 	add.w	r6, r4, #25
 80045dc:	e7f5      	b.n	80045ca <_printf_i+0x222>
 80045de:	bf00      	nop
 80045e0:	08004775 	.word	0x08004775
 80045e4:	08004786 	.word	0x08004786

080045e8 <memmove>:
 80045e8:	4288      	cmp	r0, r1
 80045ea:	b510      	push	{r4, lr}
 80045ec:	eb01 0402 	add.w	r4, r1, r2
 80045f0:	d902      	bls.n	80045f8 <memmove+0x10>
 80045f2:	4284      	cmp	r4, r0
 80045f4:	4623      	mov	r3, r4
 80045f6:	d807      	bhi.n	8004608 <memmove+0x20>
 80045f8:	1e43      	subs	r3, r0, #1
 80045fa:	42a1      	cmp	r1, r4
 80045fc:	d008      	beq.n	8004610 <memmove+0x28>
 80045fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004602:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004606:	e7f8      	b.n	80045fa <memmove+0x12>
 8004608:	4402      	add	r2, r0
 800460a:	4601      	mov	r1, r0
 800460c:	428a      	cmp	r2, r1
 800460e:	d100      	bne.n	8004612 <memmove+0x2a>
 8004610:	bd10      	pop	{r4, pc}
 8004612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800461a:	e7f7      	b.n	800460c <memmove+0x24>

0800461c <_sbrk_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d06      	ldr	r5, [pc, #24]	@ (8004638 <_sbrk_r+0x1c>)
 8004620:	2300      	movs	r3, #0
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	f7fc fb66 	bl	8000cf8 <_sbrk>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_sbrk_r+0x1a>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_sbrk_r+0x1a>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	20001770 	.word	0x20001770

0800463c <_realloc_r>:
 800463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004640:	4680      	mov	r8, r0
 8004642:	4615      	mov	r5, r2
 8004644:	460c      	mov	r4, r1
 8004646:	b921      	cbnz	r1, 8004652 <_realloc_r+0x16>
 8004648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800464c:	4611      	mov	r1, r2
 800464e:	f7ff bc59 	b.w	8003f04 <_malloc_r>
 8004652:	b92a      	cbnz	r2, 8004660 <_realloc_r+0x24>
 8004654:	f7ff fbea 	bl	8003e2c <_free_r>
 8004658:	2400      	movs	r4, #0
 800465a:	4620      	mov	r0, r4
 800465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004660:	f000 f81a 	bl	8004698 <_malloc_usable_size_r>
 8004664:	4285      	cmp	r5, r0
 8004666:	4606      	mov	r6, r0
 8004668:	d802      	bhi.n	8004670 <_realloc_r+0x34>
 800466a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800466e:	d8f4      	bhi.n	800465a <_realloc_r+0x1e>
 8004670:	4629      	mov	r1, r5
 8004672:	4640      	mov	r0, r8
 8004674:	f7ff fc46 	bl	8003f04 <_malloc_r>
 8004678:	4607      	mov	r7, r0
 800467a:	2800      	cmp	r0, #0
 800467c:	d0ec      	beq.n	8004658 <_realloc_r+0x1c>
 800467e:	42b5      	cmp	r5, r6
 8004680:	462a      	mov	r2, r5
 8004682:	4621      	mov	r1, r4
 8004684:	bf28      	it	cs
 8004686:	4632      	movcs	r2, r6
 8004688:	f7ff fbc2 	bl	8003e10 <memcpy>
 800468c:	4621      	mov	r1, r4
 800468e:	4640      	mov	r0, r8
 8004690:	f7ff fbcc 	bl	8003e2c <_free_r>
 8004694:	463c      	mov	r4, r7
 8004696:	e7e0      	b.n	800465a <_realloc_r+0x1e>

08004698 <_malloc_usable_size_r>:
 8004698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800469c:	1f18      	subs	r0, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfbc      	itt	lt
 80046a2:	580b      	ldrlt	r3, [r1, r0]
 80046a4:	18c0      	addlt	r0, r0, r3
 80046a6:	4770      	bx	lr

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
